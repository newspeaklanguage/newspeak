Newspeak3
'NS2PrimordialSoup'
class JSON usingPlatform: platform = (|
private ArgumentError = platform kernel ArgumentError.
private StringBuilder = platform kernel StringBuilder.
private List = platform collections List.
private OrderedMap = platform collections OrderedMap.
|) (
class Decoder on: b = (|
protected string <ByteArray | String> = b.
protected position <Integer> ::= 1.
protected size <Integer> = string size.
|) (
error: message = (
	^Error signal: message
)
isDigit: byte = (
	16r30 <= byte ifTrue: [16r39 >= byte ifTrue: [^true]].
	^false
)
isNumberStart: byte = (
	16r30 <= byte ifTrue: [16r39 >= byte ifTrue: [^true]].
	16r2D = byte ifTrue: [^true].
	^false
)
isWhitespace: byte = (
	16r09 = byte ifTrue: [^true]. (* tab *)
	16r0A = byte ifTrue: [^true]. (* LF *)
	16r0D = byte ifTrue: [^true]. (* CR *)
	16r20 = byte ifTrue: [^true]. (* space *)
	^false
)
parseEscapedCharacter = (
	| byte |
	position:: 1 + position.
	position <= size ifFalse: [^error: 'end of string expected'].
	byte:: string at: position.
	16r22 = byte ifTrue: [^16r22]. (* \" *)
	16r5C = byte ifTrue: [^16r5C]. (* \\ *)
	16r2F = byte ifTrue: [^16r2F]. (* \/ *)
	16r62 = byte ifTrue: [^16r08]. (* \b *)
	16r66 = byte ifTrue: [^16r0C]. (* \f *)
	16r6E = byte ifTrue: [^16r0A]. (* \n *)
	16r72 = byte ifTrue: [^16r0D]. (* \r *)
	16r74 = byte ifTrue: [^16r09]. (* \t *)
	^error: 'bad string escape'
)
parseFalse = (
	position + 4 <= size ifTrue:
		[16r66 = (string at: position) ifTrue:
			[16r61 = (string at: 1 + position) ifTrue:
				[16r6C = (string at: 2 + position) ifTrue:
					[16r73 = (string at: 3 + position) ifTrue:
						[16r65 = (string at: 4 + position) ifTrue:
							[position:: 5 + position.
							 ^false]]]]]].
	^error: 'value expected'
)
parseList = (
	(* "[" (value ("," value)* )? "]" *)
	| byte result |
	skipWhitespace.
	byte:: string at: position.
	16r5B = byte ifFalse: [^error: 'list expected'].
	position:: 1 + position.
	result:: List new.
	skipWhitespace.
	byte:: string at: position.
	16r5D = byte ifTrue:
		[position:: 1 + position.
		 ^result].
	[result add: parseValue.
	 skipWhitespace.
	 byte:: string at: position.
	 16r5D = byte] whileFalse:
		[16r2C = byte ifFalse: [^error: 'end of list expected'].
		 position:: 1 + position].
	position:: 1 + position.
	^result
)
parseMap = (
	(* "{" (string ":" value ("," string ":" value)* )? "}" *)
	| byte result |
	skipWhitespace.
	byte:: string at: position.
	16r7B = byte ifFalse: [^error: 'map expected'].
	position:: 1 + position.
	result:: OrderedMap new.
	skipWhitespace.
	byte:: string at: position.
	16r7D = byte ifTrue:
		[position:: 1 + position.
		 ^result].
	[parseProperty: result.
	 skipWhitespace.
	 byte:: string at: position.
	 16r7D = byte] whileFalse:
		[16r2C = byte ifFalse: [^error: 'end of map expected'].
		 position:: 1 + position].
	position:: 1 + position.
	^result
)
parseNull = (
	position + 3 <= size ifTrue:
		[16r6E = (string at: position) ifTrue:
			[16r75 = (string at: 1 + position) ifTrue:
				[16r6C = (string at: 2 + position) ifTrue:
					[16r6C = (string at: 3 + position) ifTrue:
						[position:: 4 + position.
						 ^nil]]]]].
	^error: 'value expected'
)
parseNumber= (
	(* "-"? digit+ ("." digit+) ((e|E) (+|-)? digit+) *)
	| neg byte result |
	position <= size ifFalse: [error: 'number expected'].
	(neg:: 16r2D = (string at: position)) ifTrue: [position:: 1 + position].
	position <= size ifFalse: [error: 'number expected'].
	byte:: string at: position.
	(isDigit: byte) ifFalse: [error: 'number expected'].
	result:: 0.
	[position <= size and: [isDigit: (byte:: string at: position)]]
		whileTrue:
			[result:: result * 10 + (byte - 48).
			 position:: position + 1].
	result:: result + parseOptionalFraction.
	result:: result * parseOptionalExponent.
	^neg ifTrue: [-1 * result] ifFalse: [result]
)
parseOptionalExponent = (
	(* ((e|E) (+|-)? digit+) *)
	| byte neg exp |
	position <= size ifFalse: [^1].
	16r45 = (string at: position) ifFalse:
		[16r65 = (string at: position) ifFalse: [^1]].
	position:: 1 + position.
	position <= size ifFalse: [error: 'number expected'].
	byte:: string at: position.
	16r2B = byte ifTrue: [position:: 1 + position].
	(neg:: 16r2D = byte) ifTrue: [position:: 1 + position].
	position <= size ifFalse: [error: 'number expected'].
	byte:: string at: position.
	(isDigit: byte) ifFalse: [error: 'number expected'].
	exp:: 0.
	[position <= size and: [isDigit: (byte:: string at: position)]]
		whileTrue:
			[exp:: exp * 10 + (byte - 48).
			 position:: position + 1].
	neg ifTrue: [exp:: -1 * exp].
	^10 raisedTo: exp
)
parseOptionalFraction = (
	(* ("." digit+) *)
	| num denom byte |
	position <= size ifFalse: [^0].
	16r2E = (string at: position) ifFalse: [^0].
	position:: 1 + position.
	position <= size ifFalse: [error: 'number expected'].
	byte:: string at: position.
	(isDigit: byte) ifFalse: [error: 'number expected'].
	num:: 0.
	denom:: 1.
	[position <= size and: [isDigit: (byte:: string at: position)]]
		whileTrue:
			[num:: num * 10 + (byte - 48).
			 denom:: denom * 10.
			 position:: position + 1].
	^num / denom
)
parseProperty: result = (
	(* string ":" value *)
	| key value |
	key:: parseString.
	skipWhitespace.
	position <= size ifFalse: [^error: '":" expected'].
	16r3A = (string at: position) ifFalse: [^error: '":" expected'].
	position:: 1 + position.
	value:: parseValue.
	result at: key put: value
)
parseString = (
	| byte result |
	skipWhitespace.
	position <= size ifFalse: [^error: 'string expected'].
	byte:: string at: position.
	16r22 = byte ifFalse: [^error: 'string expected'].
	position:: 1 + position.
	position <= size ifFalse: [^error: 'end of string expected'].
	byte:: string at: position.
	result:: StringBuilder new.
	[16r22 = byte] whileFalse:
		[result addByte: (16r5C = byte ifTrue: [parseEscapedCharacter] ifFalse: [byte]).
		 position:: 1 + position.
		 position <= size ifFalse: [^error: 'end of string expected'].
		 byte:: string at: position].
	position:: 1 + position.
	^result asString
)
parseTrue = (
	position + 3 <= size ifTrue: [
		16r74 = (string at: position) ifTrue:
			[16r72 = (string at: 1 + position) ifTrue:
				[16r75 = (string at: 2 + position) ifTrue:
					[16r65 = (string at: 3 + position) ifTrue:
						[position:: 4 + position.
						 ^true]]]]].
	^error: 'value expected'
)
public parseValue = (
	| byte |
	skipWhitespace.
	position <= size ifFalse: [error: 'value expected'].
	byte:: string at: position.
	16r5B = byte ifTrue: [^parseList].
	16r7B = byte ifTrue: [^parseMap].
	16r22 = byte ifTrue: [^parseString].
	16r74 = byte ifTrue: [^parseTrue].
	16r66 = byte ifTrue: [^parseFalse].
	16r6E = byte ifTrue: [^parseNull].
	(isNumberStart: byte) ifTrue: [^parseNumber].
	^error: 'value expected'
)
skipWhitespace = (
	[position <= string size and: [isWhitespace: (string at: position)]]
			whileTrue: [position:: 1 + position].
)
) : (
)
class Encoder on: b = (|
protected builder <StringBuilder> = b.
|) (
writeCharacter: byte = (
	16r22 = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r22]. (* \" *)
	16r5C = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r5C]. (* \\ *)
	16r2F = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r2F]. (* \/ *)
	16r08 = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r62]. (* \b *)
	16r0C = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r66]. (* \f *)
	16r0A = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r6E]. (* \n *)
	16r0D = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r72]. (* \r *)
	16r09 = byte ifTrue: [^builder addByte: 16r5C; addByte: 16r74]. (* \t *)
	^builder addByte: byte
)
protected writeList: list = (
	builder add: '['.
	list
		do: [:element | writeValue: element]
		separatedBy: [builder add: ','].
	builder add: ']'.
)
protected writeMap: map = (
	| first <Boolean> ::= true. |
	builder add: '{'.
	map keysAndValuesDo:
		[:key :value |
		 first ifFalse: [builder add: ','].
		 first:: false.
		 writeString: key.
		 builder add: ':'.
		 writeValue: value].
	builder add: '}'.
)
writeString: string = (
	builder addByte: 16r22.
	1 to: string size do: [:index | writeCharacter: (string at: index)].
	builder addByte: 16r22.
)
public writeValue: object = (
	nil = object ifTrue: [^builder add: 'null'].
	true = object ifTrue: [^builder add: 'true'].
	false = object ifTrue: [^builder add: 'false'].
	object isKindOfString ifTrue: [^writeString: object].
	object isKindOfInteger ifTrue: [^builder add: object asString].
	object isKindOfFloat ifTrue: [^builder add: object asString].
	object isKindOfNumber ifTrue: [^builder add: object asFloat asString].
	object isKindOfArray ifTrue: [^writeList: object].
	object isKindOfList ifTrue: [^writeList: object].
	object isKindOfMap ifTrue: [^writeMap: object].
	^(ArgumentError value: object) signal
)
) : (
)
public decode: bytes <ByteArray | String> ^<UndefinedObject | Boolean | Number | String | List | Map> = (
	^(Decoder on: bytes) parseValue
)
public encode: value <UndefinedObject | Boolean | Number | String | List | Map> ^<String> = (
	| builder = StringBuilder new. |
	(Encoder on: builder) writeValue: value.
	^builder asString
)
) : (
)