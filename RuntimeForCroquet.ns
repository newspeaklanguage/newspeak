Newspeak3
'Root'
class RuntimeForCroquet packageRuntimeUsing: manifest = (
    (*
This class is designed to be instantiated with a manifest that represents images as strings containing the paths of the corresponding image files. Attempting to instantiate it from the IDE manifest will fail, since there images are truly images.

At some point, we should refine it so that it will adapt as needed.
*)
|
private Kernel = manifest Kernel.
public InternalKernel = manifest KernelForPrimordialSoup.
private Collections = manifest CollectionsForPrimordialSoup.
private Mirrors = manifest MirrorsForPrimordialSoup.
private Actors = manifest ActorsForPrimordialSoup.
private Ducts = manifest Ducts.
private HopscotchForHTML5 = manifest HopscotchForHTML5.
private HopscotchForCroquet = manifest HopscotchForCroquet.
public NewspeakASTs = manifest NewspeakASTs.
public NewspeakPredictiveParsing = manifest NewspeakPredictiveParsing.
public Intermediates = manifest IntermediatesForPrimordialSoup.
public Newspeak2PrimordialSoupCompilation = manifest Newspeak2PrimordialSoupCompilation mixinApply: manifest NewspeakCompilation.
public MetadataParsing = manifest MetadataParsing.
private Graphics = manifest GraphicsForHTML5.
private Fonts = manifest FontsForHTML5.
private TextModule = manifest TextModule.
private PrimordialFuel = manifest PrimordialFuel.
private NodeAPI = manifest NodeAPI.
private JS = manifest JSForPrimordialSoup.
private JSForCroquet = manifest JSForCroquet.

private imagePaths = ImagePaths packageUsing: manifest.
|
) (
class ImagePaths packageUsing: manifest = (
  (* This class extracts images from the manifest; during serialization, these  are represented as strings containing the paths of the image files. There is  design question as to whether these should be handled here, by the platform, or in the Hopscotch module; since this is where we've done it historically, we'll keep it for now.
*)
  |
      	 public addImage_path = manifest addImage. 
  	 public accept16px_path <String> = manifest accept16px.
	 public cancel16px_path <String> = manifest cancel16px.
	 public backImage_path <String> = manifest backImage.
         public clearImage_path <String> = manifest clearImage.
  	 public collapseImage_path = manifest collapseImage.
	 public disclosureClosedImage_path <String> = manifest disclosureClosedImage.
	 public disclosureOpenImage_path <String> = manifest disclosureOpenImage.
	 public downloadImage_path <String> = manifest downloadImage.
         public dropDownImage_path <String> = manifest dropDownImage.
  	 public expandImage_path = manifest expandImage.
	 public forwardImage_path <String> = manifest forwardImage.
	 public findImage_path <String> = manifest findImage.
	 public helpImage_path <String> = manifest helpImage.
	 public historyImage_path <String> = manifest historyImage.
	 public homeImage_path <String> = manifest homeImage.
	 public itemReferencesImage_path <String> = manifest itemReferencesImage.
	 public newImage_path <String> = manifest newImage.
         public peekingeye1610_path <String> = manifest peekingeye1610.
         public refreshImage_path <String> = manifest refreshImage.
         public saveImage_path = manifest saveImage.
         (* The ones below probably belong in the IDE, but for now, it's expedient to have them here *)
         public ampleforthDocument_path = manifest ampleforthDocument.
         public classImage_path = manifest classImage.
         public classPresenterImage_path = manifest classPresenterImage.
         public classUnknownImage_path = manifest classUnknownImage.
         public privateAccessImage_path = manifest privateAccessImage.
         public protectedAccessImage_path = manifest protectedAccessImage.
         public publicAccessImage_path = manifest publicAccessImage.
         public sectionImage_path = manifest sectionImage.
  |
) (
) : (
)
class Images usingPlatform: p = (
  (* This class stores the actual image objects provided by the platform; The images are lazily computed based on their paths.
*)
  |
  platform = p.
  
	accept16px_slot
	cancel16px_slot
	backImage_slot
	clearImage_slot
	disclosureClosedImage_slot
	disclosureOpenImage_slot
	downloadImage_slot
	dropDownImage_slot
	forwardImage_slot
	findImage_slot
	helpImage_slot
	historyImage_slot
	homeImage_slot
	itemReferencesImage_slot
	newImage_slot
        peekingeye1610_slot
	refreshImage_slot 
|
) (

        lazy public addImage = resolveImage: imagePaths addImage_path.
        lazy public ampleforthDocument = resolveImage: imagePaths ampleforthDocument_path.
	lazy public classImage = resolveImage: imagePaths classImage_path.
	lazy public classPresenterImage = resolveImage: imagePaths classPresenterImage_path.
	lazy public classUnknownImage = resolveImage: imagePaths classUnknownImage_path.
	lazy public collapseImage = resolveImage: imagePaths collapseImage_path.
	lazy public expandImage = resolveImage: imagePaths expandImage_path.
	lazy public privateAccessImage = resolveImage: imagePaths privateAccessImage_path.
	lazy public protectedAccessImage = resolveImage: imagePaths protectedAccessImage_path.
	lazy public publicAccessImage = resolveImage: imagePaths publicAccessImage_path.
        lazy public saveImage = resolveImage: imagePaths saveImage_path.
        lazy public sectionImage = resolveImage: imagePaths sectionImage_path.

  resolveImage: path <String> ^ <Alien[Image]> = (^(platform js global at: 'Image') new at: 'src' put: path; yourself)

(* We should convert the rest to be lazy as well *)

public accept16px = (
  accept16px_slot isNil ifTrue: [
    accept16px_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths accept16px_path; yourself
  ].
  ^accept16px_slot
)
public cancel16px = (
  cancel16px_slot isNil ifTrue: [
    cancel16px_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths cancel16px_path; yourself
  ].
  ^cancel16px_slot
)
public backImage = (
  backImage_slot isNil ifTrue: [
    backImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths backImage_path; yourself
  ].
  ^backImage_slot
)
public clearImage = (
  clearImage_slot isNil ifTrue: [
    clearImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths clearImage_path; yourself
  ].
  ^clearImage_slot
)
public disclosureClosedImage = (
  disclosureClosedImage_slot isNil ifTrue: [
    disclosureClosedImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths disclosureClosedImage_path; yourself
  ].
  ^disclosureClosedImage_slot
)
public disclosureOpenImage = (
  disclosureOpenImage_slot isNil ifTrue: [
    disclosureOpenImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths disclosureOpenImage_path; yourself
  ].
  ^disclosureOpenImage_slot
)
public downloadImage = (
  downloadImage_slot isNil ifTrue: [
    downloadImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths downloadImage_path; yourself
  ].
  ^downloadImage_slot
)
public dropDownImage = (
  dropDownImage_slot isNil ifTrue: [
    dropDownImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths dropDownImage_path; yourself
  ].
  ^dropDownImage_slot
)
public forwardImage = (
  forwardImage_slot isNil ifTrue: [
    forwardImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths forwardImage_path; yourself
  ].
  ^forwardImage_slot
)
public findImage = (
  findImage_slot isNil ifTrue: [
    findImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths findImage_path; yourself
  ].
  ^findImage_slot
)
public helpImage = (
  helpImage_slot isNil ifTrue: [
    helpImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths helpImage_path; yourself
  ].
  ^helpImage_slot
)
public historyImage = (
  historyImage_slot isNil ifTrue: [
    historyImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths historyImage_path; yourself
  ].
  ^historyImage_slot
)
public homeImage = (
  homeImage_slot isNil ifTrue: [
    homeImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths homeImage_path; yourself
  ].
  ^homeImage_slot
)
public itemReferencesImage = (
  itemReferencesImage_slot isNil ifTrue: [
    itemReferencesImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths itemReferencesImage_path; yourself
  ].
  ^itemReferencesImage_slot
)
public newImage = (
  newImage_slot isNil ifTrue: [
    newImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths newImage_path; yourself
  ].
  ^newImage_slot
)
public peekingeye1610 = (
  peekingeye1610_slot isNil ifTrue: [
    peekingeye1610_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths peekingeye1610_path; yourself
  ].
  ^peekingeye1610_slot
)
public refreshImage = (
  refreshImage_slot isNil ifTrue: [
    refreshImage_slot:: (platform js global at: 'Image') new at: 'src' put: imagePaths refreshImage_path; yourself
  ].
  ^refreshImage_slot
)
) : (
)
public class Platform internalKernel: ik = (
  |
  public kernel = Kernel wrapping: ik.
  public collections = Collections usingInternalKernel: ik.
  public mirrors = Mirrors usingPlatform: self internalKernel: ik namespace: outer RuntimeForCroquet.
  public victoryFuel = PrimordialFuel usingPlatform: self internalKernel: ik.
  public actors = Actors usingPlatform: self.
  private jsForCroquet = JSForCroquet usingPlatform: self js: JS.
  public js = jsForCroquet Js usingPlatform: self.
  public fonts = Fonts usingPlatform: self.
  public graphics = Graphics usingPlatform: self.
  public text = TextModule usingPlatform: self.
   public local = self.
   
  private hopscotchForCroquet = HopscotchForCroquet usingPlatform: self  hopscotch: HopscotchForHTML5.
  public hopscotch = hopscotchForCroquet Hopscotch usingPlatform: self images: (Images usingPlatform: self) ducts: (Ducts usingPlatform: self).
  |
) (
public operatingSystem ^<String> = (
	(* :literalmessage: primitive: 99 *)
	halt.
)
public isKindOfPlatformWithHopscotch ^ <Boolean> = (
   ^true
)
public isKindOfPlatformWithCroquet ^ <Boolean> = (
  ^true
)
) : (
)
) : (
public keepsSources ^ <Boolean> = (
  ^true
)
)
