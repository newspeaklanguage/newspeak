Newspeak3
'Root'
class DeploymentManager usingPlatform: p <HopscotchPlatform> ide: ide <HopscotchWebIDE> = (
(*
This class manages deployment of Newspeak applications from the IDE.
It maintains a set of Newspeak platform configurations. Configurations can vary 
depending on the capabilities a deployed application requires. For example, an 
application may or may not need the hopscotch UI, or mirrors for reflection, 
or access to local functionality via node etc. A DeploymentConfiguration describes 
a particular set of required capabilities.

Every configuration is based upon a base platform, which currently is either
primordial soup or javascript. This base is then extended with specific capabilities
as described above.

A customized platform class is produced based on a given deployment configuration.
Platform classes are created dynamically from source. The source is composed
dynamically from snippets describing the various platform capabilities.

We keep the set of existing configurations in the slot knownConfigurations.
This set may be extended or restricted via the UI. 
*)
	|
    (* imports *)
    private StringBuilder = p kernel StringBuilder.
    private Map = p collections Map.
	private List = p collections List.
    private Subject = p hopscotch Subject.
	private ProgammingPresenter = ide browsing ProgrammingPresenter.
	private ClassMirror = p mirrors ClassMirror.
    private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.

	private CombinatorialParsing = ide namespacing manifest CombinatorialParsing.
	private Grammar = ide namespacing manifest NewspeakGrammar.
	private ASTs = ide namespacing manifest NewspeakASTs.
	private Parsing = ide namespacing manifest NewspeakParsing.
	private Generation = ide namespacing manifest JavascriptGeneration.
	private Compilation = ide namespacing manifest Newspeak2V8Compilation 
        mixinApply: ide namespacing manifest NewspeakCompilation.
    private Snapshotter = p operatingSystem = 'emscripten' ifTrue: [p victoryFuel Snapshotter].

	public Runtime = ide namespacing manifest RuntimeForV8.
	public RuntimeWithMirrorBuilders = ide namespacing manifest RuntimeForV8WithMirrorBuilders.
    
    
    (* module variables *)
    knownConfigurations <Map[String, DeploymentConfiguration]> = Map new.
    maxConfig <Integer> = 0. (* counter for generating config names *)
    jsPackagerSlot <JSPackager>
    icons = ide namespacing Root at: 'Icons'.
	|
    createDefaultConfigurations.
) (
class DeploymentConfiguration = (
	|
    public name <String>
    public base <Symbol> ::= #Psoup.
    public hasHopscotch <Boolean> ::= false.
    public hasMirrors <Boolean> ::= false.
    public hasNode <Boolean> ::= false.
    public hasElectron <Boolean> ::= false.
    public hasZircon <Boolean> ::= false.
    public runtime <ClassDeclarationMirror>
	|
) (
public = other <Object> ^ <Boolean> = (
  other isKindOfDeploymentConfiguration ifFalse: [^false].
  ^base = other base and: [
     hasHopscotch = other hasHopscotch and: [
     hasMirrors = other hasMirrors and: [
     hasNode = other hasNode and: [
     hasElectron = other hasElectron and: [
     hasZircon = other hasZircon and: [     
  ]]]]]]
)
public isKindOfDeploymentConfiguration ^ <Boolean> = (
  ^true
)
public hash ^ <Integer> = (

    ^base bitXor: (
     hasHopscotch bitXor: (
     hasMirrors bitXor: (
     hasNode bitXor: (
     hasElectron bitXor: (
     hasZircon   
  )))))
)
) : (
)
public class DeploymentConfigurationSubject onModel: dc <DeploymentConfiguration> = Subject onModel: dc (
) (
public createPresenter ^ <DeploymentConfigurationPresenter> = (
  ^DeploymentConfigurationPresenter onSubject: self
)
jsPrefix ^ <String> = (
  ^'class RuntimeForV8 packageUsing: manifest = (
(* Provides the platform object for Newspeak on Javascript.

Copyright 2012 Google Inc.
Copyright 2013 Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
|
	Kernel = manifest KernelForV8.
	Actors = manifest ActorsForV8.
	Aliens = manifest AliensForV8.
	Collections = manifest Collections.
	Mirrors = manifest MirrorsForV8.
	public MirrorGroups = manifest MirrorGroups.
	Streams = manifest Streams.
    '
)
psoupPrefix ^ <String> = (
  ^'class RuntimeForPrimordialSoup packageRuntimeUsing: manifest = (|
private Kernel = manifest Kernel.
public InternalKernel = manifest KernelForPrimordialSoup.
private Collections = manifest CollectionsForPrimordialSoup.
private Actors = manifest ActorsForPrimordialSoup.
private PrimordialFuel = manifest PrimordialFuel.
private JS = manifest JSForPrimordialSoup.
'
)
jsPlatformFactoryPrefix ^ <String> = (
  ^'public class Platform usingVmMirror: vmmirror = (
	|
	public kernel = Object enclosingObject. (* Instantiated specially to avoid bootstrapping issues. *)
	public actors = Future computing: [Actors usingPlatform: self].
	public js = Future computing: [Aliens usingPlatform: self].
	public collections = Future computing: [Collections usingPlatform: self].
	public streams = Future computing: [Streams usingPlatform: self].
	public operatingSystem = #web.
    '
)
psoupPlatformFactoryPrefix ^ <String> = (
  ^'public class Platform internalKernel: ik = (|
public kernel = Kernel wrapping: ik.
public collections = Collections usingInternalKernel: ik.
public victoryFuel = PrimordialFuel usingPlatform: self internalKernel: ik.
public actors = Actors usingPlatform: self.
public js = JS usingPlatform: self.
'
)
public config ^ <DeploymentConfiguration> = (
  ^model
)
public addZircon ^ <Boolean> = (
  ^config hasZircon: true
)
public addHopscotch ^ <Boolean> = (
  ^config hasHopscotch: true
)
public addMirrors ^ <Boolean> = (
  ^config hasMirrors: true
)
public addElectron ^ <Boolean> = (
  ^config hasElectron: true
)
public addNode ^ <Boolean> = (
  ^config hasNode: true
)
public runtime ^ <ClassDeclarationMirror> = (
  ^(ClassDeclarationBuilder fromSource: source) install
)
addIsKindOfMethodsTo: src <StringBuilder> = (
  src add: 'public isKindOfPlatform ^ <Boolean> =  (^true)
  '.
  src add: 'public isKindOf'.
  src add: config base.
  src add: 'Platform ^ <Boolean> =  (^true)
  '.  
  hasHopscotch  ifTrue: [src add: 'public isKindOfPlatformWithHopscotch ^ <Boolean> =  (^true)
  '].
  hasMirrors  ifTrue: [src add: 'public isKindOfPlatformWithMirrors ^ <Boolean> =  (^true)
  '].
  hasNode ifTrue: [src add: 'public isKindOfPlatformWithNode ^ <Boolean> =  (^true)
  '].
  hasElectron ifTrue: [src add: 'public isKindOfPlatformWithElectron ^ <Boolean> =  (^true)
  '].
  hasZircon ifTrue: [src add: 'public isKindOfPlatformWithZircon ^ <Boolean> =  (^true)
  '].
)
public source ^ <String> = (
  (* compute the source code for runtime class that matches this configuration *)
  | src <StringBuilder> = StringBuilder new: 2500. |
  src add: basePrefix.
  hasHopscotch  ifTrue: [src add: '  private Graphics = manifest GraphicsForHTML5.
 	private TextModule = manifest TextModule.
 	private Hopscotch = manifest HopscotchForHTML5.
     '].
  hasMirrors  ifTrue: [src add: 'private Mirrors = manifest MirrorsForPrimordialSoup.'].
  hasNode ifTrue: [].
  hasElectron ifTrue: [].
  hasZircon ifTrue: [src add: 'private Zircon = manifest Zircon.'].
  src add: '
  |
) (
'.
  src add: basePlatformFactoryPrefix.
  hasHopscotch  ifTrue: [src add: '	public graphics = Graphics usingPlatform: self.
	public text = TextModule usingPlatform: self.
	public hopscotch = Hopscotch usingPlatform: self images: images..
    '].
  hasMirrors  ifTrue: [
    base = #primordialsoup 
      ifTrue: [src add: 'public mirrors = Mirrors usingPlatform: self internalKernel: ik namespace: outer RuntimeWithMirrorsForPrimordialSoup.']
      ifFalse: [src add: 'public mirrors = Future computing: [Mirrors usingPlatform: self runtime: outer RuntimeForV8 vmMirror: vmmirror].']
      ].
  hasNode ifTrue: [].
  hasElectron ifTrue: [].
  hasZircon ifTrue: [
    assert: [base = #primordialsoup] message:  'Cannot combine Zircon and Javascript base platform'.
    src add: 'public zircon =  Zircon usingPlatform: self.'
  ].
    src add: '
  |
) (
'.
  addIsKindOfMethodsTo: src.
  src add: baseSuffix. 
  ^src asString
)
basePlatformFactoryPrefix ^ <String> = (
  config base = #Psoup ifTrue: [^psoupPlatformFactoryPrefix].
  ^jsPlatformFactoryPrefix
)
basePrefix ^ <String> = (
  config base = #Psoup ifTrue: [^psoupPrefix].
  ^jsPrefix
)
public setBase: base = (
  config base: base.
  base = #Javascript ifTrue: [config hasZircon: false].
)
public name: n <String> = (
  config name: n.
  
)
public name ^ <String> = (
  config name isNil ifTrue: [
     config name: generateConfigName
  ].
  ^config name
)
generateConfigName ^ <String> = (
  maxConfig:: maxConfig + 1.
  ^'depConfig', maxConfig printString
)
public saveConfiguration = (
  config runtimeClass: (ClassDeclarationBuilder fromSource: source) install.
  addConfig: config
)
) : (
)
class DeploymentConfigurationPresenter onSubject: s <DeploymentConfigurationSubject> = ProgrammingPresenter onSubject: s (
) (
definition ^ <Fragment> = (
  ^column: {
        label: 'Deployment Configuration: ', subject name.
        label: 'Base = ', subject config base.
        subject config base= #Psoup ifTrue: [
          button: 'Switch to Javascript' action: [updateGUI: [subject setBase: #Javascript]]
          ] ifFalse: [
            button: 'Switch to Psoup' action: [updateGUI: [subject setBase: #Psoup]]
          ].
        subject config hasHopscotch ifTrue: [
          button: 'Remove Hopscotch support' action: [updateGUI: [subject config hasHopscotch: false]].
          ] ifFalse: [
            button: 'Add Hopscotch support' action: [updateGUI: [subject config hasHopscotch: true]].
          ].
        subject config hasMirrors ifTrue: [
          button: 'Remove Mirror support' action: [updateGUI: [subject config hasMirrors: false]].
          ] ifFalse: [
            button: 'Add Mirror support' action: [updateGUI: [subject config hasMirrors: true]].
          ].
        subject config hasNode ifTrue: [
          button: 'Remove Node support' action: [updateGUI: [subject config hasNode: false]].
          ] ifFalse: [
            button: 'Add Node support' action: [updateGUI: [subject config hasNode: true]].
          ]. 
        subject config hasElectron ifTrue: [
          button: 'Remove Electron support' action: [updateGUI: [subject config hasElectron: false]].
          ] ifFalse: [
            button: 'Add Electron support' action: [updateGUI: [subject config hasElectron: true]].
          ]. 
  subject config base= #psoup ifTrue: [
        subject config hasZircon ifTrue: [
          button: 'Remove Zircon support' action: [updateGUI: [subject config hasZircon: false]].
          ] ifFalse: [
            button: 'Add Zircon support' action: [updateGUI: [subject config hasZircon: true]].
          ].     
  ].
  button: 'Save' action: [subject saveConfiguration].
  }
)
) : (
)
public class JSPackager usingPlatform: p = (|
	private parserLib = CombinatorialParsing usingPlatform: p.
	private grammar = Grammar usingPlatform: p parsers: parserLib.
	private asts = ASTs usingLib: p.
	private parsing = Parsing usingPlatform: p grammar: grammar asts: asts.
	private generation = Generation usingPlatform: p.
	private compilation = Compilation
		usingPlatform: p
		asts: asts
		parsing: parsing
		generation: generation.
	|) (
class ManifestForV8 usingNamespace: ns = (|
	namespace = ns.
	public (* bogus *) imports = List new.
|) (
protected doesNotUnderstand: message = (
	imports add: message selector.
	^namespace
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
) : (
)
class JSDeployment named: n <String> page: p <String> script: s <String> source: src <String> resources: rs  <List[String]> = (
(*
A Javascript deployment of an app named X consists of a script file, X.js (the code), a sources file X.sources.js (the Newspeak source code), an html file, X.html (the actual web page), and resources files.
The contents of the script, sources and HTML file are held in thes lots script, sources and page respectively.
The file names for these three, as well as for resources files, are given as a list of relative paths held in the slot resourcePaths.
*)
	|
    public name <String> = n.
    public page <String> = p.
	public script <String> = s.
	public sources <String> = src.
    public resourcePaths <List[String]> = rs.
	|
) (
) : (
)
private sourceOf: klass <Class> ^ <String> = (
	^(ClassMirror reflecting: klass) mixin declaration compilationUnitSource
)
private extractSourcesFromConfiguration: appDefn <Class> usingNamespace: ns ^ <Array[String]> = (
	(* Ordering is important: the app definition must come first *)
	|
	modules <List[String]> = List new.
	importsRecorder = ManifestForV8 usingNamespace: ns.
	|
	modules add: (sourceOf: appDefn).

	appDefn packageUsing: importsRecorder.
	importsRecorder imports do: [:import <Symbol> |
		| resource |
		resource:: ns at: import.
		resource isKindOfBehavior ifTrue: [modules include: (sourceOf: (resource))]].

	^modules asArray
)
private extractResourcesFromConfiguration: config usingNamespace: ns into: builder ^ <List[String]> = (
	|
	resourcePaths <List[String]> = List new.
	importsRecorder = ManifestForV8 usingNamespace: ns.
	|

	config packageUsing: importsRecorder.
	importsRecorder imports do: [:import <Symbol> |
		| resource |
		resource:: ns at: import.
		resource isKindOfString ifTrue:
			[builder addStringResource: resource under: import].
		(resource isKindOfJSAlien and: ['IMG' = (resource  at: 'nodeName')]) ifTrue:
			[
			builder addImageResource: import, '.png' under: import.
			resourcePaths add: import, '.png']].

	^resourcePaths
)
pageNamed: name <String> ^ <String> = (
(* Compute the contents of the HTML file for the app named #name *)
	| page <String> =  StringBuilder new.  |

	page add: '<!DOCTYPE html><html><head>'; add: String lf.
	page add: '<meta charset="utf-8"/>'; add: String lf.
	page add: '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">'; 
             add: String lf.
	page add: '<title>'; add: name; add: '</title>'; add: String lf.
	page add: '</head><body>'; add: String lf.
	page add: '<script type="text/javascript" src="CodeMirror/lib/codemirror.js"></script>'.
	page add: '<link rel="stylesheet" href="CodeMirror/lib/codemirror.css"></link>'.
	page add: '<script type="text/javascript" src="CodeMirror/addon/display/autorefresh.js"></script>'.
	page add: '<script type="text/javascript" src="'.
	page add: name.
	page add: '.sources.js"></script><script type="text/javascript" src="'.
	page add: name.
	page add: '.js"></script></body></html>'.
    ^page asString
)
public packageApplicationConfiguration: config <Class> withRuntimeConfiguration: rtConfig usingNamespace: ns ^ <JSDeployment> = (
(*
This method is the gateway for JS deployment. It takes an app class and a runtime class, and returns an object 
describing the deployment (see class JSDeployment).
*)
	| 
    name <String> = config name.
    builder = compilation ProgramBuilder new.
    resourcePaths <List[String]> = List new. 
    page <String> = pageNamed: name.
    script <String> 
    sources <String> 
    |
	builder runtimeSources: (extractSourcesFromConfiguration: rtConfig usingNamespace: ns).
	builder applicationSources: (extractSourcesFromConfiguration: config usingNamespace: ns).
    script:: builder outputProgram.
    sources:: builder outputSources.
	resourcePaths addAll: (extractResourcesFromConfiguration: rtConfig usingNamespace: ns into: builder).
	resourcePaths addAll: (extractResourcesFromConfiguration: config usingNamespace: ns into: builder).
	resourcePaths add: name, '.html'.
	resourcePaths addFirst: name, '.js'. (* Maybe the browser will fetch this first? *)
	resourcePaths addFirst: name, '.sources.js'.
    ^JSDeployment named: name page: page script: script source: sources resources: resourcePaths.
)
) : (
)
class Preloader resources: r <Array[{String. String. String | Class}]> applicationConfiguration: a <Class> = (
(* Given a list of resources and an app, this class creates a wrapper for the app that converts the resources
    into actual objects and feeds them to the app so it can be instantiated.
*)
	|
	protected resources <Array[{String. String. String | Class}]> = r.
	protected applicationConfiguration <Class> = a.
	|
) (
class Manifest forNamespace: ns = (
	|
	private namespace = ns.
	|
) (
protected doesNotUnderstand: message <Message> = (
	^namespace at: message selector ifAbsent: [
		(namespace at: 'Icons' ifAbsent: [super doesNotUnderstand: message]) 
		   at: message selector ifAbsent: [super doesNotUnderstand: message]
		]
)
) : (
)
public main: platform args: args ^ <Object> = (
	| namespace <Map[String, Class | String | Alien]> manifest <Manifest> |
	namespace:: platform collections Map new.
	resources do:
		[:resource <{String. String. String | Class}> | 
		| name <String> type <String> payload <String | Class> |
		 name:: resource at: 1.
		 type:: resource at: 2.
		 payload:: resource at: 3.
		 namespace
			at: name
			put: (unpackResourceType: type payload: payload platform: platform)].
	manifest:: Manifest forNamespace: namespace.
	^(applicationConfiguration packageUsing: manifest) main: platform args: args
)
unpackResourceType: type <String> payload: payload <String | Class> platform: platform ^ <Class | String | Alien> = (
(* Convert a resource of a given type into a suitable runtime object as needed *)
	'ns' = type ifTrue:
		[^payload]. (* It's a class - no need to convert *)
	'txt' = type ifTrue:
		[^payload]. (* It's a string - no need to convert *)
	'png' = type ifTrue: (* It's an image - create a JS image from the raw data and return it *)
		[^(platform js global at: 'Image') new at: 'src' put: payload; yourself].
	'js' = type ifTrue: (* It's js code. Create a script  DOM node based on the code *)
		[ | document script |
		document:: platform js global at: 'document'.
		script:: document createElement: 'script'.
		script at: 'type' put: 'text/javascript'.
		script at: 'src' put: payload.
		(document at: 'head') appendChild: script.
		^script].
	'css' = type ifTrue: (* It's css. Create a suitable DOM node *)
		[ | document script |
		document:: platform js global at: 'document'.
		script:: document createElement: 'link'.
		script at: 'rel' put: 'stylesheet'.
		script at: 'href' put: payload.
		(document at: 'head') appendChild: script.
		^script].

	^Error signal: 'Unknown resource type: ', type
)
) : (
)
class RecordingManifest namespace: ns <Map[{String. String. String | Class}]> accessedResources: list <List[{String. String. String | Class}]> = (
(* This class is used to record the images required by an app. 
    Instantiating the app with an instance of this class as its manifest will record every image accessed via the manifest in the provided list, as a resource descriptor, which includes its name, type (always 'png' for now) and path. The app is of course, provided with the actual value desired. 
 *)
	|
	protected namespace <Map[{String. String. String | Class}]> = ns.
	protected accessedResources <List[{String. String. String | Class}]> = list.
	|
) (
protected doesNotUnderstand: message = (
   | image = icons at: message selector ifAbsent: []. selector <String> = message selector.  |
   image isNil ifFalse: [
     accessedResources add: {selector. 'png'. image at: #currentSrc}.
     ^image
     ].
     accessedResources add: {selector. 'ns'. namespace at: selector}.  
     ^namespace at: selector
)
) : (
)
public class PSoupPackager = (
) (
public packageApplicationConfiguration: appDef <Class> withRuntimeConfiguration: runtimeClass <Class> usingNamespace: ns  ^ <ByteArray> = (
	| 
    app <Object> 
    runtime <Object>
    accessedResources <List> = List new.
    | 
    
    runtime:: runtimeClass packageRuntimeUsing:
		(RecordingManifest namespace: ns accessedResources: List new).

	appDef packageUsing:
		(RecordingManifest namespace: ns accessedResources: accessedResources).

	app:: Preloader
		resources: (Array withAll: accessedResources)
		applicationConfiguration: appDef.

	^Snapshotter new snapshotApp: app withRuntime: runtime keepSource: runtimeClass keepsSources.
)
) : (
public packageApplicationConfiguration: appDef <Class> withRuntimeConfiguration: runtimeClass <Class> usingNamespace: ns  ^ <ByteArray>  = (
  ^self new packageApplicationConfiguration: appDef withRuntimeConfiguration: runtimeClass usingNamespace: ns
)
)
addConfig: config <DeploymentConfiguration> = (
  knownConfigurations at: config name put: config.
)
createJSDefaultConfig = (
  | config = DeploymentConfiguration new base: 'Javascript'; yourself. |
  config name: 'Javascript Hopscotch Web App'.
  addConfig: config.
)
createJSMirrorConfig = (
  | config = DeploymentConfiguration new base: 'Javascript'; yourself. |
  config hasMirrors: true.
  config name: 'Javascript Hopscotch Web App w/Mirrors'.
  addConfig: config.
)
createPSoupDefaultConfig = (
  | config = DeploymentConfiguration new. |
  config name: 'PSoup Hopscotch Web App'.
  addConfig: config.
)
createPSoupMirrorConfig = (
  | config = DeploymentConfiguration new. |
  config hasMirrors: true.
  config name: 'PSoup Hopscotch Web App w/Mirrors'.
  addConfig: config.
)
createDefaultConfigurations = (
  createJSDefaultConfig.
  createJSMirrorConfig.
  createPSoupDefaultConfig.
  createPSoupMirrorConfig.
)
public jsPackagerForPlatform: p <Platform>  ^ <JSPackager> = (
  jsPackagerSlot isNil ifTrue: [jsPackagerSlot:: JSPackager usingPlatform: p].
  ^jsPackagerSlot
)
) : (
)
