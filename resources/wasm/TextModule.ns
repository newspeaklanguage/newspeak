Newspeak3
'TextModel'
class TextModule usingPlatform: p <Platform> = (
(*
Top level module for text, HTML version. Experimental.
Copyright 2016-2017 Google Inc.
*)
) (
public class Text properties: tps = (
(*Abstract supertype of all texts.*)
|
	public textProperties <TextProperties> = tps.
|) (
public isKindOfText ^ <Boolean> = (
	^true
)
public textUnits ^ <List[Fragment]> = (
	^self subclassResponsibility
)
) : (
)
public class TextBlock units: tus <List[Text]> properties: tps <TextProperties> = Text properties: tps (
|
	 public textUnits <List[Text]> = tus.
|) (
public cloneWithDefaultProperties: tps <TextProperties> ^ <Self> = (
	^self class units: immediateTextUnits properties: (tps supplyDefaultsFor: textProperties)
)
public elementaryTextUnits ^ <List[Text]> = (
	^textUnits flatMap: [:u <Text> |
		u isKindOfText ifTrue: [(u cloneWithDefaultProperties: textProperties) elementaryTextUnits] ifFalse: [u]
		].
)
public isKindOfTextBlock ^ <Boolean> = (
	^true
)
public string ^ <String> = (
	^textUnits inject: '' into: [:s1 :s2 | s1, s2 string].
)
) : (
public forString: s <String> ^ <Instance> = (
	^units: {TextString forString: s}
)
public units: tus <List[Text]> ^ <Instance> = (
	^self units: tus properties: TextProperties new
)
)
public class TextProperties = (
(*The properties of text: font, weight, color, size etc.*)
|
	public font
	public weight <Symbol>
	public style <Symbol>
	public pointSize <Integer>
	public color <Color>
	public strikeThrough <Boolean>
	public underline <Boolean>
|) (
public applyTo: element <HTMLElement> = (
	| styleElement = element at: 'style'. |
	styleElement setProperty: 'white-space' to: 'pre-wrap'.
	font isNil ifFalse: [styleElement setProperty: 'font-family' to: font].
	pointSize isNil ifFalse: [styleElement setProperty: 'font-size' to: pointSize printString, 'pt'].
	weight isNil ifFalse: [styleElement setProperty: 'font-weight' to: weight].
	style isNil ifFalse: [styleElement setProperty: 'font-style' to: style].
	color isNil ifFalse: [
		styleElement setProperty: 'color' to: 'rgb(', color red printString, ', ', color green printString, ', ', color blue printString, ')'
		].
	 strikeThrough isNil ifFalse: [
		 strikeThrough ifTrue: [styleElement setProperty: 'text-decoration' to: 'line-through']
		].
	underline isNil ifFalse: [
		underline ifTrue: [styleElement setProperty: 'text-decoration' to: 'underline']
		].
)
public applyToText: t <Text> = (
	| tProperties <TextProperties> = t textProperties. |
	tProperties font isNil ifTrue: [tProperties font: font].
	tProperties weight isNil ifTrue: [tProperties weight: weight].
	tProperties pointSize isNil ifTrue: [tProperties pointSize: pointSize].
	tProperties color isNil ifTrue: [tProperties color: color].
	tProperties strikeThrough isNil ifTrue: [tProperties strikeThrough: strikeThrough].
	tProperties underline isNil ifTrue: [tProperties underline: underline].
)
public clone ^ <Self> = (
	^self class new
		font: font;
	 	weight: weight;
		pointSize: pointSize;
		color: color;
		strikeThrough: strikeThrough;
		underline: underline;
		yourself
)
public supplyDefaultsFor: tps <TextProperties> = (
	| tProperties <TextProperties> = tps clone. |

	tProperties font isNil ifTrue: [tProperties font: font].
	tProperties weight isNil ifTrue: [tProperties weight: weight].
	tProperties pointSize isNil ifTrue: [tProperties pointSize: pointSize].
	tProperties color isNil ifTrue: [tProperties color: color].
	tProperties strikeThrough isNil ifTrue: [tProperties strikeThrough: strikeThrough].
	tProperties underline isNil ifTrue: [tProperties underline: underline].
)
) : (
)
public class TextString forString: s <String> properties: tps = Text properties: tps (
|
	public string <String> = s.
|) (
public cloneWithDefaultProperties: tps <TextProperties> ^ <Self> = (
	^self class forString: string properties: (tps supplyDefaultsFor: textProperties)
)
public elementaryTextUnits ^ <List[Fragment]> = (
	^{self}
)
public isKindOfTextString ^ <Boolean> = (
	^true
)
) : (
public forString: s <String> ^ <Instance> = (
	^forString: s properties: TextProperties new
)
)
) : (
)
