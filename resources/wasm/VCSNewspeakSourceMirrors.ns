Newspeak3
'MemoryHole'
class VCSNewspeakSourceMirrors usingPlatform: p vcs: vcs ide: ide = (||
	(* This import is cheating. The mature mirrors API won't make it available. *)
	private TypedNS3Grammar = p mirrors grammar TypedNS3Grammar.

	private mirrors = p mirrors.
	private ClassMirror = p mirrors ClassMirror.
	private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
	private List = p squeak OrderedCollection.
	private Root = ide namespacing Root.

	private imageMirrorCache = vcs imageMirrorCache.
	private SourceMirror = vcs sourceMirrors SourceMirror.
	private StringMirror = vcs sourceMirrors StringMirror.

	private compilationUnitCache = MirrorCache onSelector: #compilationUnit.
	public methodDeclCache = MirrorCache onSelector: #methodDecl.
||
) (
class AnnotatedSourceReference start: s end: e input: i children: c = SourceReference start: s end: e input: i (
(*A SourceReference with some associated data, that might be raw parse trees or might be something else, typicaly derived from the trees. There is nothing to ensure that the data and locations are connected in any way.  See the superclass for more details.

Adapted from the old ParentYield class, which is why the Cadence copyright below applies.

Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)
|
public children = c.
|) (
) : (
)
public class ClassSourceMirror = SourceMirror (|
	public category
	public name <Symbol>
	public header <String>
	public classes
	public instanceMethods
	public classMethods
|) (
public children = (
	^Array streamContents: [:stream |
		{#name. #category. #header} do: [:each |
			(self perform: each) ifNotNil: [:it | | stringMirror |
				stringMirror:: StringMirror new
					string: it;
					yourself.
				stream nextPut: each -> stringMirror]].
		{#classes. #instanceMethods. #classMethods} do: [:each |
			(self perform: each) ifNotNil: [:it |
				stream nextPutAll: (it collect: [:el | each -> el])]]]
)
public filename = (
	^name, '.ns'
)
public installAsToplevelClass = (
	installMirrors: {self}
)
public isKindOfClassDeclarationMirror = (
	^true
)
public isToplevel = (
	flag: #BOGUS. (* Class mirror should know whether it's a top-level class and decide to emit a file header based on that. *)
	^(category = nil or: [category isEmpty]) not
)
public languageIdentifier ^ <String> = (
	^'Newspeak3'
)
sortBlock ^ <[:Object :Object | Boolean]> = (
	^[:a :b | a name <= b name]
)
streamCategory: cat to: stream = (
	| methods |
	methods:: List new.
	methods addAll: cat.
	methods sort: [:a :b | a name < b name].
	methods do:
		[:method |
		method streamTo: stream.
		stream cr].
)
streamClassBodyTo: stream = (
	stream nextPutAll: ' ('; cr.
	(classes sort: sortBlock) do:
		[:each | each streamTo: stream].
	streamCategory: instanceMethods to: stream.
	stream	nextPutAll: ') : ('; cr.
	streamCategory: classMethods to: stream.
	stream nextPut: ")"; cr.
)
streamClassHeaderTo: stream = (
	stream nextPutAll: header
)
streamFileHeaderTo: stream = (
	isToplevel ifFalse: [
		^self].
	stream
		nextPutAll: languageIdentifier; cr;
		nextPut: "'";
		nextPutAll: category;
		nextPut: "'";
		cr.
)
public streamTo: stream = (
	streamFileHeaderTo: stream.
	streamClassHeaderTo: stream.
	streamClassBodyTo: stream
)
) : (
)
class MethodSourceMirror = SourceMirror (|
	public methodSource
	public category
	public accessModifier
	public selector
|) (
public children = (
	^{}
)
public contentsEquals: other = (
	^self methodSource = other methodSource and: [
		self category = other category and: [
			self accessModifier = other accessModifier]]
)
public copy = (
	(* Should Newspeak have a default shallow copy built in? *)
	^MethodSourceMirror new
		methodSource: methodSource;
		category: category;
		accessModifier: accessModifier;
		selector: selector;
		yourself
)
public correspondsHash = (
	^selector hash
)
public correspondsTo: other = (
	^self selector = other selector
)
public isKindOfMethodMirror = (
	^true
)
public isMethodMirror = (
	^true
)
public name = (
	^selector
)
public streamTo: stream = (
	stream nextPutAll: methodSource
)
) : (
)
class MirrorCache onSelector: selector = (
(* Keeps a map of string -> mirror *)
|
(* Keep the actual dictionaries in VCS(ImageMirror)Caching, so it can be reused over multiple instances *)
cachedMirrors = imageMirrorCache stringToMirrorCacheForProduction: selector.
parser = SourceMirrorParser new.
production = parser perform: selector.
|) (
public clear = (
	cachedMirrors keysAndValuesRemove: [:k :v | true].
)
public mirrorForStream: stream = (
	^mirrorForStream: stream ifError: [:pos :msg | Error signal]
)
public mirrorForStream: stream ifError: errorBlock = (
	| string |
	string:: stream contents.
	^cachedMirrors at: string ifAbsentPut:
		[parser input: string.
		 production parseString: string ifError: errorBlock]
)
) : (
)
class SlotSourceMirror = SourceMirror (|
	public name
	public accessModifier
	public type
	public initializer
	public immutable
|) (
public children = (
	^{}
)
public streamTo: stream = (
	accessModifier ifNotNil: [:it |
		stream
			nextPutAll: it;
			nextPutAll: ' ' ].
	stream nextPutAll: name.
	type ifNotNil: [:it |
		stream
			nextPut: "<";
			nextPutAll: it;
			nextPut: ">"].
	initializer ifNotNil: [:it |
		immutable
			ifTrue: [stream nextPutAll: ' = ']
			ifFalse: [stream nextPutAll: ' ::= '].
		stream
			nextPutAll: it;
			nextPutAll: '.'].
)
) : (
)
class SourceMirrorParser = TypedNS3Grammar (|
public input
|) (
accessModifier = (
	^super accessModifier wrapper: [:am :ws | am]
)
binaryMsgPattern = (
	^super binaryMsgPattern wrapper: [:sel <Token> :p <Token> |
		SourceReference wrap: {sel. p} input: input children: sel value]
)
category = (
	(* category:: string, [methodDecl star] *)

	^super category
		wrapper:
			[:catname :methods | | cat |
			cat:: nil = catname ifTrue: [#'as yet unclassified'] ifFalse: [catname value].
			(* The MemoizingParser returns the identical mirror for all methods with the same source. If a method with the same source exists in multiple categories (in different classes), we need multiple mirrors.

			We could create different mirrors right from the start by including the current category as a key to the memoizing dictionary. But accessing the category before the methods are being parsed would require the Newspeak grammar to be extended so that we have a 'categoryName' rule that we can override. We would want to do that in _the_ Newspeak grammar. We don't want to respecify it here.

			For now we create copies of method mirrors if they are set to wrong categories.	*)
			methods collect: [:each |
				(nil = each category or: [each category = cat])
					ifTrue: [
						each category: cat.
						each]
					ifFalse: [
						each copy
							category: cat;
							yourself]]]
)
classBody = (
	^super classBody
		wrapper: [:instInit <InitializerAST> :instanceSide <SideAST> :classSide <SideAST> |
			| rawBody = {instInit. instanceSide. classSide}. |
			SourceReference wrap: rawBody input: input children: {#classBody. rawBody}
			]
)
classComment = (
	^super classComment wrapper: [:ws :com |
		String streamContents: [:stream |
			nil = ws ifFalse: [
				stream nextPutAll: (input contents copyFrom: ws start to: ws end)].
			stream
				nextPutAll: '(*';
				nextPutAll: com value;
				nextPutAll: '*)']]
)
classDecl = ( (* WIP *)
	(*  classDecl = ((tokenFromSymbol: #class), identifier, messagePattern, equalSign,
	              inheritanceListAndOrBody) |
	              ((tokenFromSymbol: #class), identifier, empty, equalSign,
	              inheritanceListAndOrBody). *)
	#BOGUS yourself.
	^super classDecl wrapper:
		[:am <Token> :classKwd <Token> :ident <Token> :msgOrEmpty <AnnotatedSourceReference> :eq <Token> :iListAndOrBody |
		|
		bodyOrDot
		body <{Token. String. AnnotatedSourceReference.  List. Token. AnnotatedSourceReference. AnnotatedSourceReference}>
		instanceSide <AnnotatedSourceReference> classSide <AnnotatedSourceReference> i
		headerStart headerEnd header
		klassName <Symbol>
		classes
		instanceMethods
		classMethods
		|

		klassName:: ident value asSymbol.

		iListAndOrBody isCollection
				ifFalse: [
					bodyOrDot:: iListAndOrBody children at: 2.
				]
				ifTrue: [
					| sccParts <List> = List new. |
					1 to: iListAndOrBody size -1 do: [:i | sccParts add: (iListAndOrBody at: i)].
					bodyOrDot:: iListAndOrBody last children at: 2.
					].
		body:: bodyOrDot. (* should test if bodyOrDot is collection *)
		instanceSide:: body at: 2. (* 6 *)
		classSide:: body at: 3. (* 7 *)

		headerStart:: nil = am ifTrue: [classKwd start] ifFalse: [am start].
		headerEnd:: (((body at: 1) children at: 2) at: 5) end.
		header:: SourceReference start: headerStart end: headerEnd input: input.

		classes:: instanceSide children first.
		instanceMethods:: instanceSide children at: 2.
		classMethods:: classSide ifNotNil: [:it | it children].
		ClassSourceMirror new
			name: klassName;
			header: header contents;
			classes: classes;
			instanceMethods: instanceMethods;
			classMethods: classMethods]
)
classDeclaration = (
	(* classDeclaration:: (tokenFromSymbol: #class), [classHeader], [sideDecl], [classSideDecl opt] *)

	^super classDeclaration wrapper:
		[:am :classKwd :hdr :instanceSide :classSide |
		| klassName headerStart headerEnd header classes instanceMethods classMethods |
		klassName:: hdr first value asSymbol.

		headerStart:: nil = am ifTrue: [classKwd start] ifFalse: [am start].
		headerEnd:: hdr end.
		header:: SourceReference start: headerStart end: headerEnd input: input.

		classes:: instanceSide children first.
		instanceMethods:: instanceSide children at: 2.
		classMethods:: classSide ifNotNil: [:it | it children].

		ClassSourceMirror new
			name: klassName;
			header: header contents;
			classes: classes;
			instanceMethods: instanceMethods;
			classMethods: classMethods]
)
classSideDecl = (
	(* classSideDecl:: colon, [lparen], [methodDecl star], [rparen] *)
	^super classSideDecl wrapper:
		[:cln <Token> :lp <Token> :methods :rp <Token> |
		 SourceReference wrap: {lp. (* categories. *) rp} input: input children: methods asArray ]
)
public compilationUnit = (
	(* compilationUnit:: languageId, [namespaceDecl | [toplevelClass] | [namespaceExpr] ], [eoi] *)
	^super compilationUnit
		wrapper:
			[:langId :toplevel :eoi |
				toplevel]
)
instanceInitializer = (
	^super instanceInitializer
		wrapper: [:lp <Token> :cc :slots :inits :rp <Token> |
			| rawTree = {lp. cc. slots. inits. rp}. |
			SourceReference wrap: rawTree input: input children: {#instanceInitializer. rawTree}
			]
)
keywordMsgPattern = (
	^super keywordMsgPattern wrap: [:kws | | selector |
		selector:: kws inject: '' into: [:acc :each | acc, each first value].
		SourceReference wrap: kws input: input children: selector]
)
public methodDecl = (
	(* methodDecl:: accessModifier opt, [messagePattern], [equalSign], [lparen], [codeBody], [rparen] *)

	^super methodDecl wrapper:
		[:accessMod :msgPat :eq :lp :cb :rp |
		| yield accessSym msgPatYield |
		msgPatYield:: SourceReference wrap: msgPat input: input.
		accessSym:: accessMod isNil ifTrue: [#protected] ifFalse: [accessMod value].
		MethodSourceMirror new
			methodSource: (SourceReference wrap: {accessMod. msgPat. eq. lp. cb. rp} input: input) contents;
			selector: msgPat first children asSymbol;
			accessModifier: accessSym;
			yourself]
)
seqSlotDecls = (
	^super seqSlotDecls wrap:
		[:list |
			SourceReference wrap: list input: input children: list]
)
sideDecl = (
	(* sideDecl:: lparen, [nestedClassDecl star], [methodDecl star], [rparen] *)
	^super sideDecl wrapper:
		[:lp <Token> :classes :transientSlots :methods :rp <Token> |
		 SourceReference wrap: {lp. classes. (* categories. *) rp} input: input children: {classes asArray. methods asArray} ]
)
simSlotDecls = (
	^super simSlotDecls wrap:
		[:list |
			SourceReference wrap: list input: input children: list]
)
slotDecls = (
	(* slotDecls:: vbar, [slotDef star], [vbar] *)

	^super slotDecls wrap:
		[:list |
			SourceReference wrap: list input: input children: list]
)
slotDef = (
	(*
	slotDecls:: vbar, [slotDef star], [vbar].
	slotDef:: accessModifier opt, [slotDecl], [ (((tokenFromSymbol: #=) | [tokenFromSymbol: #'::=']), [expression], [dot]) opt].
	slotDecl:: identifier , [type opt].
	*)

	^super slotDef wrapper:
		[:accessMod :nameAndType :init |
		| accessSym immutable expr typeString initializer |
		accessSym:: accessMod isNil
			ifTrue: [ nil ]
			ifFalse: [ accessMod value ].
		init isNil
			ifTrue: [ immutable:: false. expr:: nil ]
			ifFalse: [immutable:: (init at: 1) value = #=. expr:: (init at: 2) contents ].
		initializer:: expr ifNotNil: [:it | (SourceReference wrap: expr input: input) contents].
		typeString:: (nameAndType at: 2) isNil
			ifTrue: [ nil ]
			ifFalse: [ | yield |
				yield:: SourceReference wrap: ((nameAndType at: 2) contents at: 2) contents input: input.
				yield contents].
		SlotSourceMirror new
			name: nameAndType first value;
			accessModifier: accessSym;
			initializer: initializer;
			type: typeString;
			immutable: immutable;
			yourself]
)
toplevelClass = (
	(* toplevelClass:: classCategory, [classDeclaration] *)

	^super toplevelClass
		wrapper:
			[:cat :klass |
				klass category: cat value.
				klass]
)
unaryMsgPattern = (
	^super unaryMsgPattern wrap: [:sel <Token> |
		SourceReference wrap: sel input: input children: sel value]
)
) : (
)
class SourceReference start: s end: e  input: i = (
(*A reference to a range in a source input stream. Given a raw parse tree and the inout stream from which it was derived, this class has factory methods that will capture the source coordinates of the tree from its extreme left and right leaves. One variant, #wrap:input:children will also hold annotations (in which case, the subclass, AnnotatedSourceReference, is used).

This class is used in situations where a proper AST is not created but one wants to capture some structure.

Adapted from the old Yield class, which is why the Cadence copyright applies.
Copyright 2008 Cadence Design Systems, Inc.
   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0*)
|
	public start <Integer> = s.
	public end <Integer> = e.
	input <PositionableStream> = i.
|) (
public contents ^ <String> = (
	input isStream ifTrue:
		[(* This convolution deals with UTF-8.  The problem is that stream
		   positions are byte positions, /not/ character positions. *)
		| cs c p |
		cs:: WriteStream on: (input originalContents species new: end - start + 1).
		p:: input position.
		[input position: start - 1.
		 [input position < end] whileTrue:
			[cs nextPut: input next]]
			ensure: [input position: p].
		^cs contents].
	^input copyFrom: start to: end
)
public printOn: aStream <Stream> = (
	super printOn: aStream.
	aStream nextPutAll: ('({1})' format: { self contents })
)
) : (
public firstNode: node = (
	node isCollection
		ifTrue: [
			node do: [:each | (firstNode: each)
								ifNotNil: [:it | ^it]].
			^nil]
		ifFalse: [^ node]
)
public lastNode: node = (
	node isCollection
		ifTrue: [
			node reverse do: [:each | (lastNode: each)
								ifNotNil: [:it | ^it]].
			^nil]
		ifFalse: [^ node]
)
public wrap: node input: input = (
	| startNode endNode |
	startNode:: self firstNode: node.
	startNode isNil ifTrue: [^ nil].
	endNode:: self lastNode: node.
	^self
		start: startNode start
		end: endNode end
		input: input
)
public wrap: node input: input children: children = (
	| startNode endNode |
	startNode:: self firstNode: node.
	startNode isNil ifTrue: [^ nil].
	endNode:: self lastNode: node.
	^AnnotatedSourceReference
		start: startNode start
		end: endNode end
		input: input
		children: children
)
)
public clearCaches = (
	compilationUnitCache clear.
	methodDeclCache clear.
)
public installMirrors: newMirrors <Collection[ClassSourceMirrors]> = (
	(* Batch Atomic Installation *)

	| builders |
	builders:: newMirrors collect: [:ea |
		| builder = ClassDeclarationBuilder fromUnitSource: ea source. |
		#BOGUS yourself. (* The mirror API should provide a non-cheat way to give both the source for a whole module and an existing module to mutate. *)
		Root
			at: builder name
			ifPresent: [:it | builder prvtExistingMixin: it mixin].
		builder].

	(mirrors installAtomically: builders) do: [:mirror |
		(Root includesKey: mirror name) ifFalse: [
			| klass = mirror reflectee apply: Object withName: mirror name. |
			Root at: klass name put: klass.
		].
	].
)
public mirrorForClass: klass <Class> ^<ClassSourceMirror> = (
	^mirrorForClassDeclaration: (ClassMirror reflecting: klass) mixin declaration
)
mirrorForClassDeclaration: decl <ClassDeclarationMirror> ^<ClassSourceMirror> = (
	| result = ClassSourceMirror new. |
	result category: decl header category.
	result name: decl name.
	result header: decl header source.
	result classes: (decl instanceSide nestedClasses collect: [:nested | mirrorForClassDeclaration: nested]).
	result instanceMethods: (decl instanceSide methods collect: [:method | mirrorForMethod: method]).
	result classMethods: (decl classSide methods collect: [:method | mirrorForMethod: method]).
	^result
)
mirrorForMethod: method <MethodMirror> ^<MethodSourceMirror> = (
	| result = MethodSourceMirror new. |
	result methodSource: method source.
	result accessModifier: method accessModifier.
	result selector: method name.
	^result
)
public mirrorForStream: stream <ReadStream> ^<ClassSourceMirror> = (
	^compilationUnitCache mirrorForStream: stream
)
) : (
)
