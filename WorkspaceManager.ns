Newspeak3
'Root'
class WorkspaceManager usingPlatform: p <Platform> ide: webIde <HopscotchIDE> = (
(*
Workspaces allow convenient live code evaluation in the Newspeak IDE. They provide access to an IDE namespace,
unconstrained by the scope of a single module.  This module implements workspaces in the IDE. 

Copyright Google Inc.  2017.
Copyright Gilad Bracha 2018-2021.
*)
|
	(* imports *)
	private Map = p collections Map.
	private Presenter = p hopscotch Presenter.
	private Subject = p hopscotch Subject.
    private ObjectSubject = webIde browsing ObjectSubject.
	private ProgrammingPresenter = webIde browsing ProgrammingPresenter.  
    private EvaluationViewState = webIde browsing EvaluationViewState.
	private List = p collections List.
	private ObjectMirror = p mirrors ObjectMirror.
    
	(* module state *)
	private workspaces <List[ObjectSubject]> = List new.
	private workspaceCounter <Integer> ::= 0.
	private retainedPlatform = p.
	private ide = webIde.
	private Root = ide namespacing Root.
|) (
class AllWorkspacesPresenter onSubject: s = ProgrammingPresenter onSubject: s (
(* This is the top-level presenter displayed when following the Workspaces link from the home page. It displays a list of WorkspacePresenters on all existing workspaces. *)
   | contentListSlot <ToggleList> |
) (
public contentPresenters ^ <Collection[ToggleComposer]> = (
	^subject allWorkspaces collect: [:ws | expandableLineForWorkspace: ws]
)
public isKindOfAllWorkspacesPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfAllWorkspacesPresenter
)
respondToAddWorkspace = (
	subject addWorkspace.
)
respondToDeleteWorkspace: ws <ObjectSubject> = (
	subject deleteWorkspace: ws.
)
workspaceListMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Presenter' . [respondToInspectPresenter]}
		}
)
workspaceMenuFor: ws <ObjectSubject> = (
	^menuWithLabelsAndActions: {
		{'Delete workspace ', (nameOf: ws). [updateGUI: [respondToDeleteWorkspace: ws]]}
		}
)
expandableLineForWorkspace: ws <EvaluationViewState> ^ <ToggleComposer> = (
	| toggle <ToggleComposer> |
	toggle::
		collapsed: [workspaceRowFor: ws]
		expanded: [ws presenter]
		initiallyExpanded: workspaces size = 1
		tag: (nameOf: ws).
	^toggle
)
workspaceRowFor: ws <EvaluationViewState> ^ <Fragment> = (
	^row: {
		link: (nameOf: ws)
		action: [enterSubject: ws].
		filler.
		dropDownMenu: [workspaceMenuFor: ws].
	}
)
nameOf: ws <EvaluationViewState> ^ <String>  = (
  ^(ws objectMirror evaluate: 'workspaceName') result reflectee
)
addWorkspaceButton = (
  ^addButtonWithAction: [updateGUI: [respondToAddWorkspace]]
)
public expandAll = (
  contentList childrenDo: [:each <ToggleComposer> | each expand]
)
public collapseAll = (
  contentList childrenDo: [:each <ToggleComposer> | each collapse]
)
definition = (
	^column: {
        helpSection.
		minorHeadingBlock: (
			row: {
				(label: 'Workspaces')
                    bold.
				addButtonWithAction: [updateGUI: [respondToAddWorkspace]].
				filler.
				expandButtonWithAction: [expandAll].
				collapseButtonWithAction: [collapseAll].
                refreshButton.
                helpButton.
				dropDownMenu: [workspaceListMenu].
				}
			).
		mediumBlank.
		contentList.
		mediumBlank.
	}
)
helpText  = (
  | mapping = Map new. |
  mapping 
       at: #hopscotchIDE put: (link: #IDE action: [openSubject: (ObjectSubject onModel: (ObjectMirror reflecting:  ide))]);
     at: #newspeakPlatform put: (link: 'Newspeak platform' action: [openSubject: (ObjectSubject onModel: (ObjectMirror reflecting:  retainedPlatform))]);
     at: #addWorkspaceButton put: addWorkspaceButton;
     at: #hopscotchExpandAllButton put: (expandButtonWithAction: [expandAll]);
     at: #hopscotchCollapseAllButton put: (collapseButtonWithAction: [collapseAll]);  
     at: #hopscotchHelpButton put: helpButton;
     at: #hopscotchRefreshButton put: refreshButton;
     at: #workspacesManagerMenu put: (dropDownMenu: [workspaceListMenu]).

  ^ampleforth: 'This is a workspaces list presenter. It lists all workspaces in the IDE.  At the top you see
  <br>
  <ul>
   <li><div class = "addWorkspaceButton"></div>Adds a new workspace to the list.</li>
   <li> <div class="hopscotchExpandAllButton"> </div>Expands all elements of the list.</li>
  <li> <div class="hopscotchCollapseAllButton"> </div>Collapses all elements of the list.</li>
  <li> <div class="hopscotchRefreshButton"> </div> Refreshes the list (just in case of UI bugs).</li>
  <li> <div class="hopscotchHelpButton"> </div> Shows this help message.</li>
  <li> <div class="workspacesManagerMenu"> </div> Opens a menu of additional operations such as inspecting this presenter.</li>  
  </ul>
  If there are no workspaces yet, one will be created and opened in place. If there is exactly one workspace it will be opened in the same way. Otherwise, you will be presented with a list of all existing workspaces to choose from. Workspaces are identified by cheerful names, such as Workspace_1 etc.  Each workspace can be opened in place via the toggle on its left, or navigated to by clicking on its link.
  <br><br>
  Each workspace has its own unique class. This allows you to define slots (sometimes known as workspace variables in other systems) for the workspace. Likewise, you can define workspace specific methods or even nested classes. All of these are treated exactly like members of any other class.
  <br><br>
 All workspace classes are subclasses of class <i>Workspace</i>, which provides common workspace behavior.
A workspace allows you to evaluate code and provides you with access to the IDEâ€™s top level namespace. The IDE namespace gives you access to all top level Newspeak classes loaded into the IDE. It also supports access to the newspeak platform object via the name <i>platform</i>. In addition, you can use the name <i>ide</i> to gain access to the IDE itself.
<br><br>
Finally, workspaces provide direct access to all the modules the Newspeak platform provides; e.g., the collections module is available via the name <i>collections</i>.
  ' mapping: mapping  
)
contentList = (
   contentListSlot isNil ifTrue: [
	contentListSlot:: taggedColumn: contentPresenters
	].
  ^contentListSlot.
)
) : (
)
public class AllWorkspacesSubject onModel: dontCare (* :exemplar: AllWorkspacesSubject onModel: nil *) = Subject onModel: dontCare (
(* Subject for the list of all workspaces. It is responsible for creating and deleting workspace classes and instances. *)
  | 
  workspaceManager = ObjectMirror reflecting: outer WorkspaceManager yourself.
  outerMixinMirror = workspaceManager getClass mixin.
  workspaceHolderMixinMirror = (ObjectMirror reflecting: ide workspaceHolder) getClass mixin.
  |
) (
public = anotherSubject ^<Boolean> = (
	(* All AllWorkspacesSubject instances are considered the same so that clicking the Workspaces link on the home page always takes us to the same page instead of multiplying them. *)
	^anotherSubject isKindOfAllWorkspacesSubject
)
public allWorkspaces ^ <Collection[Workspace]> = (
	(* Ensure there is always a workspace to work with. *)
	workspaces isEmpty ifTrue: [addWorkspace].
	^workspaces
)
public createPresenter ^ <AllWorkspacesPresenter> = (
	^AllWorkspacesPresenter onSubject: self
)
public deleteWorkspace: ws <Workspace> = (
	workspaces remove: ws.
)
public hash ^<Integer> = (
	^self class hash
)
public isKindOfAllWorkspacesSubject ^ <Boolean> = (
	^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfAllWorkspacesSubject
)
public title ^<String> = (
	^'Workspaces'
)
selfBuilder ^  <ClassDeclarationBuilder> = (
  ^outerMixinMirror asBuilder
)
public addClassFromDefinition: source <String> ifSuccess: successBlock <[:ClassDeclarationMirror]> ifFailure: failureBlock <[:String]> = (
	[ | builder <MixinBuilder> newBuilder <ClassDeclarationBuilder> newMirror <ClassDeclarationMirror> |
	builder:: selfBuilder.
	newBuilder:: builder nestedClasses addFromSource: source.
	ide installFromBuilders: {builder declaration}.
	newMirror:: outerMixinMirror nestedClasses findMirrorNamed: newBuilder name.
	successBlock value: newMirror]
		on: Error
		do: [:ex <Exception> | failureBlock value: ex printString].
)
sourceForWorkspaceClass: n <String> = (
^
'public class ', n, ' = Workspace (
) ()'
)
public addWorkspace3 = (
	| 
    wsName = 'Workspace', currentWorkspaceNumberString.
    ws <Workspace> 
    |
    
    addClassFromDefinition: (sourceForWorkspaceClass: wsName) 
      ifSuccess: [:cdm <ClassDeclarationMirror> |
       ws:: (workspaceManager evaluate: wsName, ' new') result reflectee.
        workspaces add: (ObjectSubject onEvaluator: (
          EvaluationViewState onModel: (ObjectMirror reflecting: ws)
          )
        ).
        (* ws workspaceText: defaultWorkspaceText.*)
      ] ifFailure: [:msg | msg out]	
)
public addWorkspace2 = (
	| ws <Workspace> |
	ws:: Workspace named: currentWorkspaceNumberString.
	(* ws workspaceText: defaultWorkspaceText.*)
	workspaces add: ( ObjectSubject onEvaluator: (EvaluationViewState onModel: (ObjectMirror reflecting: ws))).
)
workspaceBuilder = (
  ^workspaceHolderMixinMirror asBuilder
)
public addWorkspace = (
	| 
    wsName = 'Workspace', currentWorkspaceNumberString.
    |
    addWorkspace:  wsName
)
public getWorkspace: wsName <String> ^ <ObjectSubject> = (
  ^workspaces detect: [:ws | ws objectMirror getClass mixin name = wsName] ifNone: [addWorkspaceNamed: wsName. workspaces last].
)
addWorkspace: wsName <String> = (
	| 
    ws <Workspace> 
    |
    
    addClassFromDefinition: (sourceForWorkspaceClass: wsName) 
      ifSuccess: [:cdm <ClassDeclarationMirror> |
       ws:: (workspaceManager evaluate: wsName, ' new') result reflectee.
        workspaces add: (ObjectSubject onEvaluator: (
          EvaluationViewState onModel: (ObjectMirror reflecting: ws)
          )
        ).
        (* ws workspaceText: defaultWorkspaceText.*)
      ] ifFailure: [:msg | msg out]	
)
addWorkspaceNamed: wsName <Symbol> = (
  (* update number of workspaces *)
  currentWorkspaceNumberString.
  addWorkspace: wsName.
)
) : (
public new = (
(* An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. *)
	^onModel: nil
)
)
public class Workspace = (
(* The superclass of workspaces. For the time being, we do not dynamically create distinct classes per workspace. Instead,
we pass a name for each instance to the factory. *)
|
public workspaceText
|) (
public workspaceName ^ <String> = (
  ^class name
)
public actors = (^retainedPlatform actors)
public aliens = (^retainedPlatform aliens)
public class = (
	^super class
)
public collections = (^retainedPlatform collections)
protected doesNotUnderstand: message = (
	^Root
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
public files = (^retainedPlatform files)
public findInSource: stringOrRegex = (
	stringOrRegex isKindOfString ifFalse: [unimplemented].
	^methods select: [:method | method getSource includesSubString: stringOrRegex].
)
public graphics = (^retainedPlatform graphics)
public hopscotch = (^retainedPlatform hopscotch)
public ide ^ <HopscotchWebIDE> = (
	^outer WorkspaceManager ide
)
public kernel = (^retainedPlatform kernel)
public mirrors = (^retainedPlatform mirrors)
platform ^ <Platform> = (
	^retainedPlatform
)
public printString ^ <String> = (
  ^workspaceName
)
public streams = (^retainedPlatform streams)
public text = (
	^retainedPlatform text
)
) : (
)
currentWorkspaceNumberString ^ <String> = (
	workspaceCounter:: workspaceCounter + 1.
	^workspaceCounter printString
)
defaultWorkspaceText ^ <String> = (
^'(* Workspaces provide access to the system scope,  allowing you to bypass Newspeak''s modularity at development time. You can evaluate the current selection (or the current line if the selection is empty) by pressing [Evaluate]. *)

platform.
ide.

copy: ''Hello, Pasty New World!'' (* Place the argument on the system clipboard. *)'
)
) : (
)
