Newspeak3
'Root'
class HopscotchForCroquet usingPlatform: p <Platform> hopscotch: H <HopscotchForHTML5 class> = (
	|
(* imports *)
    private HopscotchForHTML5 = H.
    Promise = p actors Promise.
    Resolver = p actors Resolver.
	|
) (
public class Hopscotch usingPlatform: p <Platform> images: images ducts: ds =
  HopscotchForHTML5 usingPlatform: p images: images ducts: ds

(
(*
This class overrides the normal Hopscotch UI module to allow the UI to synchronize using croquet.io.
For every interactive fragment class, we maintain:

1) A subclass, defined here, that manages the interaction with Croquet.
2) A counter that is used to generate unique ids for each fragment.
3) A corresponding Javascript Croquet view type.

Each fragment is then connected to an instance of the corresponding Croquet view. It notifies this view when an interaction occurs. The view notifies the fragment when it can act - that is, when the reflector has signaled the Croquet model (which notifies the view). The fragment then performs the normal behavior defined in its superclass.

*)
  |
  buttonCount <Integer> ::= 0.
  imageButtonCount <Integer> ::= 0.  
  radioButtonCount <Integer> ::= 0. 
  checkboxCount <Integer> ::= 0.
  hyperlinkCount <Integer> ::= 0.
  hyperlinkImageCount <Integer> ::= 0.
  codeMirrorCount <Integer> ::= 0.
  toggleComposerCount <Integer> ::= 0.
  textEditorCount <Integer> ::= 0.
  js = p js.
  (* Croquet state - must be accessed lazily *)
  private NewspeakCroquetFragmentView_slot <Alien[NewspeakCroquetFragmentView class]>   
  rootView_slot <Alien[NewspeakCroquetView]>
|
) (
class ButtonFragment label: l action: a = super ButtonFragment label: l action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetButtonView]]>
    buttonId <Integer> ::= newButtonId.
    scope_slot <String>
    |
    croquetView
) (
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
public scope ^ <String> = (
  (* Lazily return a unique identifier for this fragment *)
  scope_slot isNil ifTrue: [scope_slot: 'nsbutton_', buttonId printString].
  ^scope_slot
)
setupCroquetView = (
        (* ensure a corresponding Croquet view is set *)
        croquetView_slot:: getCroquetView.
        (* When the Croquet view is notified of a click, it will call back to the Newspeak button to perform its normal action *)
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_button' eventSpec: #createButton data: scope.
  ^futureView promise
)
) : (
)
class ImageButtonFragment = super ImageButtonFragment (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetImageButtonView]]>
    imageButtonId <Integer> ::= newImageButtonId.
    scope_slot <String>
    |
    croquetView
) (
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nsImagebutton_', imageButtonId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ImageButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetImageButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createImageButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_image_button' eventSpec: #createImageButton data: scope.
  ^futureView promise
)
) : (
)
class CheckboxFragment text: t <Holder> value: v <Boolean | Holder> action: a <[:Boolean]>  = super CheckboxFragment text: t value: v action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetCheckBoxView]]>
    checkboxId <Integer> ::= newCheckboxId.
    scope_slot <String>
    |
    croquetView
) (
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nscheckbox_', checkboxId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <CheckboxFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[:b <Boolean> | croquetView <-: publish: scope event: (b ifTrue: [#checked] ifFalse: [#unchecked])]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_checked handler: [:e | super action value: true. nil].
        croquetView <-: subscribe: scope eventSpec: #model_unchecked handler: [:e | super action value: false. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetCheckboxView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createCheckbox handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_checkbox' eventSpec: #createCheckbox data: scope.
  ^futureView promise
)
) : (
)
class RadioButtonFragment text: t <String> 
	value: v <Boolean | Holder> 
	group: g <String> 
	action: a <[:Boolean]> = super RadioButtonFragment text: t value: v group: g action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetRadioButtonView]]>
    radioButtonId <Integer> ::= newRadioButtonId.
    scope_slot <String>
    |
    croquetView
) (
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nsradiobutton_', radioButtonId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <RadioButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[:b <Boolean> | croquetView <-: publish: scope event: (b ifTrue: [#pressed] ifFalse: [#released])]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_pressed handler: [:e | super action value: true. nil].
  croquetView <-: subscribe: scope eventSpec: #model_released handler: [:e | super action value: false. nil]        
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetRadioButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createRadioButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_radio_button' eventSpec: #createRadioButton data: scope.
  ^futureView promise
)
) : (
)
class HyperlinkFragment label: l action: a = super HyperlinkFragment label: l action: a (
   |
    public croquetView_slot <Promise[Alien[NewspeakCroquetHyperlinkView]]>
    hyperlinkId <Integer> ::= newHyperlinkId.
    scope_slot <String>
    |
    croquetView
) (
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <HyperlinkFragment>  ^ <Alien[LinkElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nshyperlink_', hyperlinkId printString].
  ^scope_slot
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetHyperlinkView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createHyperlink handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_hyperlink' eventSpec: #createHyperlink data: scope.
  ^futureView promise
)
) : (
)
public class CodeMirrorFragment onText: t <String> = super CodeMirrorFragment onText: t (
    |
    public croquetView_slot <Promise[Alien[NewspeakCodeMirrorView]]>
    codeMirrorId <Integer> ::= newCodeMirrorId.
    scope_slot <String>
    reflecting <Boolean> ::= true.
    |
    croquetView
) (
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nscodemirror_', codeMirrorId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <CodeMirrorFragment>  ^ <Alien[Element]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
respondToKeyDown: event <Alien[Event]> = (
  ^[reflecting
        ifTrue: [preventDefault. croquetView <-: publish: scope eventSpec: #keydown data: event]
        ifFalse: [super respondToKeyDown: event.  reflecting:: true]
    ]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_keydown handler: [:e | reflecting:: false. super respondToKeyDown: e. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetCodeMirrorView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createCodeMirror handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_code_mirror' eventSpec: #createCodeMirror data: scope.
  ^futureView promise
)
) : (
)
class HyperlinkImageFragment image: i action: a = super HyperlinkImageFragment (|
    public croquetView_slot <Promise[Alien[NewspeakCroquetHyperlinkImageView]]>
    hyperlinkImageId <Integer> ::= newHyperlinkImageId.
    scope_slot <String>
    |
    croquetView
) (
action = (
  ^[croquetView <-: publish: scope event: #click]
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nshyperlinkImage_', hyperlinkImageId printString].
  ^scope_slot
)
updateVisualsFromSameKind: oldFragment <HyperlinkImageFragment>  ^ <Alien[LinkElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetHyperlinkImageView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createHyperlinkImage handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_hyperlink_image' eventSpec: #createHyperlinkImage data: scope.
  ^futureView promise
)
) : (
)
class ToggleComposer collapsedDefinition: collapsed <[Fragment]>
    expandedDefinition: expanded <[Fragment]>
    initiallyExpanded: flag <Boolean> = super ToggleComposer collapsedDefinition: collapsed 
    expandedDefinition: expanded 
    initiallyExpanded: flag (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetToggleComposerView]]>
    toggleComposerId <Integer> ::= newToggleComposerId.
    scope_slot <String>
    |
    croquetView
) (
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nstogglecomposer_', toggleComposerId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ToggleComposer>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_toggle handler: [:e | super toggle value. nil]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetToggleComposerView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createToggleComposer handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_toggle_composer' eventSpec: #createToggleComposer data: scope.
  ^futureView promise
)
) : (
)
public class TextEditorFragment = super TextEditorFragment (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetRadioButtonView]]>
    textEditorId <Integer> ::= newTextEditorId.
    scope_slot <String>
    |
    croquetView
) (
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ImageButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetTextEditorView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView subscribe: scope event: #model_createTextEditor handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetFragmentView new: m)
      ]. 
      nil
  ].
  rootView publish: 'newspeak_croquet_text_editor' eventSpec: #createTextEditor data: scope.
  ^futureView promise
)
public scope ^ <String> = (
  (* Lazily return a unique identifier for this fragment *)
  scope_slot isNil ifTrue: [scope_slot: 'nstexteditor_', textEditorId printString].
  ^scope_slot
)
setupCroquetView = (
        (* ensure a corresponding Croquet view is set *)
        croquetView_slot:: getCroquetView.
        (* When the Croquet view is notified of a click, it will call back to the Newspeak button to perform its normal action *)
        (* how to get event data? *)
        croquetView <-: subscribe: scope eventSpec: #model_accept handler: [:e :data | textEditor at: 'textContent' put: data. super respondToAccept: e. nil].
        croquetView <-: subscribe: scope eventSpec: #model_change handler: [:e :data | e printString out. textEditor at: 'textContent' put: data. super respondToChange: e. nil].
        croquetView <-: subscribe: scope eventSpec: #model_cancel handler: [:e :data | super respondToCancel: e. nil].        
)
respondToChange: event <Alien[Event]> = (
  'responding to change' out.
  croquetView <-: publish: scope event: #change data: (textEditor at: 'textContent')
)
respondToCancel: event <Alien[Event]> = (
  'responding to cancel' out.
  croquetView <-: publish: scope event: #cancel data: (textEditor at: 'textContent')
)
respondToAccept: event <Alien[Event]> = (
  'responding to accept' out.
  croquetView <-: publish: scope event: #accept data: (textEditor at: 'textContent')
)
) : (
)
class Fragment = super Fragment (
) (
croquetModel = (
    ^croquetView model.
)
) : (
)
lazy rootModel = js global at: #theModel.
newButtonId ^ <Integer> = (
  buttonCount::buttonCount + 1.
  ^buttonCount
)
newImageButtonId ^ <Integer> = (
  imageButtonCount:: imageButtonCount + 1.
  ^imageButtonCount
)
newRadioButtonId ^ <Integer> = (
  radioButtonCount:: radioButtonCount + 1.
  ^radioButtonCount
)
newHyperlinkId ^ <Integer> = (
  hyperlinkCount:: hyperlinkCount + 1.
  ^hyperlinkCount
)
newCodeMirrorId ^ <Integer> = (
  codeMirrorCount:: codeMirrorCount + 1.
  ^codeMirrorCount
)
newHyperlinkImageId ^ <Integer> = (
  hyperlinkImageCount:: hyperlinkImageCount + 1.
  ^hyperlinkImageCount
)
newToggleComposerId ^ <Integer> = (
  toggleComposerCount:: toggleComposerCount + 1.
  ^toggleComposerCount
)
newCheckboxId ^ <Integer> = (
  checkboxCount:: checkboxCount + 1.
  ^checkboxCount
)
private NewspeakCroquetFragmentView = (
   NewspeakCroquetFragmentView_slot isNil ifTrue: [
     NewspeakCroquetFragmentView_slot:: js global at: #NSCroquetFragmentView
     ].
   ^NewspeakCroquetFragmentView_slot
)
rootView = (
  rootView_slot isNil ifTrue: [rootView_slot:: js global at: #theView].
  ^rootView_slot
)
newTextEditorId ^ <Integer> = (
  textEditorCount:: textEditorCount + 1.
  ^textEditorCount
)
) : (
)
) : (
)
