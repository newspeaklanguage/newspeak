Newspeak3
'NSFiles-Win32'
class Win32Files usingPlatform: platform <NsPlatform> = (
(* This code was derived by converting the Strongtalk Win32 file classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.

Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
Copyright 2008-2009 Gilad Bracha and other contributors.
Copyright 2010 Ryan Macnak and other contributors.
Copyright 2012 Cadence Design Systems, Inc.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
 this  list of conditions and the following disclaimer.

* Redistribution in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.

Neither the name of Sun Microsystems or the names of contributors may
be used to endorse or promote products derived from this software without
specific prior written permission.

>>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.>> *)
|

(* imports *)
(* files *)
private FileDescriptor = platform files FileDescriptor.
private FilePattern = platform files FilePattern.
private FilePath = platform files FilePath.

(* Alien stuff *)
private Alien = platform aliens Alien.

private Win32 <Win32API> = platform apiManager win32api. (* The unique instance of Win32API *)
private WIN32_FIND_DATA = Win32 FIND_DATA.

(* mixins *)
private ExternalWin32FilePattern = ExternalObject mixinApply: Win32FilePattern.
private ExternalStreamableWin32FilePattern = ExternalStreamableObject mixinApply: ExternalWin32FilePattern.
private ExternalWin32FilePath = FilePath mixinApply: ExternalStreamableWin32FilePattern.

(* useful state *)
(* private errorStream = platform errorStream.
private wordSize = platform specific wordSize. *)
	protected api = API new.
|) (
class API = () (
public closeHandle: hnd <Win32Handle> ^ <Boolean> = (
	^Win32 CloseHandle boolValue: hnd
)
public copyFileSource: src <String> dest: dst <String> failIfExists: b <Boolean> ^ <Boolean> = (
	| csrc <CString> cdst <CString> |
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> |
			csrc:: selfFreeing value: (Alien newCString: src).
			cdst:: selfFreeing value: (Alien newCString: dst).
			Win32 CopyFile boolValue: csrc address value: cdst address value: b asAlien
			].
)
public createDirectoryName: dirName <String> security: sec <Win32apiSECURITYATTRIBUTES> ^ <Boolean> = (
| cnm <CString> |
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> |
			cnm:: selfFreeing value: (Alien newCString: dirName).
			Win32 CreateDirectory boolValue: cnm address value: sec address
			].
)
public createFileName: dname <String> mode: dmode <Alien> sharing: dsharing <Integer> security: dsecurity <Integer> create: dcreate <Integer> attributes: dattributes <Alien> template:dtemplate <Integer> ^ <Win32Handle> = (
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> | | cstr <CString> |
		cstr:: selfFreeing value: (Alien newCString: dname).
		Win32 CreateFile value: cstr pointer value: dmode value: dsharing value: dsecurity value: dcreate value: dattributes value: dtemplate
]
)
public deleteFileName: s <String> ^ <Boolean> = (
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> | | cstr <CString> |
		cstr:: selfFreeing value: (Alien newCString: s).
		Win32 DeleteFile boolValue: cstr address
		]
)
public findCloseHnd: hnd <Win32Handle> ^ <Boolean> = (
	^Win32 FindClose boolValue: hnd
)
public findFirstFilePattern: pat <String> data: data <Win32api_FIND_DATA> ^ <Win32Handle> = (
	| cpat <CString> |
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> |
			cpat:: selfFreeing value: (Alien newCString: pat).
			Win32 FindFirstFile value: cpat address value: data address
			].
)
public findNextFileHnd: hnd <Win32Handle> data: data ^ <Boolean> = (
	^Win32 FindNextFile boolValue: hnd value: data address
)
public getAttributesOfFileName: s <String> ^ <Integer> = (
	^Alien autoFreeAfter: [:selfFreeing | | cstr <CString> |
		cstr:: selfFreeing value: (Alien newCString: s).
		(Win32 GetFileAttributes value: cstr pointer) asUnsignedLong
	]
)
public getCurrentDirectorySize: buflen <Integer> buf: buf <Alien> ^ <Integer> = (
 ^Win32 GetCurrentDirectory value: buflen value: buf
)
public getFileSizeHandle: handle sizeHigh: sz <Alien> ^ <Integer> = (
	^Win32 GetFileSize unsignedValue: handle value: sz
)
public getFreeSpaceRootPath: p <String> sectorsPerCluster: spcs <Alien> bytesPerSector: bytesPerSector <Alien> freeClusters: fcs <Alien> clusters: cs <Alien> ^ <Boolean> = (
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> | | cstr <CString> |
		cstr:: selfFreeing value: (Alien newCString: p).
		Win32 GetFreeDiskSpace boolValue: cstr value: spcs value: bytesPerSector value: fcs value: cs
		]
)
public moveFileSource: src <String> dest: dst <String> ^ <Boolean> = (
	| csrc <CString> cdst <CString> |
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> |
			csrc:: selfFreeing value: (Alien newCString: src).
			cdst:: selfFreeing value: (Alien newCString: dst).
			Win32 MoveFile boolValue: csrc address value: cdst address
			].
)
public readFileHandle: handle buffer: buffer count: bufferSize numberRead: ioCount overlapped: o ^ <Boolean> = (
	^Win32 ReadFile boolValue: handle value: buffer value: bufferSize value: ioCount value: o
)
public removeDirectoryName: s <String> ^ <Boolean> = (
	^Alien autoFreeAfter: [:selfFreeing <[:Alien | Alien]> | | cstr <CString> |
		cstr:: selfFreeing value: (Alien newCString: s).
		Win32 RemoveDirectory boolValue: cstr pointer
		]
)
public setFilePointerHandle: handle distanceLow: p distanceHigh: h moveMethod: m ^ <Boolean> = (
	^Win32 SetFilePointer boolValue:handle value: p value: h value: m
)
public writeFileHandle: handle  buffer: buffer count: nBytes numberWritten: ioCount overlapped: o ^ <Boolean> = (
	^Win32 WriteFile boolValue: handle value: buffer value: nBytes value: ioCount value: o
)
) : (
)
class ExternalObject = (
(* A dummy class *)
) (
) : (
)
class ExternalStreamableObject = ExternalObject (
(* A dummy class *)
) (
) : (
)
class Win32FileDescriptor = FileDescriptor (| ioCount <ExternalProxy>
			(* Used to hold the count of bytes read/written, & other temporary results, for speed *)
		 |) (
public flushIfFail: errf <[:ExternalError]> = (
	| result <ExternalProxy> |
	(* %todo: uncomment *)
	(* result:: {<kernel ExternalProxy FlushFileBuffers async>
		handle: self handle }. *)
	result isNull
		ifTrue: [ errf value: 'I/O Error flushing file information' ].
)
getBufferSize ^<Int> = (
	(* Use the sector size *)
	^self sectorSize * 8
)
initializeIOCount = (
	ioCount:: Alien newC: 4.
	(* ioCount malloc: 4. *)
)
public mode: m <Symbol> = (
	super mode: m.
	self initializeIOCount.
)
openIfFail: err <[:ExternalError]> = (
	super openIfFail: err.

	#BOGUS yourself. (* review *)
	(* self ioCount malloc: wordSize. *)
	self ioCount: (Alien newC: wordSize).
)
postCopy = (
	super postCopy.
	self initializeIOCount.
)
printLastError = (
	| result <String> |
	(* Dump the error message for the last windows call *)
	(* %temporary *)
	result:: Win32 getLastErrorMessage.
(* <kernel ExternalProxy GetLastError>geterror *)
	errorStream show: 'Last error from windows: ', result printString; cr
)
public readAt: pos <Integer> ifFail: errf <[:ExternalError]> ^<Integer> = (
	| count <Integer> |
	self position = pos
	ifFalse: [ self position: pos ].
	self knowAtEnd
	ifTrue: [ count:: 0 ]
	ifFalse: [
	          (api readFileHandle: self handle
	              buffer: self buffer pointer
	              count: self bufferSize
	              numberRead: self ioCount pointer
	              overlapped: 0 ) ifFalse: [
						self printLastError.
						errf value: #IOError.
	                     	 ^0
					].
	          count:: self ioCount asUnsignedLong (* smallIntegerAt: 0. *) ].
	self setPosition: self position + count.
	^count
)
sectorSize ^<Integer> = (
	(* Use the sector size *)
	| junk <Alien> bytesPerSector <Alien> result <Integer> |

#BOGUS yourself. (* review this *)

	junk:: Alien newC: wordSize.
	bytesPerSector:: Alien newC: wordSize.
	(Win32 GetDiskFreeSpace (* <kernel ExternalProxy GetDiskFreeSpaceA> *)
	  boolValue: 0
	  value: junk address
	  value: bytesPerSector address
	  value: junk address
	  value: junk address) (* must call C function directly because first parameter is not really a string *)
	ifFalse: [ self error: 'Cannot get disk sector size' ]
	ifTrue: [ result:: bytesPerSector unsignedLongAt: 1 ].
	junk free.
	bytesPerSector free.
	^result
)
setExternalPosition: p <Integer> = (
	(* %todo: support large integer positions for extremely large files *)
	api setFilePointerHandle: self handle
	distanceLow: p
	distanceHigh: 0
	moveMethod: 0    (* FILE_BEGIN *)
)
severExternalConnections = (
	super severExternalConnections.
	self ioCount free.
	(api closeHandle: self handle)
	ifFalse: [ self error: 'Error closing file handle' ].
)
public size ^<Integer> = (
	| result <Integer> high |

	high:: Alien newGC: 4.

	result:: api getFileSizeHandle: handle
	      sizeHigh: high pointer.
   result = Win32 INVALID_FILE_SIZE
	ifTrue: [ (* must check for possible error status *)
	     | status <String> |
	      status:: (* <kernel ExternalProxy GetLastError> *) Win32 getLastErrorMessage.
	      status isNull    (* NO_ERROR *)
	          ifFalse: [ self error: 'Can''t get file size ' , status]. ].
	^(high asUnsignedLong) = 0
	ifFalse: [ (* %todo: construct a large integer from the high&low words *)
	          self unimplemented ]
	ifTrue: [ result]
)
wordSize = (
	#BOGUS yourself. (* Ryan is just guessing... *)
	^4
)
public write: nBytes <Integer> at: pos <Integer> ifFail: errf <[:ExternalError]> = (
	| count <Integer> |

	self position ~= pos
	ifTrue: [ self position: pos ].
	(api writeFileHandle: self handle
	buffer: self buffer pointer
	count: nBytes
	numberWritten: self ioCount pointer
	overlapped: 0 ) ifFalse: [ errf value: #IOError.	^0 ].
	count:: ioCount unsignedLongAt: 1.
	setPosition: self position + count.
)
) : (
public for: obj <EOBJ> mode: m <Symbol> ^ <Instance> = (
	(* Create a new instance, but don't open yet *)

	^self new externalObject: obj; mode: m
)
)
public class Win32FilePath = ExternalWin32FilePath () (
public copyAs: newPath <FilePath> ifFail: fail <[:ExternalError]> = (
	(api copyFileSource: name
				dest: newPath name
				failIfExists: false)
			ifFalse: [fail value:
						('Error copying file: ', Win32 getLastErrorMessage printString) asSymbol
					]
)
public createDirectoryIfFail: fail <[:Symbol]> = (
	| myName <String> sec <SECURITY_ATTRIBUTES> |
	myName:: name.
	sec:: Win32 SECURITY_ATTRIBUTES newC (* allocate zeroed *).

	[(api createDirectoryName: myName
			security: sec)
			ifFalse: [ Win32 getLastErrorCode = Win32 ERROR_ALREADY_EXISTS
								ifFalse: [ fail value: #CannotCreateFile ] ]
	] ensure: [sec free.	 ]
)
createValueFor: mode <Symbol> ^<Integer> = (
	mode = #read
		ifTrue: [ ^3		(* OPEN_EXISTING *) ].
	mode = #write
		ifTrue: [ ^2		(* CREATE_ALWAYS *) ].
	mode = #readWrite
		ifTrue: [ ^4		(* OPEN_ALWAYS *) ].
	self shouldNotHappen
)
public deleteDirectoryIfFail: blk <[:Symbol]> = (
	(api removeDirectoryName: self name)
			ifFalse: [ blk value: #ErrorDeletingDirectory ]
)
public deleteFileIfFail: blk <[:Symbol]> = (
	(api deleteFileName: self name)
			ifFalse: [ blk value: #ErrorDeletingFile ]
)
public deletePathIfFail: blk <[:Symbol]> = (
	self exists
		ifFalse: [ blk value: #NoSuchFileOrDirectory.
						^self		].
	self isDirectory
		ifTrue: [ self deleteDirectoryIfFail: blk ]
		ifFalse: [ self deleteFileIfFail: blk ]
)
public exists ^<Boolean> = (
	self win32FileAttributesIfFail: [ ^false ].
	^true
)
fileAttributesFor: mode <Symbol> ^<ExternalData> = (
	#BOGUS yourself.
	mode = #read ifTrue: [^16r08000000 bitOr: 16r80].



   (* mode = #read
	ifTrue: [ ^(Alien new: 4)
	          unsignedShortAt: 1 put: Win32 FILE_FLAG_SEQUENTIAL_SCAN;
	          unsignedShortAt: 3 put: Win32 FILE_ATTRIBUTE_NORMAL; yourself]. *)

	(mode = #write)
	ifTrue: [ ^(Alien new: 4)
	          unsignedShortAt: 1 put: 16r0000;
	          unsignedShortAt: 3 put: Win32 FILE_ATTRIBUTE_NORMAL; yourself].
	(mode = #readWrite)
	ifTrue: [ ^(Alien new: 4)
	          unsignedShortAt: 1 put: 16r0000;
	          unsignedShortAt: 3 put: Win32 FILE_ATTRIBUTE_NORMAL; yourself].
	self shouldNotHappen.
)
fileDescriptorClass ^<FileDescriptor class> = (
	^Win32FileDescriptor
)
public isDirectory ^<Boolean> = (
	^((win32FileAttributesIfFail: [ ^false ])
			bitAnd: Win32 FILE_ATTRIBUTE_DIRECTORY
	  ) ~= 0
)
public isReadOnly ^<Boolean> = (
	^((win32FileAttributesIfFail: [ ^false ])
			bitAnd: Win32 FILE_ATTRIBUTE_READONLY
	  ) ~= 0
)
isSyntaxValid ^<Boolean> = (
	(* Extend inherited version to ensure no wildcard characters *)
	^super isSyntaxValid and: [ self unimplemented ]
)
public lastModified = (
	#TODO yourself.

	error: 'unimplemented'
)
modeProxyFor: mode <Symbol> ^<ExternalData> = (
	mode = #read ifTrue: [^16r80000000 (* GENERIC_READ *)].
	mode = #write ifTrue: [^16r80000000 bitOr: 16r40000000 (* GENERIC_READ | GENERIC_WRITE *)].
	mode = #readWrite ifTrue: [^16r80000000 bitOr: 16r40000000 (* GENERIC_READ | GENERIC_WRITE *)].


	(* mode = #read
		ifTrue: [ ^(Alien new: 4) unsignedShortAt: 1 put: 16r8000; unsignedShortAt: 3 put: 0; yourself ].
	mode = #write
		ifTrue: [ ^(Alien new: 4) unsignedShortAt: 1 put: (16r4000 bitOr: 16r8000); unsignedShortAt: 3 put: 0; yourself ].
	mode = #readWrite
		ifTrue: [ ^(Alien new: 4) unsignedShortAt: 1 put: (16r4000 bitOr: 16r8000); unsignedShortAt: 3 put: 0; yourself ]. *)
)
public moveAs: newPath <FilePath> ifFail: fail <[:ExternalError]> = (
	(api moveFileSource: name
				dest: newPath name)
			ifFalse: [ | err <Integer> |
							err:: Win32 getLastErrorCode.
							err = Win32 ERROR_ALREADY_EXISTS
								ifTrue: [ fail value: #AlreadyExists.
												 ^self. ].
							err = Win32 ERROR_SHARING_VIOLATION
								ifTrue: [ fail value: #SharingViolation.
												 ^self. ].
							fail value:
								('Error moving file: ', Win32 getLastErrorMessage printString) asSymbol
								]
)
public openInternalFor: mode <Symbol> ifFail: err <[:ExternalError | X def]> ^<Win32Handle | X> = (
	(* %todo: use overlapped io *)
	|
		dmode <Alien>
		dsharing <Integer>
		dcreate <Integer>
		dattributes <Alien>
		handle <Win32Handle>
	|
	#ACCESSBOGUS.
	dmode:: self modeProxyFor: mode.
	dsharing:: self sharingValueFor: mode.
	dcreate:: self createValueFor: mode.
	dattributes:: self fileAttributesFor: mode.

	handle:: api createFileName: self name
		mode: dmode
		sharing: dsharing
		security: 0
		create: dcreate
		attributes: dattributes
		template: 0.

	^handle = Win32 INVALID_HANDLE_VALUE
		ifFalse: [ handle ]
		ifTrue: [ err value: #cannotOpenFile ]
)
public printOn: stm = (
	stm nextPutAll: 'a Win32FilePath(' , pattern , ')'.
)
sharingValueFor: mode <Symbol> ^<Integer> = (
	mode = #read
		ifTrue: [ ^16r00000001 (* FILE_SHARE_WRITE *) ].
	(* in all other cases *)
	^0 (* no sharing *)
)
public size = (
	#TODO yourself.

	error: 'unimplemented'
)
type ^<Str> = (
	(* The file type (on most platforms this is the part after the "." at the end) *)

	| indices <SeqCltn[Int]> |
	indices:: self name indicesOfSubCollection: '.'.
	indices isEmpty
		ifTrue: [ ^'' ].
	^self name
			copyFrom: indices last + 1
			to: self name size
)
win32FileAttributesIfFail: blk <[X def]> ^<Integer | X> = (
		| result <Integer> |
		result:: api getAttributesOfFileName: self name.
		^result = 16rFFFFFFFF
			ifTrue: [ blk value ]
			ifFalse: [ result ]
)
) : (
public currentDirectory ^<FilePath> = (
	| buf <Alien> buflen <Integer> |
	buflen:: 1000.
	buf:: (Alien newGC: buflen + 1)
			unsignedByteAt: buflen + 1 put: 0;
			yourself.

	^(api getCurrentDirectorySize: buflen buf: buf pointer) = 0
				ifTrue: [ Win32 reportError ]
				ifFalse: [ self new pattern: buf strcpy ]
)
)
public class Win32FilePattern = FilePattern () (
elementsDo: blk <[:FilePattern]> = (
	| s <CharacterReadStream> |

	s:: self pattern readStream.
	[ s atEnd ]
		whileFalse:
			[ | next <Str> |
				next:: s upTo: "\".
				(next includes: ":")
					ifTrue: [ next:: next,'\' ].
				blk value: (FilePattern for: next)	].
)
extensions ^<FilePattern> = (
	^self , (FilePattern for: '*')
)
firstWildElementOf: els <SeqCltn[FilePattern]> ifFail: fail <[X def]> ^<Int | X> = (
	1 to: els size do:
		[:i <Int> |
			(els at: i) isPath
				ifFalse: [ ^i ]
		].
	^fail value
)
public isAbsolute ^<Boolean> = (
	^self pattern includes: ":"
)
public pathsDo: blk <[:FilePath]> = (
	| els <SeqCltn[FilePattern]> i <Int> |
	els:: self elements.
	i:: self firstWildElementOf: els
				ifFail: [ ^self shouldNotHappen ].
	i = els size
		ifTrue: [ self terminalPathsDo: blk ]
		ifFalse: [ | rest <FilePattern> |
						i + 1 = els size
							ifTrue: [ rest:: els last ]
							ifFalse: [ rest:: FilePattern forAll: (els copyFrom: i + 1 to: els size) ].
						(FilePattern forAll: (els copyFrom: 1 to: i))
							pathsDo:
								[:fp <FilePath> |
									fp isDirectory
										ifTrue: [ (fp, rest) pathsDo: blk ]		]
					 ]
)
patternExtending: pat <FilePattern> ^<Str> = (
	^pat pattern last = "\"
		ifTrue: [ pat pattern, self pattern ]
		ifFalse: [ pat pattern,'\', self pattern ]
)
terminalPathsDo: blk <[:FilePath]> = (
	(* assumes that the last element of the receiver is the only one that contains wildcards *)
	| data <WIN32_FIND_DATA> hnd <Win32Handle> allpat <CString> pat <Str> els <SeqCltn[FilePattern]> prefix <Str> |
	data:: WIN32_FIND_DATA newGC: (11*4) + (260 (* MAXPATH *)) + 14.
	els:: self elements.
	(* %todo %opt - should check to see if the pattern is suitable for the windows call directly, so that the
		elements are prefiltered.  Rule would be: use pattern directly if * appears only just before a dot or at the
		end, and contains no other wildcards *)
	els size = 1
		ifTrue: [
			allpat:: '*.*'.
			prefix:: ''.
		]
		ifFalse: [
			allpat:: self containingDirectory pattern, '\*.*'.
			prefix:: (FilePattern forAll: (els copyFrom: 1 to: els size - 1)) pattern,'\'
	].
	pat:: els last pattern.
	[ hnd:: api findFirstFilePattern: allpat
						data: data.
		hnd = Win32 INVALID_HANDLE_VALUE
			ifTrue: [ Win32 getLastErrorCode = Win32 ERROR_NO_MORE_FILES
							ifFalse: [ Win32 reportError ]
							ifTrue: [ ^self ]
						]
			ifFalse: [ [ | next <Str> |
								next:: (* data cFileName asString. *) data strcpyFrom: 45.
								((string: pat platformMatch: next) and: [ next ~= '.' and: [ next ~= '..' ]])
									ifTrue: [ blk value: (FilePath for: prefix,next) ].
								[(api findNextFileHnd: hnd
										data: data)
										ifFalse: [ Win32 getLastErrorCode = Win32 ERROR_NO_MORE_FILES
															ifFalse: [ Win32 reportError ]
															ifTrue: [ ^self ]
													 ]
										ifTrue: [ next:: (* data cFileName asString. *) data strcpyFrom: 45.
														((string: pat platformMatch: next) and: [ next ~= '.' and: [ next ~= '..' ]])
															ifTrue: [ blk value: (FilePath for: prefix,next) ].
													]
								] repeat.
						 ] ensure:
								[(api findCloseHnd: hnd)
										ifFalse: [ Win32 reportError ].
								]
						]
	] ensure:
		[ data free]
)
) : (
public for: pat <Str> ^<FilePattern> = (
	self assert: [ self validPattern: pat ].
	^self new pattern: pat
)
public multipleMatchWildcardCharacter ^ <Character> = (
	^"*"
)
pathSeparatorCharacter ^ <Character> = (
	^'\'
)
public patternHasWildcards: pat <Str> ^<Boolean> = (
	^(pat includes: multipleMatchWildcardCharacter)
		or: [ pat includes: singleMatchWildcardCharacter ]
)
public singleMatchWildcardCharacter ^ <Character> = (
	^"?"
)
validPattern: pat <Str> ^<Boolean> = (
	(* Make sure this is a valid syntactic pattern (should be valid even if no *s) *)
	self unimplemented
)
)
public resetForNewImageSession = (
	(* Nothing to do here since we take functions from Win32API.
	 Method is here for symmetry with UnixFiles and MacOSXFiles. *)
)
string: SELF
match: str <Str>
ignoreCase: b <Boolean>
single: single <Character>
multiple: multiple <Character>
^ <Boolean> = (
	|
	patternSize <Int>
	stringSize <Int>
	patternIndex <Int>
	stringIndex <Int>
	c <Character>
	patternStartScan <Int>
	stringStartScan <Int>
	t <Character>
	|

	patternSize:: SELF size.
	stringSize:: str size.
	patternIndex:: 1.
	stringIndex:: 1.

	[patternIndex <= patternSize] whileTrue: [
		c:: SELF at: patternIndex.
		patternIndex:: patternIndex + 1.
		c = multiple
			ifTrue: [
				patternIndex > patternSize ifTrue: [^true].
				stringStartScan:: stringIndex.
				patternStartScan:: patternIndex ]
			ifFalse: [
				stringIndex > stringSize ifTrue: [^false].
				t:: str at: stringIndex.
				stringIndex:: stringIndex + 1.
				(t = c or: [c = single or: [b and: [t asUppercase = c asUppercase]]])
					ifTrue: [
						(patternIndex > patternSize and: [stringIndex <= stringSize])
							ifTrue: [
								stringStartScan isNil ifTrue: [^false].
								stringIndex:: stringIndex + (patternStartScan - patternIndex) + 1.
								patternIndex:: patternStartScan ] ]
					ifFalse: [
						stringStartScan isNil ifTrue: [^false].
						stringIndex:: stringIndex + (patternStartScan - patternIndex) + 1.
						patternIndex:: patternStartScan ] ] ].
	^stringIndex > stringSize
)
string: s platformMatch: m = (
	^string: s match: m ignoreCase: true single: "?" multiple: "*"
)
) : (
)
