Newspeak3
'Root'
class HopscotchGestureDemo packageUsing: manifest = (
) (
class Demo usingPlatform: p = (|
    Holder = p hopscotch ducts Holder.
	Subject = p hopscotch Subject.
	Presenter = p hopscotch Presenter.
	Color = p graphics Color.	    
|) (
class DemoPresenter onSubject: s = Presenter onSubject: s (
    |
    borderWidth <Holder> = Holder with: 10.0.     
    |
) (
public definition = (
	^column: {
            
        (row: {            
            (label: 'Border:')
                bold;
                italic;
                underline;
                foregroundColor: Color gray.
                
            slider: borderWidth
                    min: 0 
                    max: 100.
        }).

        mediumBlank.

        (row: {           
            rectangle
                fill: Color green;
                frame: 300 height: 300;
                border: Color yellow width: borderWidth;
                onClick: [:event | 
                    'onClick' out.
                ];
                onMouseDown: [:event | 
                    'onMouseDown' out.
                ];
                onMouseUp: [:event | 
                    'onMouseUp' out.
                ];
                onMouseEnter: [:event | 
                    'onMouseEnter' out.
                ];
                onMouseMove: [:event | 
                    'onMouseMove' out.
                ];
                onMouseOut: [:event | 
                    'onMouseOut' out.
                ];
                onWheel: [:event | 
                    'onWheel' out.
                ];
                onTouchStart: [:event | 
                    'onTouchStart' out.
                ];
                onTouchMove: [:event | 
                    'onTouchMove' out.
                ];
                onTouchEnd: [:event | 
                    'onTouchEnd' out.
                ];
                onTouchCancel: [:event | 
                    'onTouchCancel' out.
                ].
        }).
    }
)
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfDemoPresenter
)
) : (
)
public class DemoSubject new = Subject onModel: nil (
) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
isMyKind: other ^ <Boolean> = (
    ^other isKindOfDemoPresenter
)
) : (
)
) : (
)
public main: platform args: args = (
	|  demo = Demo usingPlatform: platform. |
	platform hopscotch HopscotchWindow openSubject: demo DemoSubject new.
)
) : (
)
