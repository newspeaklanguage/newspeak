Newspeak3
'MemoryHole'
class VCSGitBackendProvider usingPlatform: platform vcs: vcs = (
(* Back-end for accessing git repositories

Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*)
|
	private AbstractBackend = vcs core AbstractBackend.
	private Map = platform collections Map.

	private logger = vcs core logger.
|) (
public class Backend = AbstractBackend () (
public class LocalRepository onRepositoryId: repositoryId = AbstractLocalRepository onRepositoryId: repositoryId () (
class Command = SuperCommand (|
	cachedCommonAncestors ::= Map new.
|) (
public addStream: stream asFileNamed: filename = (
	writeStream: stream toFileNamed: filename.
	launcher run: {'add'. filename}
)
public checkoutBranch: branchName = (
	(* Don't convert branchName to a local ref, otherwise git will detach HEAD *)
	launcher run: {'checkout'. branchName}
)
public commonAncestorOf: revA and: revB = (
	^cachedCommonAncestors
		at: {revA. revB}
		ifAbsentPut: [
			super commonAncestorOf: revA and: revB]
)
public createEmptyRepository = (
	launcher noDefaultArgumentsRun: {'init'. repository repositoryDirectory pathName}.
	addStream: '' readStream asFileNamed: ignoredFilename.
	launcher run: {'commit'.  '-m'. 'Initial Commit'}.
)
defaultArguments = (
	^super defaultArguments, {'--work-tree=', repository repositoryDirectory fullName. '--git-dir=', repository repositoryDirectory fullName, '/.git'}
)
public fetchFromRepository: otherRepositoryId = (
	launcher run: {'fetch'. otherRepositoryId}
)
public merge: mergeSources = (
	launcher run: {'merge'}, mergeSources
)
public remoteNamesAndPaths = (
	| lines fetches |
	lines:: launcher runLines: {'remote'. '-v'}.
	(* Assumed format. Path to repo might contain spaces
name path to repo (fetch) OR:
name path to repo (push) *)
	fetches:: lines select: [:each | each endsWith: '(fetch)'].
	^fetches collect: [:each | | substrings |
		substrings:: each subStrings: '	 ' (* tab + space *).
		{substrings first.
		(* isn't there a library method for flattening streams? *)
		String streamContents: [:stream | substrings allButFirst allButLast do: [:s | stream nextPutAll: s]]}]
)
public removeAll: filenames = (
	filenames isEmpty ifFalse: [
		launcher run: {'rm' .'-f'}, filenames]
)
public resetHard: commit ifFail: failBlock = (
	launcher run: {'reset'. '--hard'. commit} ifFail: failBlock
)
public setUpStreamOf: localBranchName to: remoteBranchName on: repositoryName = (
	| localRef remoteRef |
	localRef:: toLocalRef: localBranchName.
	remoteRef: 'refs/remotes/', repositoryName, '/', remoteBranchName.
	(* Ensure the branch is imported *)
	launcher run: {'fetch'. repositoryName. remoteBranchName, ':', remoteRef}.
	launcher run: {'branch'. '--set-upstream'. localBranchName. remoteRef}
)
public stayOnCurrentBranchDo: block = (
	| branchName |
	branchName:: currentBranchNameIfNone: [^ block value].
	block value.
	checkoutBranch: branchName.
)
public upstreamBranchOf: branchName ifAbsent: absentBlock = (
	| line branchHeader |
	branchHeader:: 'refs/remotes/'.
	line:: (launcher runLines: {'for-each-ref'. '--format'. '%(upstream)'. toLocalRef: branchName}) first.
	line isEmpty ifTrue: [^ absentBlock value].
	(line startsWith: branchHeader) ifFalse: [^ logger error: 'for-each-ref produced unexpected format'].
	^(line allButFirst: branchHeader size) subStrings: '/'.
)
) : (
)
class Historian named: historianName version: v = AbstractLocalHistorian named: historianName version: v () (
class HistorianChange onVersion: v = AbstractHistorianChange onVersion: v (
) (
public commit = (
	historian activatedDo: [
		withoutActivationCommit]
)
mergeIfNeeded = (
	1 = newVersion parents size ifFalse: [ | mergeSources |
		mergeSources:: newVersion parents reject: [:each | each = historian version].
		command merge: (mergeSources collect: [:each | each internalId])].
)
withoutActivationCommit = (
	mergeIfNeeded.
	changedMirrors do: [:each |
		command addStream: each source readStream asFileNamed: each filename].
	command removeAll: (
		deletedOriginalMirrors collect: [:each | each filename]).
	command commit: newVersion message
)
) : (
)
public activatedDo: block = (
	(* Doesn't check for nested calls. Could be added if required more than once *)
	^command stayOnCurrentBranchDo: [
		makeCurrentHistorian.
		block value]
)
public makeCurrentHistorian = (
	repository command checkoutBranch: name
)
public trackedHistorian: otherHistorian = (
	command
		setUpStreamOf: self name
		to: otherHistorian name
		on: otherHistorian repository name
)
public trackedHistorianifPresent: presentBlock ifAbsent: absentBlock ifError: errorBlock = (
	| repositoryAndHistorian trackedHistorian |
	repositoryAndHistorian:: (repository command upstreamBranchOf: name ifAbsent: [^ absentBlock value]).
	trackedHistorian:: (repository remoteRepositoryAt: repositoryAndHistorian first)
		historianNamed: repositoryAndHistorian second
			ifFail: [
				logger warn: 'Failed to load remote historian ', repositoryAndHistorian second.
				^errorBlock value].
	^presentBlock value: trackedHistorian
)
) : (
)
class RepositoryVersionAccessing = AbstractRepositoryVersionAccessing (|
private cachedVersionAtInternalId ::= Map new.
|) (
class RepositoryVersion = AbstractRepositoryVersion (|
	public parentInternalIds
	cachedMirrors
|) (
public commonAncestorWith: version = (
	| commonInternalId |
	commonInternalId:: repository command commonAncestorOf: internalId and: version internalId.
	^versionAtInternalId: commonInternalId
)
public mirrors ^<Map[String, SourceMirror]> = (
	| files mirrorMap |
	nil = cachedMirrors ifFalse: [^cachedMirrors].
	files:: repository command listFilesIn: internalId.
	mirrorMap:: Map new.
	files do: [:file |
		| stream mirror |
		stream:: repository command streamFile: file atInternalId: internalId.
		mirror:: sourceMirrors mirrorForStream: stream name: file.
		mirror isNil ifFalse: [mirrorMap at: file put: mirror]].
	^cachedMirrors:: mirrorMap
)
) : (
)
class RepositoryVersionStream onStream: stream = AbstractRepositoryVersionStream onStream: stream (
) (
public next = (
	| internalId parents message author commit |
	internalId:: nextLine.
	parents:: nextLine findTokens: ' '.
	author:: nextLine.
	message:: nextLine.
	commit:: RepositoryVersion new
		internalId: internalId;
		parentInternalIds: parents;
		author: author;
		message: message;
		yourself.
	^commit
)
) : (
)
cacheAllVersionsFrom: internalId = (
	| stream |
	stream:: RepositoryVersionStream onStream: (command streamFromInternalId: internalId).
	[stream atEnd] whileFalse: [ | version |
		version:: stream next.
		cachedVersionAtInternalId
			at: version internalId
			put: version]
)
public clearCache = (
	cachedVersionAtInternalId:: Map new.
)
public exportVersionId: internalId to: remoteRepository = (
	(* We don't need this for git, as a push automatically ensures versions are exported *)
	(* repository command pushToRepository: remoteRepository repositoryId *)
)
public importVersionId: internalId from: remoteRepository = (
	repository command fetchFromRepository: remoteRepository repositoryId
)
public versionAtInternalId: internalId = (
	(* ^ (RepositoryVersionStream onStream: (repository command streamAtInternalId: internalId)) next *)
	^cachedVersionAtInternalId
		at: internalId
		ifAbsent: [
			cacheAllVersionsFrom: internalId.
			cachedVersionAtInternalId at: internalId]
)
) : (
)
SuperCommand = (
	^super Command
)
public clearCaches = (
	cachedCommand: nil.
	repositoryVersionAccessing clearCache.
)
clone: repositoryLocation = (
	command clone: repositoryLocation.
	historians anyOne loadIntoImage
)
public command = (
	^super command
)
create = (
	command createEmptyRepository
)
public imageHistorian = (
	(* TODO: Consider introducing an unnamed historian *)
	^(command currentBranchNameIfNone: [nil])
		ifNil: [logger error: 'no current branch']
		ifNotNil: [:it | historianNamed: it ifFail: [logger halt: 'Could not load', it]]
)
public logStream = (
	^RepositoryVersionStream onStream: command logStream
)
public remoteRepositories = (
	^command remoteNamesAndPaths collect: [:each |
		RemoteRepository onLocalRepository: self onRepositoryId: each second onName: each first]
)
repository = (
	^self
)
) : (
)
class RemoteRepository onLocalRepository: lr onRepositoryId: repositoryId onName: n = AbstractRemoteRepository onLocalRepository: lr onRepositoryId: repositoryId onName: n () (
class Command = SuperCommand (
) (
defaultArguments = (
	^super defaultArguments, {'--work-tree=', repository localRepository repositoryDirectory fullName. '--git-dir=', repository localRepository repositoryDirectory fullName, '/.git'}
)
) : (
)
class Historian named: historianName versionId: vId = AbstractRemoteHistorian named: historianName versionId: vId (|
private cachedVersion
|) (
public setTo: newVersion ifFail: failBlock = (
	outer RemoteRepository command
		setBranch: name
		onRepository: repositoryId
		to: newVersion internalId
		ifFail: failBlock
)
public version = (
	nil = cachedVersion ifTrue: [
		cachedVersion:: super version].
	^cachedVersion
)
) : (
named: historianName version: version = (
	^self named: historianName versionId: version internalId
)
)
SuperCommand = (
	^super Command
)
repository = (
	^self
)
public repositoryId = (
	^super repositoryId
)
) : (
)
class Repository onRepositoryId: repositoryId = AbstractRepository onRepositoryId: repositoryId (|
	public repositoryType = 'git'.
|) (
class Command = AbstractCommand (|
	commandLine = 'git'.
|) (
branches = (
	| lines |
	lines:: launcher runLines: {'branch'. '-a'}.
	^lines collect: [:each |
		(* The first two columns indicate whether the branch is the active one. They are either '* ' or '  '. *)
		((each allButFirst: 2) subStrings: ' ') first]
)
public branchesAndVersionIdsFrom: repositoryId = (
	| lines refHeader |
	refHeader:: 'refs/heads/'.
	lines:: launcher runLines: {'ls-remote'. '--heads'. repositoryId}.
	^lines collect: [:each | | substrings completeRef |
		substrings:: each subStrings: ' 	'.
		completeRef:: substrings second.
		(completeRef startsWith: refHeader) ifFalse: [
			logger error: 'ls-remote produced unexpected format'].
		{completeRef allButFirst: refHeader size. substrings first}]
)
public clone: repositoryLocation = (
	^launcher noDefaultArgumentsRun: {'clone'. repositoryLocation. repositoryDirectory pathName}
)
public commit: message = (
	launcher run: {'add'. '*'}.
	launcher run: {'commit'.  '-m'. message}.
)
public commonAncestorOf: a and: b = (
	^(launcher run: {'merge-base'. a asString. b asString}) withBlanksTrimmed
)
public currentBranchNameIfNone: block = (
	| lines line |
	lines:: launcher runLines: {'branch'. '-a'}.
	line:: lines detect: [:each | each first = "*"] ifNone: [^ block value].
	(* We should check whether there is a better way than to check for the presence of
	'(no branch)'. This is going to break in the case of internationalization. *)
	line = '* (no branch)' ifTrue: [^ block value].
	^((line allButFirst: 2) subStrings: ' ') first
)
defaultArguments = (
	^{'--no-pager'}
)
public deleteBranch: branchName
onRepository: otherRepositoryId
ifFail: failBlock= (

	setBranch: branchName
	onRepository: otherRepositoryId
	to: ''
	ifFail: failBlock
)
public listFilesIn: internalId = (
	| filenames |
	filenames:: launcher runLines: {'ls-tree'. '-r'. '--name-only'. internalId}.
	^filenames reject: [:each | isFilenameIgnored: each]
)
public logStream = (
	^launcher runStream: {'log'. logTemplate}
)
logTemplate = (
	^'--pretty=format:%H%n%P%n%an%n%s'
)
parentStream = (
	^launcher runStream: {'log'. '-n 1'. logTemplate}
)
public setBranch: branchName
onRepository: otherRepositoryId
to: internalId
ifFail: failBlock = (
	| localRef |
	localRef:: toLocalRef: branchName.
	launcher run: {'push'. otherRepositoryId. internalId, ':', localRef} ifFail: failBlock
)
public statusFrom: revA to: revB = (
	| lines |
	lines:: launcher runLines: {'diff'. '--name-status'. revA asString.  revB asString}.
	halt.
	^lines collect: [:each | {each first. each allButFirst: 2}]
)
public streamAtInternalId: internalId = (
	^launcher runStream: {'log' . '-n 1'. logTemplate. internalId}
)
public streamFile: file atInternalId: internalId = (
	^launcher runBinaryStream: {'show' . internalId asString, ':', file}
)
public streamFromInternalId: internalId = (
	^launcher runStream: {'log'. logTemplate. internalId asString}
)
toLocalRef: branchName = (
	^'refs/heads/', branchName
)
) : (
)
class Historian named: historianName = AbstractHistorian named: historianName (
) (
public createIfFail: failBlock = (
	command
		setBranch: name
		onRepository: repository repositoryId
		to: version internalId
		ifFail: failBlock
)
public deleteIfFail: failBlock = (
	repository command
		deleteBranch: name
		onRepository: repository repositoryId
		ifFail: failBlock
)
public repository = (
	^outer Repository repository
)
public setTo: newVersion ifFail: failBlock = (
	command
		resetHard: newVersion internalId
		ifFail: failBlock
)
) : (
)
command = (
	^super command
)
public historians = (
	^(command branchesAndVersionIdsFrom: repositoryId) collect: [:each |
		historianNamed: each first versionId: each second]
)
public repositoryDirectory = (
	^super repositoryDirectory
)
repositoryName = (
	^repositoryDirectory pathName
)
) : (
)
Version = (
	^super Version
)
sourceMirrors = (
	^super sourceMirrors
)
) : (
)
) : (
)
