Newspeak3
'Newspeak'
class NewspeakGrammar usingPlatform: p parsers: parsers = (
(* The Newspeak grammar, both with and without type declarations.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2010 Felix Geller and Ryan Macnak
Copyright 2012 Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
|

private List = p collections List.

private ExecutableGrammar = parsers ExecutableGrammar.
private CollectingCommentParser = parsers CollectingCommentParser.
private CombinatorialParser = parsers CombinatorialParser.
private Token = parsers Token.
public ParserError = parsers ParserError.
|) (
class NS3Grammar = ExecutableGrammar (
(* Grammar for Newspeak3 (without types). *)
|
	whitespace = super whitespace. (* cache whitespace parser *)
	colon = tokenFromChar: ":".
	comma = tokenFromChar: ",".
	dollar = tokenFromChar: "$".
	dot = tokenFromChar: ".".
	equalSign = tokenFromChar: "=".
	hat = tokenFromChar: "^".
	lbracket = tokenFromChar: "[".
	lcurly = tokenFromChar: "{".
	lparen = tokenFromChar: "(".
	langleBracket = tokenFromChar: "<".
	pound = tokenFromChar: "#".
	rangleBracket = tokenFromChar: ">".
	rbracket = tokenFromChar: "]".
	rcurly = tokenFromChar: "}".
	rparen = tokenFromChar: ")".
	semicolon = tokenFromChar: ";".
	slash = tokenFromChar: "/".
	vbar = tokenFromChar: "|".
	mixinOperator = tokenFromSymbol: ':>'.
	inverseMixinOperator = tokenFromSymbol: '<:'.
	eventualSendOperator = tokenFromSymbol: '<-:'.
	digit = charBetween: "0" and: "9".
	digits = digit plus.
	uppercaseLetter = charBetween: "A" and: "Z".
	extendedDigits = (digit | uppercaseLetter) plus.
	radix = digits, (char: "r").
	fraction = (char: "."), digits.
	extendedFraction = (char: "."), extendedDigits.
	exponent = (char: "e"), (char: "-" ) opt, digits.
	decimalNum = (char: "-") opt, digits, fraction opt, exponent opt.
	radixNum = radix, (char: "-") opt, extendedDigits, extendedFraction opt, exponent opt.
	num = radixNum | decimalNum.
	(* must distinguish internal use of productions from use as tokens *)
	number = tokenFor: num.
	letter = uppercaseLetter | (charBetween: "a" and: "z").
	specialCharacter = (char: "+") | (char: "/") | (char: "\") | (char: "*")
		| (char: "~") | (char: "<") | (char: ">") | (char: "=")
		| (char: "@") | (char: "%") | (char: "|") | (char: "&")
		| (char: "?" ) | (char: "!") | (char: ",").

	character = digit | letter | specialCharacter
		| (char: "["  ) | (char: "]"  ) | (char: "{" ) | (char: "}" )
		| (char: "("  ) | (char: ")" ) | (char: "^" ) | (char: ";" )
		| (char: "$" ) | (char: "#"  ) | (char: ":" ) | (char: "." )
		| (char: "-") | (char: "_") | (char: "`") (* the Smalltalk grammar neglects to add - to characters, or to comments. It does add | [self char: $' ], but these are both bugs. We also support underscores, which Squeak insists on turning into assignment arrows. However, we do not support these as assignments. *).

	id = (letter | _), ((letter | digit | _)) star wrapper:
		[:first :second | String fromRunes: {first}, second asArray].

	public identifier = tokenFor: id.

	charIncludingQuotesAndSpace = character | (char: "'" ) | (char: """ ) | (char: " ").
	characterConstant = tokenFor: (char: """), charIncludingQuotesAndSpace, (char: """).

	str = (char: "'"), stringBody, (char: "'") wrapper:
		[:oq :es :eq | String fromRunes: es].

	string = tokenFor: str.

	kw = id, (char: ":") wrapper:
		[:i :c | i, ':'].

	kwds = kw plus
		wrap: [:c | c inject: '' into: [:s :e | s, e]].

	public keyword = tokenFor: kw.

	setterKw = kw, (char: ":")
		wrapper: [:i :c | i, ':'].

	setterKeyword = tokenFor: setterKw.

	sym = str | kwds | binSel | id.
	symbol = tokenFor: sym.

	comment = NSCommentParser new.

	binSel = (specialCharacter | (char: "-")), specialCharacter star
		wrapper: [:c1 :c2 |
		(* probably delay interning as symbol until later phase *)
		(String fromRunes: {c1}, c2) asSymbol].

	binarySelector = tokenFor: binSel. (* maybe intern as symbol here *)


	(* syntactic productions *)
	symbolConstant = pound, symbol.
	tuple = lcurly, (expression starSeparatedOrTerminatedBy: dot), rcurly.

	(* patterns *)

	(* adding literals for patterns *)
	literal = pattern | number | symbolConstant | characterConstant | string | tuple.

	pattern = (tokenFromChar: "<"), patternLiteral, (tokenFromChar: ">").
	patternLiteral = wildcardPattern | literalPattern | keywordPattern.

	wildcardPattern = tokenFromChar: "_".

	(* values which are comparable by means of #= *)
	literalPattern = tokenFor: number | symbolConstant | characterConstant | string | tuple.

	(* keyword patterns *)
	keywordPattern = kwPatternPair plus.
	kwPatternPair = keyword, kwPatternValue opt.
	kwPatternValue = wildcardPattern | literalPattern | variablePattern | nestedPatternLiteral.
	variablePattern = tokenFor: ((char: "?"), id).
	nestedPatternLiteral = tokenFor: pattern.

	slotName = identifier.
	unarySelector = UnarySelectorParser new on: self. (* the one hack/flaw. See UnarySelectorParser for details *)

	parenthesizedExpression = lparen, expression, rparen.

	primary = slotName | literal | block | parenthesizedExpression.

	unaryMsg = eventualSendOperator opt, unarySelector.
	unaryExpression = primary, unaryMsg star.

	binaryMsg = eventualSendOperator opt, binarySelector, unaryExpression.
	binaryExpression = unaryExpression, binaryMsg star.

	keywordMsg = eventualSendOperator opt, (keyword, binaryExpression) plus.

	message = keywordMsg | binaryMsg | unaryMsg.

	nontrivialUnaryMessages = unaryMsg plus, binaryMsg star, keywordMsg opt.
	nontrivialBinaryMessages = binaryMsg plus, keywordMsg opt.
	keywordMessages = keywordMsg.
	nonEmptyMessages = nontrivialUnaryMessages | nontrivialBinaryMessages | keywordMessages.

	keywordExpression = binaryExpression, keywordMsg opt.

	keywordHereSend = keywordMsg.
	cascadeMsg = semicolon, (keywordMsg | binaryMsg | unaryMsg).

	msgCascade = nonEmptyMessages, cascadeMsg star.

	cascadedMessageExpression = primary, msgCascade opt.

	sendExpression = keywordHereSend | cascadedMessageExpression.

	expression = setterKeyword star, sendExpression.

	returnStatement = hat, expression, dot opt.

	furtherStatements = dot, statements.
	statementSequence = expression, furtherStatements  opt.
 	statements = returnStatement | statementSequence | empty.

	blockParameter = colon, slotDecl.
	blockParameters = blockParameter plus, vbar.

	slotDefs = slotDef star.
	seqSlotDecls = vbar, slotDefs, vbar.
	simSlotDecls = vbar, vbar, slotDefs, vbar, vbar.
	slotDecls = simSlotDecls | seqSlotDecls.

	temporaries = slotDecls.

	beginNSComment = (char: "("), (char: "*").
	endNSComment = (char: "*"), (char: ")").
	keywordAndLiteral = keyword, literal.
	literalMessage = unaryMsg | keywordAndLiteral plus.
	literalMessageComment = beginNSComment, (tokenFromSymbol: #':literalmessage:'), whitespace opt, literalMessage, whitespace opt, endNSComment.

	codeBody = (literalMessageComment | comment | whitespace) star, temporaries opt, statements.

	block = lbracket, blockParameters opt, codeBody, rbracket.

	slotDecl = identifier.

	accessModifier =
		((tokenFromSymbol: #private) |
		 (tokenFromSymbol: #public) |
		 (tokenFromSymbol: #protected)), whitespace.

	slotDef = accessModifier opt, slotDecl,
		(((tokenFromSymbol: #=) | (tokenFromSymbol: #'::=')), expression, dot) opt.

	initExprs = expression starSeparatedOrTerminatedBy: dot.

	unaryMsgPattern = unarySelector.
	binaryMsgPattern = binarySelector, slotDecl.
	keywordMsgPattern = (keyword, slotDecl) plus.
	messagePattern = unaryMsgPattern | binaryMsgPattern | keywordMsgPattern.

	(* Top level productions for classes *)
	transientModifier = (tokenFromSymbol: #transient), whitespace.

	public transientSlotDecl = accessModifier opt, transientModifier, slotDecl,
	          ((tokenFromSymbol: #=) |
	            (tokenFromSymbol: #'::=')
	           ), expression, dot.


      public methodHeader = accessModifier opt, messagePattern.
	public methodDecl = accessModifier opt, messagePattern, equalSign, lparen, codeBody, rparen.

	optionalFactorySection = messagePattern opt, equalSign.

(* Binding the message pattern for the primary factory to the following equal sign is an odd factoring of the grammar designed to work around some ugly problems.

The two would naturally be separated in classPrefix below, e.g.,

 classPrefix = (tokenFromSymbol: #class), identifier, messagePattern opt, equalSign
	              superclassClause opt.

Alas, this doesn't work. If the primary factory signature is omitted, the equal sign and following superclass clause is matched. This eventually fails.  Unlike BNF,  the '|' operator  'cuts' at the first successful branch  rather than evaluating all branches in parallel or backtracking, so the message opt is not retried. We'd have to use a more general and expensive BNF style combinator.

Originally, we split this into two branches - one using a mandatory messagePattern and one with empty (the messagePattern could not simply be dropped, because the arity of the wrapper for each branch would differ).

This solution seems cleaner.
AS YET UNTESTED.
*)

      classReservedWord = tokenFromSymbol: #class.

      classId = identifier.

	classPrefix = classReservedWord, classId, optionalFactorySection, superclassClause opt.

	mixinApplication = classPrefix, inverseMixinOperator, sendExpression.

	classComment = whitespace opt, comment. (* A hack, to preserve comments from a complete class declaration *)
	sideDecl = lparen, classDecl star, transientSlotDecl star, methodDecl star, rparen.
	classSideDecl = colon, lparen, methodDecl star, rparen.
	languageId = identifier.
	classCategory = string opt.

	superclassClause = superclassPrefix opt, unaryMsg, message opt. (* unaryMsg should be identifier. Parser needs refactoring. *)

	outerReceiver = (tokenFromSymbol: #outer), identifier.
	superclassPrefix = outerReceiver |
		(tokenFromSymbol: #self) |
		(tokenFromSymbol: #super).

	public classHeader =
		(accessModifier opt, classReservedWord, classId, messagePattern, equalSign,
		superclassClause opt, lparen, classComment opt,
		slotDecls opt, initExprs,  rparen) |
		(accessModifier opt, classReservedWord, classId, empty, equalSign,
		superclassClause opt, lparen, classComment opt,
		slotDecls opt,  initExprs, rparen).
(* A gross hack to allow for a default constructor pattern.  This should at least be refactored (note the awful use of empty to keep the arity the same for the wrappearr in the parser. Ugh).
It would be nice to just say messagePattern opt]. Alas, because the '|' operator  'cuts' at the first successful branch  rather than evaluating all branches in parallel or backtracking, this won't work. *)

	public classDeclaration = classHeader, sideDecl, classSideDecl opt.

	inheritanceClause = superclassClause.

	instanceInitializer = lparen, classComment opt, slotDecls opt, initExprs, rparen.

	classBody = instanceInitializer, sideDecl, classSideDecl opt.

	mixinAppSuffix = ((tokenFromSymbol: '<:'), inheritanceClause) plus, (dot | classBody).

	mixinSpec = classBody | mixinAppSuffix.

	explicitInheritanceListAndOrBody = inheritanceClause, mixinSpec.

	defaultSuperclassAndBody = classBody.

	inheritanceListAndOrBody = defaultSuperclassAndBody | explicitInheritanceListAndOrBody.

	public classDecl =
		(accessModifier opt, classReservedWord, classId, messagePattern, equalSign, inheritanceListAndOrBody) |
		(accessModifier opt, classReservedWord, classId, empty, equalSign, inheritanceListAndOrBody).

	toplevelClass = classCategory, classDecl.
	compilationUnit = languageId, toplevelClass, eoi.

	public doItExpression = codeBody, eoi.
|) (
_ = (
	^char: "_"
)
stringBody = (
(* As an optimization, we process the body of a string with a dedicated scanning parser.
It should be equivalent to:

	^(self character | self aWhitespaceChar | (self char: """ ) | self twoQuotes) star *)

	^CollectingCommentParser new  termBlock:
		[:input |
		| c = input peek. |
		c isNil
			ifTrue: [false (* let main routine handle end of input *)]
			ifFalse: [c = 39 (* $' asInteger *)
				ifFalse: [false]
				ifTrue: [
					| pos |
					pos: input position.
					input next.
					input peek = 39
						ifTrue: [false]
						ifFalse: [input position: pos. true]]]]
)
) : (
)
class NSCommentParser = CombinatorialParser (
(* As an optimization, we handle comments with a dedicated parser. It should be equivalent to:

beginComment = (char: "("), (char: "*" ).
endComment = (char: "*" ), (char: ")").
metadataTag = (char: $:), id, (char: $:).
any = charBetween: (Character value: 0) and: (Character value: 16r10FFFF).
comment = beginComment,
	metadataTag opt,
	((endComment not, any) | comment) star,
	endComment.

*)
) (
public parse: input <ReadStream> inContext: context ifError: blk = (
	| pos = input position. body = List new. |
	(input atEnd not and: [input next = 40 (* ( *) and: [input atEnd not and: [input next = 42 (* * *)]]]) ifFalse:
		[input position: pos.
		^blk value: '(* expected' value: pos].

	[ | c |
	input atEnd ifTrue:
		[input position: pos.
		^blk value: '(* expected' value: pos].
	c:: input next.
	body add: c.
	c = 40 (* ( *) ifTrue:
		[ | d |
		input atEnd ifTrue:
			[input position: pos.
			^blk value: '(* expected' value: pos].
		d:: input next.
		d = 42 (* * *) ifTrue: [
			| res |
			body removeLast. (* not part of comment body *)
			input position: input position - 2.
			res:: self parse: input inContext: context ifError:
				[:msg :pos2 |
				input position: pos.
				^blk value: '(* expected 2' value: pos].
			1 to: res value size do:
				[:index | body add: (res value runeAt: index)].
		] ifFalse: [
			body add: d.
		]].
	c = 42 (* * *) ifTrue:
		[ | d |
		input atEnd ifTrue:
			[input position: pos.
			^blk value: '(* expected' value: pos].
		d:: input next.
		d = 41 (* ")" *) ifTrue: [
			body removeLast. (* not part of comment body *)
			^Token
				value: (String fromRunes: body)
				start: pos end: input position]
		ifFalse: [
			input position: input position - 1. (* Consider next char as possible end star-paren *)
		]].
	c = nil ifTrue:
		[input position: pos.
		^blk value: '(* expected' value: pos].
	] repeat.
)
) : (
)
public class TypedNS3Grammar = NS3Grammar (
(* A parser for Strongtalk syntax. Adds productions for the Strongtalk type expression sublanguage, and the changes needed to use types in Newsqueak code. *)
|

	arg = tokenFromSymbol: #arg.
	for = tokenFromSymbol: #for.
	generic = tokenFromSymbol: #generic.
	inheritedTypeOf = tokenFromSymbol: #inheritedTypeOf.
	is = tokenFromSymbol: #is.
	mssg = tokenFromSymbol: #message.
	of = tokenFromSymbol: #of.

	receiverType = tokenFromSymbol: #receiverType.
	subtypeOf = tokenFromSymbol: #subtypeOf.
	typeArg = tokenFromSymbol: #typeArg.
	where = tokenFromSymbol: #where.
	returnType = hat, type.

	(* Type Grammar *)

	type = langleBracket, typeExpr, rangleBracket.
	typePrimary = identifier, typeArguments opt.
	typeFactor = typePrimary | blockType | tupleType | parenthesizedTypeExpression.
	parenthesizedTypeExpression = lparen, typeExpr, rparen.
	typeTerm = typeFactor, identifier star.
	typeExpr = typeTerm, ((vbar | semicolon | slash), typeExpr) opt.
	typeArguments = lbracket, (typeExpr plusSeparatedBy: comma), rbracket.
	tupleType = lcurly, (typeExpr starSeparatedBy: dot), rcurly.

 	blockArgType = colon, typeTerm.
	blockReturnType = typeExpr.
	nonEmptyBlockArgList = blockArgType plus, (vbar, blockReturnType) opt.
	blockType = lbracket, (nonEmptyBlockArgList | blockReturnType opt), rbracket.

	(* Type inference *)

	typePattern = langleBracket, typeFormal, (semicolon, typeFormal) star, rangleBracket. (* changed from {} to <> brackets to avoid conflict with tuples *)
	typeFormal = where, identifier, typeParamConstraint opt, is, inferenceClause.
	typeParamConstraint = langleBracket, typeBoundQualifier opt, typeExpr, rangleBracket.
	typeBoundQualifier = subtypeOf | inheritedTypeOf.
	inferenceClause = receiverType
		| (returnType, returnTypeInferenceClause)
		| typeArgInferenceClause
		| (arg, number, (of, msgSelector) opt).
	returnTypeInferenceClause = of, msgSelector.
	msgSelector = symbolConstant, mssg, of, inferenceClause.
	typeArgInferenceClause = typeArg, number, for, generic, symbolConstant, of, inferenceClause.
 |) (
messagePattern = (
	^super messagePattern, returnType opt, typePattern opt. (* Type annotations *)
)
slotDecl = (
	^super slotDecl , type opt.
)
) : (
)
class UnarySelectorParser = CombinatorialParser (
(* In the absence of a separate lexer, an ambiguity arises, which this parser deals with.
 The problem is that when parsing a unary expression that is an argument to a keyword
 message, one expects a unary selector, which is an identifer.  However, it may be that the next
 token is actually a keyword, part of the surrounding message. If we aren't actually tokenizing,
 the prefix of the keyword will be misinterpreted as an identifier and hence as another unary
 message being sent to the argument.

 Using a lexer solves this but introduces a subtlety around the assignment operator :=. In that case
 if there is no whitespace between a variable name and the assignment, the variable name will
 be tokenized as a keyword rather than as an identifier. The Strongtalk parser, DeltaParser, deals
 with this specially. In the longterm, that is probably the way to go. *)
| p |) (
public on: s = (
	p: s.
)
public parse: input inContext: context ifError: blk = (
	| pos |
	pos:: input position.
	p keyword
		parse: input inContext: context
		ifError: [:msg :position |
			input position: pos.
			^p identifier parse: input inContext: context ifError: blk].
	input position: pos.
	blk value: 'should not print' value: pos
)
) : (
)
) : (
)
