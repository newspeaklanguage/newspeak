Newspeak3
'Root'
class VMMirror usingPlatform: platform = (
(*
The VMMirror is the source of all power in the Newspeak system.
It controls access to VM primitives.  A class can have a primitive method installed
by using the #bestowPrimitive:access:named:onClass: method. 

A primitive can also be encapsulated as an instance of
class CapabilityForPrimitive, so that capabilities for individual primitives can be distributed
independently.  Individual primitive capabilities are obtained by calling #capabilityForPrimitive:named:.

The implementation needs to  be done carefully, so as not to rely on elements of other Newspeak libraries that might be based on primitives. These primitives will not be in place when this class is run; on the contrary, it will be asked to bestow them upon the various libraries.
*)
  |
  private Method = platform kernel Method.
  |
) (
class CapabilityForPrimitive number: n <Integer> named: s <Symbol> = (
	|
    public primitiveNumber = n.
	public name = n.
	|
) (
public bestowOnClass: c <Class> = (
  bestowOnClass: c access: #protected
)
public bestowOnClass: c <Class> access: a <Symbol>  = (
  bestowPrimitive: primitiveNumber access: a named: name onClass: c
)
) : (
)
public capabilityForPrimitive: pnum <Integer> named: s <Symbol>  ^ <CapabilityForPrimitive> = (
  ^CapabilityForPrimitive number: pnum named: s
)
private mixinOf: behavior = (
	^self slotOf: behavior at: 4
)
private slotOf: object at: index = (
	(* :literalmessage: primitive: 35 *)
	halt.
)
private methodsOf: behavior put: value = (
	^self slotOf: behavior at: 2 put: value
)
private slotOf: object at: index put: value = (
	(* :literalmessage: primitive: 36 *)
	halt.
)
public bestowPrimitive: n <Integer> access: a <Symbol> named: s <Symbol> onClass: c <Class> = (
  | 
  mixin <AbstractMixin> = mixinOf: c.
  numArgs <Integer> = numberOfArgumentsFor: s.
  hdr = Method headerForAccessModifier: a primitive: n numTemps: 0 numArgs: numArgs.
  method <Method> = Method new header: hdr;  selector: s;  mixin: mixin.
  newMethods <Array[Method]> = mixin _methods copyWith: method. (* does this rely on primitives? *)
  (* Oh yes. Even allocating a new array is a primitive. And so is addition, for
  incrementing the size. And of course reading from and writing to arrays. 
  These are worse because they assume they are in the receiver. How do we manage that?
  The bootstrap will have to set up multiple classes to have primitives built in,
  not just the VMmirror.
  *)
  |
  methodsOf: c put: newMethods. (* c or mixin or both? install? *)
)
) : (
)
