Newspeak3
'NS2PrimordialSoup'
class JSONTesting usingPlatform: platform minitest: minitest json: json_ = (|
private TestContext = minitest TestContext.
private json = json_.
private OrderedMap = platform collections OrderedMap.
|) (
public class DecoderTests = TestContext (
) (
assertOrderedMap: actualMap equals: expectedMap = (
	assert: actualMap size = expectedMap size descriptionBlock:
		['Map equality assertion failed; expected: ',
		 expectedMap printString,
		 ', was: ',
		 actualMap printString].

	assertList: actualMap keys asArray equals: expectedMap keys asArray.
	assertList: actualMap values equals: expectedMap values.
)
parse: input = (
	^json decode: input
)
reject: input = (
	should: [(JSONReader on: input asByteArray) parseValue] signal: Error
)
public testDecodeEmpty = (
	reject: ''.
)
public testDecodeExponential = (
	assert: (parse: '1e-2') equals: 1/100.
	assert: (parse: '1e-1') equals: 1/10.
	assert: (parse: '1e-0') equals: 1.
	assert: (parse: '1e0') equals: 1.
	assert: (parse: '1e+0') equals: 1.
	assert: (parse: '1e1') equals: 10.
	assert: (parse: '1e+1') equals: 10.
	assert: (parse: '1e2') equals: 100.
	assert: (parse: '1e+2') equals: 100.
	reject: '1e'.
	reject: '1e+'.
	reject: '1e-'.

	assert: (parse: '-3e-2') equals: -3/100.
	assert: (parse: '-3e-1') equals: -3/10.
	assert: (parse: '-3e-0') equals: -3.
	assert: (parse: '-3e0') equals: -3.
	assert: (parse: '-3e+0') equals: -3.
	assert: (parse: '-3e1') equals: -30.
	assert: (parse: '-3e+1') equals: -30.
	assert: (parse: '-3e2') equals: -300.
	assert: (parse: '-3e+2') equals: -300.
	reject: '3e'.
	reject: '3e+'.
	reject: '3e-'.
)
public testDecodeFalse = (
	assert: (parse: 'false') equals: false.
	assert: (parse: ' false') equals: false.
	reject: 'FALSE'.
)
public testDecodeFraction = (
	assert: (parse: '1.5') equals: 1.5.
	assert: (parse: ' 1.5') equals: 1.5.
	assert: (parse: '3.0') equals: 3.0.
	assert: (parse: '8.125') equals: 8.125.
	assert: (parse: '-16.125') equals: -16.125.
	reject: '-1.'.
	reject: '-.1'.
)
public testDecodeInteger = (
	assert: (parse: '0') equals: 0.
	assert: (parse: ' 0') equals: 0.
	assert: (parse: '-0') equals: 0.
	assert: (parse: '42') equals: 42.
	assert: (parse: '-42') equals: -42.
	reject: 'ABC'.
	reject: '-'.
)
public testDecodeList = (
	assertList: (parse: '[]') equals: {}.
	assertList: (parse: ' []') equals: {}.
	assertList: (parse: ' [ ]') equals: {}.
	assertList: (parse: '[null]') equals: {nil}.
	assertList: (parse: '[ null ]') equals: {nil}.
	assertList: (parse: '[null,null]') equals: {nil. nil}.
	assertList: (parse: '[ null , null ]') equals: {nil. nil}.
	assertList: (parse: '[null,null,null]') equals: {nil. nil. nil}.
	assertList: (parse: '[ null , null , null ]') equals: {nil. nil. nil}.
	reject: '['.
	reject: ','.
	reject: '[,]'.
	reject: '[null,]'.
	reject: '[null,null,]'.
	reject: '[null,null,null,]'.
	reject: ']'.

	assertList: (parse: '[true, false, null, 1, 1.5, "x"]')
	equals: {true. false. nil. 1. 1.5. 'x'}.
)
public testDecodeMap = (
	assertOrderedMap: (parse: '{}') equals: OrderedMap new.
	assertOrderedMap: (parse: ' {}') equals: OrderedMap new.
	assertOrderedMap: (parse: ' { }') equals: OrderedMap new.
	assertOrderedMap: (parse: '{"x":1}') equals: (OrderedMap new at: 'x' put: 1; yourself).
	assertOrderedMap: (parse: '{ "x" : 1 }') equals: (OrderedMap new at: 'x' put: 1; yourself).
	assertOrderedMap: (parse: '{"x":1,"y":2}') equals: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; yourself).
	assertOrderedMap: (parse: '{ "x" : 1 , "y" : 2 }') equals: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; yourself).
	assertOrderedMap: (parse: '{"x":1,"y":2,"z":3}') equals: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; at: 'z' put: 3; yourself).
	assertOrderedMap: (parse: '{ "x" : 1 , "y" : 2 , "z" : 3 }') equals: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; at: 'z' put: 3; yourself).
	reject: '{'.
	reject: '{,}'.
	reject: '{"x":1,}'.
	reject: '{"x":1,"y":2,}'.
	reject: '{"x":1,"y":2,"z":3,}'.
	reject: '}'.
)
public testDecodeNull = (
	assert: (parse: 'null') equals: nil.
	assert: (parse: ' null') equals: nil.
	reject: 'NULL'.
)
public testDecodeString = (
	assert: (parse: '""') equals: ''.
	assert: (parse: ' ""') equals: ''.
	assert: (parse: '"a"') equals: 'a'.
	assert: (parse: '"abc"') equals: 'abc'.
)
public testDecodeStringEscapes = (
	assert: (parse: '"\""') equals: '"'.
	assert: (parse: '"\\"') equals: '\'.
	assert: (parse: '"\/"') equals: '/'.
	assert: (parse: '"\b"') equals: (String with: 16r08).
	assert: (parse: '"\f"') equals: (String with: 16r0C).
	assert: (parse: '"\n"') equals: (String with: 16r0A).
	assert: (parse: '"\r"') equals: (String with: 16r0D).
	assert: (parse: '"\t"') equals: (String with: 16r09).
)
public testDecodeTrue = (
	assert: (parse: 'true') equals: true.
	assert: (parse: ' true') equals: true.
	reject: 'TRUE'.
)
) : (
TEST_CONTEXT = ()
)
public class EncoderTests = TestContext (
) (
encode: input = (
	^json encode: input
)
public testEncodeFalse = (
	assert: (encode: false) equals: 'false'.
)
public testEncodeFraction = (
	assert: (encode: 1.5) equals: '1.5'.
	assert: (encode: 3.0 asFloat) equals: '3.0'.
	assert: (encode: 8.125) equals: '8.125'.
	assert: (encode: -16.125) equals: '-16.125'.
)
public testEncodeInteger = (
	assert: (encode: 0) equals: '0'.
	assert: (encode: 42) equals: '42'.
	assert: (encode: -42) equals: '-42'.
)
public testEncodeList = (
	assert: (encode: {}) equals: '[]'.
	assert: (encode: {nil}) equals: '[null]'.
	assert: (encode: {nil. nil}) equals: '[null,null]'.
	assert: (encode: {nil. nil. nil}) equals: '[null,null,null]'.
)
public testEncodeMap = (
	assert: (encode: (OrderedMap new)) equals: '{}'.
	assert: (encode: (OrderedMap new at: 'x' put: 1; yourself)) equals: '{"x":1}'.

	assert: (encode: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; yourself)) equals: '{"x":1,"y":2}'.
	assert: (encode: (OrderedMap new at: 'x' put: 1; at: 'y' put: 2; at: 'z' put: 3; yourself)) equals: '{"x":1,"y":2,"z":3}'.

	should: [encode: (OrderedMap new at: 'x' put: Object new; yourself)] signal: Error.
	should: [encode: (OrderedMap new at: true put: 'x'; yourself)] signal: Error.
)
public testEncodeNull = (
	assert: (encode: nil) equals: 'null'.
)
public testEncodeString = (
	assert: (encode: '') equals: '""'.
	assert: (encode: 'a') equals: '"a"'.
	assert: (encode: 'abc') equals: '"abc"'.
)
public testEncodeStringEscapes = (
	assert: (encode: '"') equals: '"\""'.
	assert: (encode: '\') equals: '"\\"'.
	assert: (encode: '/') equals: '"\/"'.
	assert: (encode: (String with: 16r08)) equals: '"\b"'.
	assert: (encode: (String with: 16r0C)) equals: '"\f"'.
	assert: (encode: (String with: 16r0A)) equals: '"\n"'.
	assert: (encode: (String with: 16r0D)) equals: '"\r"'.
	assert: (encode: (String with: 16r09)) equals: '"\t"'.
)
public testEncodeTrue = (
	assert: (encode: true) equals: 'true'.
)
) : (
TEST_CONTEXT = ()
)
) : (
)
