Newspeak3
'MemoryHole'
class VCSSmalltalkSourceMirrors usingPlatform: p vcs: vcs = (
|
private parserLib <BlocklessCombinatorialParsing> = p mirrors parserLib. (* cheatish *)

private ExectuableGrammar = parserLib ExecutableGrammar.
private CombinatorialParser = parserLib CombinatorialParser.
private CommentParser = parserLib CommentParser.

private List = p squeak OrderedCollection.
private WriteStream = p squeak WriteStream.
private Smalltalk = p squeak Smalltalk.
private PackageInfo = p squeak PackageInfo.
private ClassBuilder = p squeak ClassBuilder.

private StringMirror = vcs sourceMirrors StringMirror.
private SourceMirror = vcs sourceMirrors SourceMirror.

private AsciiLetterTable = (0 to: 255) collect: [:ea | (Character value: ea) isLetter].
private parser = SmalltalkParser new.
|) (
class CollectingCommentParser = CommentParser (
(* A special parser used for inputs that need to be rapidly scanned over. It differs from its superclass in that it actually collects the characters it scans, in case they are needed (e.g., for pretty printers).

Ideally,we should not have to do this, but until we do proper optimization by compiling combinators, this will have to suffice. It provides a marked improvement in performance, By using such parsers for comments, whitespace and strings, the overall performance of the Newqueak parser improved by a factor of 2 or so. *)
| comment |) (
public parse: input inContext: context ifError: blk = (
	comment: List new.
	[termBlock value: input] whileFalse: [
		input atEnd ifTrue:
			[^blk value: 'Premature end of input' value: input position - 1].
		comment add: input next].
	^comment
)
) : (
)
public class PredicateTokenParser = CombinatorialParser (
(* Parses a single token matching a given
predicate. *)
| predicate errMsg |) (
public accept: pred errorMsg: err = (
	predicate: pred.
	errMsg: err.
)
public parse: input inContext: context ifError: blk = (
	| token |
	input atEnd ifTrue: [^blk value: errMsg value: input position - 1].
	token:: input next.
	(predicate value: token)
		ifFalse: [^blk value: errMsg value: input position - 1].
	^token.
)
) : (
)
public class STClassSourceMirror = (|
	public category <Symbol>
	public name <Symbol>
	public superclassName <Symbol>
	public instanceVariables <List[Symbol]>
	public classInstanceVariables <List[Symbol]>
	public classPoolVariables <List[Symbol]>
	public sharedPoolVariables <List[Symbol]>

	public classComment <String>
	public format <Symbol>

	public instanceMethods
	public classMethods
|) (
public children = (
	^Array streamContents: [:stm |
	stm nextPut: #category -> (StringMirror new string: category).
	stm nextPut: #name -> (StringMirror new string: name).
	stm nextPut: #superclassName -> (StringMirror new string: superclassName).
	stm nextPut: #instVariables -> (StringMirror new string: instanceVariablesString).
	stm nextPut: #classInstVariables -> (StringMirror new string: classInstanceVariablesString).
	stm nextPutAll: (instanceMethods collect: [:el | #instanceMethods -> el]).
	stm nextPutAll: (classMethods collect: [:el | #classMethods -> el]).
	]
)
public classInstanceVariablesString = (
	^String streamContents: [:stream | classInstanceVariables do: [:var | stream nextPutAll: var; space]].
)
public classPoolVariablesString = (
	^String streamContents: [:stream | classPoolVariables do: [:var | stream nextPutAll: var; space]].
)
public correspondsHash = (
	^name hash
)
public correspondsTo: other = (
	^name = other name
)
installAsToplevelClass = (
	installMirrorsAsToplevelClasses: {self}
)
public installClassOnly = (
	| superclass klass |

	superclass:: superclassName = #nil ifFalse: (* deal with e.g. ImplementationBase's nil superclass *)
					[Smalltalk at: superclassName].

	format = #class ifTrue:
		[klass:: superclassName = #nil (* deal with e.g. ImplementationBase's nil superclass *)
					ifTrue: [ClassBuilder new
								superclass: nil
								subclass: name
								instanceVariableNames: instanceVariablesString
								classVariableNames: classPoolVariablesString
								poolDictionaries: sharedPoolVariablesString
								category: category]
					ifFalse:
						[superclass
							subclass: name
							instanceVariableNames: instanceVariablesString
							classVariableNames: classPoolVariablesString
							poolDictionaries: sharedPoolVariablesString
							category: category]].

	format = #weakclass ifTrue: [klass:: superclass
		weakSubclass: name
		instanceVariableNames: instanceVariablesString
		classVariableNames: classPoolVariablesString
		poolDictionaries: sharedPoolVariablesString
		category: category].

	format = #variableclass ifTrue: [klass:: superclass
		variableSubclass: name
		instanceVariableNames: instanceVariablesString
		classVariableNames: classPoolVariablesString
		poolDictionaries: sharedPoolVariablesString
		category: category].

	format = #variablebyteclass ifTrue: [klass:: superclass
		variableByteSubclass: name
		instanceVariableNames: instanceVariablesString
		classVariableNames: classPoolVariablesString
		poolDictionaries: sharedPoolVariablesString
		category: category].

	format = #variablewordclass ifTrue: [klass:: superclass
		variableWordSubclass: name
		instanceVariableNames: instanceVariablesString
		classVariableNames: classPoolVariablesString
		poolDictionaries: sharedPoolVariablesString
		category: category].

	assert: [klass notNil] message: 'Unknown class format'.

	klass class instanceVariableNames: classInstanceVariablesString.

	klass classComment: classComment.

	^klass
)
public installMethods = (
	| klass |
	klass:: Smalltalk at: name.

	instanceMethods do: [:each | each installInto: klass].
	classMethods do: [:each | each installInto: klass class].

	(* remove (nonextension) methods in image that aren't in this mirror *)

	klass organization categories do: [:cat |
		cat first = "*" ifFalse: [(* Exclude extension methods *)
			(klass organization listAtCategoryNamed: cat) do: [:selector |
				(instanceMethods anySatisfy: [:m | m selector = selector])
					ifFalse: [klass removeSelector: selector]]]].

	klass class organization categories do: [:cat |
		cat first = "*" ifFalse: [(* Exclude extension methods *)
			(klass class organization listAtCategoryNamed: cat) do: [:selector |
				(classMethods anySatisfy: [:m | m selector = selector])
					ifFalse: [klass class removeSelector: selector]]]].
)
public instanceVariablesString = (
	^String streamContents: [:stream | instanceVariables do: [:var | stream nextPutAll: var; space]].
)
public isToplevel = (
	^true
)
public languageIdentifier = (
	^'Smalltalk'
)
public printOn: stm = (
	stm nextPutAll: 'Class:'; nextPutAll: name.
)
sharedPoolVariablesString = (
	^String streamContents: [:stream | sharedPoolVariables do: [:var | stream nextPutAll: var; space]].
)
sortBlock = (
	^[:a :b | a name <= b name]
)
public source = (
	^String streamContents: [:stm | self streamTo: stm]
)
streamMethods: methods to: stream = (
	| categories sortedAssociations |
	categories:: methods groupBy: [:each | each category] having: [:each | true].
	sortedAssociations:: categories associations sort:
		[:a :b | a key name <= b key name].
	sortedAssociations do: [:each |
		stream nextPutAll: each key asString printString. (* printString to escape the single quotes, which some categories have.  include the surronding single quote to make it a string literal *)
		(each value sort: sortBlock) do: [:method |
			stream cr.
			method streamTo: stream
	]].
)
public streamTo: stream = (
	stream nextPut: "'"; nextPutAll: category; nextPut: "'"; cr.

	stream nextPutAll: format, ' ', name , ' = ', superclassName.

	stream nextPutAll: ' ('; cr.

	stream nextPut: """.
	classComment asString encodeWithoutDoubleQuotesOn: stream.
	stream nextPut: """; cr.

	stream nextPutAll: '| "instance variables" '.
	stream nextPutAll: instanceVariablesString.
	stream nextPutAll: ' |';  cr.

	stream nextPutAll: '| "class pool variables" '.
	stream nextPutAll: classPoolVariablesString.
	stream nextPutAll: ' |';  cr.

	stream nextPutAll: '| "shared pool variables" '.
	stream nextPutAll: sharedPoolVariablesString.
	stream nextPutAll: ' |';  cr.

	streamMethods: instanceMethods to: stream.

	stream nextPutAll: ') : ('; cr.

	stream nextPutAll: '| "class instance variables" '.
	stream nextPutAll: classInstanceVariablesString.
	stream nextPutAll: ' |';  cr.

	streamMethods: classMethods to: stream.

	stream nextPut: ")"; cr.
)
) : (
formatOf: klass <Class> = (
	klass isWeak ifTrue: [^#weakclass].
	klass isVariable ifFalse: [^#class].
	klass isPointers ifTrue: [^#variableclass].
	klass isBytes ifTrue: [^#variablebyteclass].
	^#variablewordclass
)
public fromClass: klass <Class> = (
	assert: [klass isMeta not] message: 'Should build class mirror from the nonmeta class'.

	^self new
		category: klass category;
		name: klass name;
		superclassName: klass superclass name;
		instanceVariables: klass instVarNames;
		classInstanceVariables: klass class instVarNames;
		classPoolVariables: klass classVarNames;
		sharedPoolVariables: (klass sharedPools collect: [:ea | ea name]);
		classComment: klass organization classComment asString;
		instanceMethods: (methodsFromClass: klass);
		classMethods: (methodsFromClass: klass class);
		format: (formatOf: klass)
)
public fromClassAst: ast stream: input = (
	^self new
		category: ast category asSymbol;
		name: ast name;
		superclassName: ast superclassName;
		instanceVariables: (ast instanceSide vars collect: [:ea | ea name]);
		classInstanceVariables: (ast classSide vars collect: [:ea | ea name]);
		classPoolVariables: ((ast instanceSide classPoolVars ifNil: [{}])collect: [:ea | ea name]);
		sharedPoolVariables: ((ast instanceSide sharedPoolVars ifNil: [{}]) collect: [:ea | ea name]);
		instanceMethods: (methodsFrom: ast instanceSide stream: input);
		classMethods: (methodsFrom: ast classSide stream: input);
		classComment: ast instanceSide classComment;
		format: ast format
)
public methodsFrom: sideAst stream: input= (

	| getSource meths |

	(* This convolution deals with UTF-8.  The problem is that stream positions
	 are byte positions, /not/ character positions. *)
	getSource:: [:node|
				String streamContents:
					[:s|
					input position: node start - 1.
					[input position < node end] whileTrue:
						[s nextPut: input next]]].

	meths: List new.

sideAst categories do:
		[:catAst |
		catAst methods do:
			[:methAst |
			(meths add: STMethodSourceMirror new)
				methodSource: (getSource value: methAst);
				messagePattern: (getSource value: methAst pattern);
				selector: methAst pattern selector;
				category: catAst name
]
].
	^meths
)
methodsFromClass: klass <Class | Metaclass> = (
	| meths |
	meths: List new.

	klass organization categories do: [:cat |
		cat first = "*" ifFalse: [(* Exclude extension methods *)
		(klass organization listAtCategoryNamed: cat) do: [:sel |

			| pair |
			pair:: methodToMethodDecl: (klass sourceCodeAt: sel ifAbsent: [halt]) asString.

			(meths add: STMethodSourceMirror new)
				methodSource: pair first;
				messagePattern: pair last;
				selector: sel;
				category: cat
		].
		].
	].
	^meths
)
)
public class STExtensionClassSourceMirror = (|
	public name
	public instanceMethods
	public classMethods
|) (
public children = (
	^Array streamContents: [:stm |
	stm nextPut: #name -> (StringMirror new string: name).
	stm nextPutAll: (instanceMethods collect: [:el | #instanceMethods -> el]).
	stm nextPutAll: (classMethods collect: [:el | #classMethods -> el]).
	]
)
public correspondsHash = (
	^name hash
)
public correspondsTo: other = (
	^name = other name
)
public installExtensionsUsing: pkgInfo = (
	| klass |

	klass:: Smalltalk at: name.

	instanceMethods do: [:each | each installInto: klass].
	classMethods do: [:each | each installInto: klass class].

	(pkgInfo extensionMethodsForClass: klass) do: [:mref |
		(instanceMethods anySatisfy: [:m | m selector = mref selector])
			ifFalse: [klass removeSelector: mref selector]].

	(pkgInfo extensionMethodsForClass: klass class) do: [:mref |
		(classMethods anySatisfy: [:m | m selector = mref selector])
			ifFalse: [klass class removeSelector: mref selector]].
)
public printOn: stm = (
	stm nextPutAll: 'ExtendedClass:'; nextPutAll: name
)
streamMethods: methods to: stream = (
	| categories sortedAssociations |
	categories:: methods groupBy: [:each | each category] having: [:each | true].
	sortedAssociations:: categories associations sort:
		[:a :b | a key name <= b key name].
	sortedAssociations do: [:each |
		stream nextPutAll: each key asString printString. (* printString to escape the single quotes, which some categories have.  include the surronding single quote to make it a string literal *)
		(each value sort: [:a :b | a name <= b name]) do: [:method |
			stream cr.
			method streamTo: stream
	]].
)
public streamTo: stream = (
	stream nextPutAll: 'extensions '; nextPutAll: name; nextPutAll: ' = ('; cr.

	streamMethods: instanceMethods to: stream.

	stream nextPutAll: ') : ('; cr.

	streamMethods: classMethods to: stream.

	stream nextPutAll: ')'; cr.
)
) : (
extensionMethodsFor: klass in: pkgInfo = (
	^(pkgInfo extensionMethodsForClass: klass) collect: [:mref |

		| pair |
		pair:: methodToMethodDecl: (klass sourceCodeAt: mref selector ifAbsent: [halt]) asString.

		STMethodSourceMirror new
			methodSource: pair first;
			messagePattern: pair last;
			selector: mref selector;
			category: mref category
	]
)
public forClass: klass inPackage: pkgInfo = (
	^self new
		name: klass name;
		instanceMethods: (extensionMethodsFor: klass in: pkgInfo);
		classMethods: (extensionMethodsFor: klass class in: pkgInfo)
)
public fromClassAst: ast stream: input = (
	^self new
		name: ast name;
		instanceMethods: (STClassSourceMirror methodsFrom: ast instanceSide stream: input);
		classMethods: (STClassSourceMirror methodsFrom: ast classSide stream: input)
)
)
class STMethodSourceMirror = (|
	public category
	public methodSource
	public messagePattern
	public selector
|) (
public accessModifier = (
	^#public
)
public children = (
	^{}
)
public contentsEquals: other = (
	^self methodSource = other methodSource and: [
		self category = other category and: [
			self accessModifier = other accessModifier]]
)
public correspondsHash = (
	^selector hash
)
public correspondsTo: other = (
	^self selector = other selector
)
public installInto: klass = (
	klass
		compile: (methodDeclToMethod: methodSource usingMessagePattern: messagePattern)
		classified: category
		withStamp: 'MemoryHole'
		notifying: nil.
)
public name = (
	^selector
)
public printOn: stm = (
	stm nextPutAll: 'Method:'; nextPutAll: selector
)
public source = (
	^String streamContents: [:stream | streamTo: stream]
)
public streamTo: stream = (
	stream nextPutAll: methodSource.
)
) : (
)
public class STPackageSourceMirror = (|
	public name <Symbol>
	public classes <List[SmalltalkClassSourceMirror]>
	public extendedClasses <List[ExtendedClassSourceMirror]>
|) (
public children = (
	^Array streamContents: [:stm |
		stm nextPut: #name -> (StringMirror new string: name).
		stm nextPutAll: (classes collect: [:el | #classes -> el]).
		stm nextPutAll: (extendedClasses collect: [:el | #extendedClasses -> el]).
	]
)
public filename = (
	^name , '.st'
)
public installAsToplevelClass = (
	installPackage
)
installClass: klass fromRemainingClasses: remainingClasses = (
	remainingClasses remove: klass.

	(klass superclassName = #nil (* deal with e.g. ImplementationBase's nil superclass *)
	or: [Smalltalk includesKey: klass superclassName]) ifFalse: [

		installClass: (remainingClasses detect: [:c | c name = klass superclassName])
		fromRemainingClasses: remainingClasses.
	].

	klass installClassOnly.
)
public installPackage = (
	| pkgInfo remainingClasses |

	pkgInfo:: PackageInfo named: name. (* Cause package to exist *)

	(* Install the shape part of classes *)
	remainingClasses:: List withAll: classes.
	[remainingClasses isEmpty] whileFalse:
		[installClass: remainingClasses first fromRemainingClasses: remainingClasses].

	(* Install methods *)
	classes do: [:each | each installMethods].

	(* Remove classes in image not in source? *)
	((List withAll: pkgInfo classes)
		removeAllSuchThat: [:ea | classes anySatisfy: [:c | c name = ea name]])
		do: [:ea | ('REMOVING ',ea name) out.  ea removeFromSystem].

	(* Extension methods *)
	extendedClasses do: [:each | each installExtensionsUsing: pkgInfo].

	(* Remove leftover extension methods *)
	((pkgInfo extensionClasses collect: [:ea | ea theNonMetaClass]) asSet
		removeAllSuchThat: [:ea | extendedClasses anySatisfy: [:c | c name = ea name]])
		do: [:cls |
			(pkgInfo extensionMethodsForClass: cls)
				do: [:mref | cls removeSelector: mref selector].
			(pkgInfo extensionMethodsForClass: cls class)
				do: [:mref | cls class removeSelector: mref selector].

			cls organization removeEmptyCategories.
			cls class organization removeEmptyCategories.
	].

	(* Call initialize, but only on those clssses that have an initialize method!!.
	 Probably ought to do this in topoloical order... *)
	classes do:
		[:each | | class |
		class:: Smalltalk at: each name.
		(class class includesSelector: #initialize) ifTrue:
			[class initialize]]
)
public isPackageMirror = (
	^true
)
languageIdentifier = (
	^'Smalltalk'
)
public printOn: stm = (
	stm nextPutAll: 'Package:'; nextPutAll: name.
)
public source = (
	^String streamContents: [:stm | self streamTo: stm]
)
public streamTo: stm = (
	stm
		nextPutAll: languageIdentifier; cr;
		nextPutAll: 'package '; nextPutAll: name asString printString; nextPutAll: ' = ('; cr; cr.

	(classes asArray sort: [:a :b | a name <= b name])
		do: [:cls | cls streamTo: stm. stm cr].

	(extendedClasses asArray sort: [:a :b | a name <= b name])
		do: [:cls | cls streamTo: stm. stm cr].

	stm
		nextPutAll: ')'.
)
) : (
public fromPackageAst: ast stream: input = (
	^self new
		name: ast name asSymbol;
		classes: (ast classes collect: [:ea | STClassSourceMirror fromClassAst: ea stream: input]);
		extendedClasses: (ast extendedClasses collect: [:ea | STExtensionClassSourceMirror fromClassAst: ea stream: input])
)
public fromPackageInfo: pkgInfo <PackageInfo> = (
	^self new
		name: pkgInfo name;
		classes: (pkgInfo classes collect: [:ea | STClassSourceMirror fromClass: ea]);
		extendedClasses: ((pkgInfo extensionClasses collect: [:ea | ea theNonMetaClass]) asSet collect: [:ea | STExtensionClassSourceMirror forClass: ea inPackage: pkgInfo]))
public fromStream: input <ReadStream> = (
	^self fromPackageAst: (parser package parseString: input contents) stream: input
)
)
class SmalltalkGrammar = ExectuableGrammar (
(* A grammar for Smalltalk that adds a syntax for class declarations, extension classes, and packages. The production #method (not #methodDecl) corresponds to what you see in a Squeak browser. *)
|

(* tokens *)

whitespace = super whitespace.

colon = self tokenFromChar: ":".
comma = self tokenFromChar: ",".
dollar = self tokenFromChar: "$".
dot = self tokenFromChar: ".".
equalSign = self tokenFromChar: "=".
hat = self tokenFromChar: "^".
lbracket = self tokenFromChar: "[".
lcurly = self tokenFromChar: "{".
lparen = self tokenFromChar: "(".
langleBracket = self tokenFromChar: "<".
pound = self tokenFromChar: "#".
rangleBracket = self tokenFromChar: ">".
rbracket = self tokenFromChar: "]".
rcurly = self tokenFromChar: "}".
rparen = self tokenFromChar: ")".
semicolon = self tokenFromChar: ";".
slash = self tokenFromChar: "/".
vbar = self tokenFromChar: "|".

(* lexicalGrammar *)

digit = self charBetween: "0" and: "9".
digits = digit plus.
extendedDigits = (digit | letter) plus.
radix = digits, (char: "r") wrapper: [:ds :r | ds].
fraction = dot , digits wrapper: [:period :ds | ds].
extendedFraction = dot , extendedDigits wrapper: [:period :ds | ds].
exponent = (char: "e") , (char: "-" ) opt , digits
	wrapper: [:e :sgn :ds | sgn isNil ifTrue: [ds] ifFalse: [(* sgn asString, *) ds]].
decimalNum = (char: "-") opt, digits, fraction opt, exponent opt.
radixNum = radix, (char: "-")  opt, extendedDigits, extendedFraction opt, exponent opt.
num = radixNum | decimalNum.

 (* must distinguish internal use of productions from use as tokens *)
number = tokenFor: self num.
letter = PredicateTokenParser new accept: [:c | isLetter: c] errorMsg: 'letter expected'.

specialCharacter =
	(char: "+" ) | (char: "/" ) |
	(char: "\" ) | (char: "*" ) |
	(char: "~" ) | (char: "<" ) | (char: ">") |
	(char: "=" ) | (char: "@" ) |
	(char: "%" ) | (char: "|" ) |
	(char: "&" ) | (char: "?" ) |
	(char: "!" ) | (char: "," ) | (char: "`").

character = digit | letter | specialCharacter |
	[self char: "[" ] | [self char: "]" ] |
	[self char: "{" ] | [self char: "}" ] | [self char: "(" ] |
	[self char: ")" ] | [self char: "^" ] | [self char: ";" ] | [self char: "$" ] | [self char: "#" ] |
	[self char: ":" ] | [self char: "." ] | [self char: "-" ] | [self char: "_" ] | [self char: "`" ] (* the Smalltalk grammar neglects to add - to characters, or to comments. It does add | [self char: "'" ], but these are both bugs. We intend to support underscores, which Squeak insists on tirning into assignment arrows. However, we do not support these as assignments. At the moment, we do not accept them in identifiers, but this will change in time. *).

id = letter, (letter | digit | (char: "_")) star
	wrapper: [:fst :snd | String fromRunes: {fst}, snd].

public identifier = tokenFor: id.

Char = (char: "$"), (charBetween: (Character value: 0) and: (Character value: 16r10000)).
	(* [self character | [self char: "'" ] | [self char: """" ] | [self char:" " ]]. *)

characterConstant = tokenFor: Char.

twoQuotes = (char: "'" ), (char: "'" ) wrapper: [:q1 :q2 | ''''].

str = (char: "'"), stringBody, (char: "'")
	wrapper: [:oq :es :eq | String fromRunes: es].

string = self tokenFor: self str.

kw = id, (char: ":" ) wrapper: [:i :c | i, ":" asString].

kws = kw plus wrap: [:c | c inject: '' into: [:s :e | s, e]].

public keyword = tokenFor: kw.

sym = str | kws | binSel | id.

symbol = tokenFor: sym.

commentDelimiter = char: """.

beginComment = commentDelimiter.

endComment = commentDelimiter.

comment = beginComment, commentBody, endComment.

binSel = (specialCharacter | (char: "-" )), specialCharacter opt, specialCharacter opt
	wrapper: [:c1 :c2 :c3 |
		(String fromRunes:
			((c1 ifNil: [{}] ifNotNil: [{c1}]) ,
			(c2 ifNil: [{}] ifNotNil: [{c2}]) ,
			(c3 ifNil: [{}] ifNotNil: [{c3}]))) asSymbol].

binarySelector = self tokenFor: self binSel.

assign = (char: ":"), (char: "=") wrapper: [:c :e | #':='].

assignment = tokenFor: assign | (char: "_"). (* Temporary hack *)

(* syntacticGrammar *)

symbolConstant = pound, symbol.

array = (lparen, (number | symbolConstant | symbol | string | characterConstant | arrayConstant | array) star, rparen)
		|
		(* Byte array literal *)
		(lbracket, number star, rbracket).

arrayConstant = pound, array.

tuple = lcurly, (expression starSeparatedOrTerminatedBy: dot), rcurly.

literal = number | symbolConstant | characterConstant | string | arrayConstant | tuple.

variableName = self identifier.

unarySelector = (UnarySelectorParser new on: self). (* the one hack/flaw. See UnarySelector parser for details *)

parenthesizedExpression = lparen, expression, rparen.

primary = variableName | literal | block | parenthesizedExpression.

unaryExpression = primary, unarySelector star.

binaryMsg = binarySelector, unaryExpression.

binaryExpression = unaryExpression, binaryMsg star.

keywordMsg = (keyword, binaryExpression) plus.

keywordExpression = binaryExpression, keywordMsg opt.

cascadeMsg = semicolon, (keywordMsg | binaryMsg | unarySelector).

cascadedMessageExpression = keywordExpression, cascadeMsg star.

assignmentLHS = variableName, assignment.

expression = assignmentLHS star, cascadedMessageExpression.

returnStatement = hat, expression, dot opt.

furtherStatements = dot, statements.

statementSequence = (expression, furtherStatements opt) | furtherStatements.

statements = returnStatement | statementSequence | empty.

blockParameter = colon, variableDecl.

blockParameters = blockParameter plus, vbar.

varDecls = vbar, variableDecl star, vbar.

temporaries = varDecls.

codeBody = temporaries opt, pragma star, statements.

block = (lbracket, blockParameters opt, codeBody, rbracket) | (lbracket, blockParameter star, rbracket).

variableDecl = identifier.

unaryMsgPattern = unarySelector.

binaryMsgPattern = binarySelector, variableDecl.

keywordMsgPattern = (keyword, variableDecl) plus.

messagePattern = unaryMsgPattern | binaryMsgPattern | keywordMsgPattern.

(* Yuck, a pragma can appear before or after |temps| *)
pragma = langleBracket, (unarySelector | (keyword, (literal | variableDecl)) plus), rangleBracket.

methodBody = pragma star, codeBody.

method = messagePattern, methodBody, eoi. (* A method in a browser *)

(* Top level productions for classes *)

methodDecl = messagePattern, equalSign, lparen, methodBody, rparen.

category = string, methodDecl star.

classComment = whitespace, comment. (* A hack, to preserve comments from a complete class declaration *)

classBody = lparen, classComment opt, varDecls opt, varDecls opt, varDecls opt, category star, rparen.

classSideDecl = colon, classBody.

languageId = identifier.

classCategory = string (* opt *).

classFormat = (tokenFromSymbol: #class) | (tokenFromSymbol: #weakclass) | (tokenFromSymbol: #variableclass) | (tokenFromSymbol: #variablebyteclass) | (tokenFromSymbol: #variablewordclass).

classDefinition = classCategory, classFormat, identifier, equalSign, identifier, classBody, classSideDecl opt.

extendedClass = (tokenFromSymbol: #extensions), identifier, equalSign, lparen, category star, rparen, colon, lparen, category star, rparen.

packageName = (* tokenFor: ((letter | digit | (char: "-")) plus wrap: [:chars | (String withAll: chars)] ). *) string.

package = languageId, (tokenFromSymbol: #package), packageName, equalSign, lparen, classDefinition star, extendedClass star, rparen , eoi.
|) (
commentBody = (
(* As an optimization, we process the body of a comment with a dedicated scanning parser.
It should be equivalent to:

 ^(self character | [self aWhitespaceChar] | [self char: "'" ] | [self twoDblQuotes]) star, *)
^CollectingCommentParser new
   termBlock: [:input | | c|
	      c:: input peek.
	      c isNil
	          ifTrue: [false] (* let main routine handle end of input *)
	          ifFalse: [c = 34 (* " *)
	                    ifFalse: [false]
	                    ifTrue: [| pos |
	                             pos:: input position.
	                             input next.
	                             input peek = 34 (* " *) ifTrue: [false] ifFalse: [input position: pos. true]
	                 ]
	         ]
	 ]
)
public parse: input inContext: context ifError: blk = (
	self halt.
)
stringBody = (
(* As an optimization, we process the body of a string with a dedicated scanning parser.
It should be equivalent to:

	^[(self character | [self aWhitespaceChar] | [self char: """" ] | [self twoQuotes]) star *)
^CollectingCommentParser new
   termBlock: [:input | | c|
	      c:: input peek.
	      c isNil
	          ifTrue: [false] (* let main routine handle end of input *)
	          ifFalse: [c = 39 (* ' *)
	                    ifFalse: [false]
	                    ifTrue: [| pos |
	                             pos:: input position.
	                             input next.
	                             input peek = 39 (* ' *) ifTrue: [false] ifFalse: [input position: pos. true]
	                 ]
	         ]
	 ]
)
) : (
)
class SmalltalkParser = SmalltalkGrammar (||
) (
class AST = (|
	public start
	public end
	public cStart
	public cEnd
|) (
public concreteEnd = (
	^cEnd isNil ifTrue: [self end] ifFalse: [cEnd]
)
public concreteEnd: p = (
	self cEnd: p
)
public concreteStart = (
	^cStart isNil ifTrue: [self start] ifFalse: [cStart]
)
public concreteStart: p = (
	self cStart: p
)
) : (
)
class CategoryAST = AST (|
	public name
	public methods
|) (
) : (
)
class ClassAST = AST (|
	public format
	public name
	public superclassName
	public instanceSide
	public classSide
	public category
|) (
public forClass: n super: s instSide: b classSide: cb = (
	self name:n; superclassName: s; instanceSide: b; classSide: cb
)
) : (
)
class MessageAST = AST (|
	public sel
	public args
|) (
public send: aSelector with: arguments = (
	self assert: [aSelector isSymbol] message: ''.
	self assert: [arguments isCollection] message: ''.
	self sel: aSelector; args: arguments
)
) : (
)
class MessagePatternAST = AST (|
	public selector
	public parameters
	public returnType
	public typePattern
|) (
public selector: s parameters: p = (
	self selector: s; parameters: p
)
) : (
)
class MethodAST = AST (|
	public pattern
	public body
	public accessModifier
|) (
public pattern: p body: b accessModifier: v = (
	self pattern: p; body: b;   accessModifier: v
)
) : (
)
class PackageAST = AST (|
	public name
	public classes
	public extendedClasses
|) (
) : (
)
class SideAST = AST (|
	public vars
	public categories
	public classComment
	public classPoolVars
	public sharedPoolVars
|) (
public vars: vs cats: cs = (
	self vars: vs; categories: cs
)
) : (
)
class StringAST = AST (|
	public val
|) (
) : (
)
class VarDeclAST = AST (|
	public name
	public type
|) (
public name: aName type: aType = (
	self name: aName; type: aType
)
) : (
)
binaryMsgPattern = (
^super binaryMsgPattern
	wrapper: [:sel :p |
	     | params |
	       params:: List new add:p; yourself.
	       MessagePatternAST new selector: sel value parameters: params;
	                                    start: sel start; end: p end
	 ].
)
category = (
^super category
	wrapper: [:cn :ms |
	           | end |
	             end:: ms isEmpty ifTrue: [cn end] ifFalse: [ms last end].
	             CategoryAST new name: cn val asSymbol; methods: ms;
	                                  start: cn start; end: end
	 ].)
charsToString: cs = (
^cs inject: '' into: [:s :c | s, c asString].
)
classBody = (
^super classBody
	wrapper: [:lp :cmnt :instVars :classPoolVars :sharedPoolVars :categories :rp |
	     | vs |
	        vs:: instVars isNil ifTrue: [List new] ifFalse: [instVars].
	        SideAST new vars: vs cats: categories;
	                       classComment: cmnt;
	                       start: lp start; end: rp end; classPoolVars: classPoolVars; sharedPoolVars: sharedPoolVars
	 ].
)
classComment = (
^super classComment
  wrapper: [:ws :c | (c at:2)  inject:'' into: [:s :ch | s, ch asString]]
)
classDefinition = (
^super classDefinition
	wrapper: [:cat :format :className :eq :superClassName :instSide :classSide |
	      | klassSide kat |
	        klassSide:: classSide isNil ifTrue: [SideAST new vars: List new cats: List new]
	                                       ifFalse: [classSide].
	        kat:: cat isNil ifTrue: ['Newsqueak-tests'] ifFalse: [cat val].
	        ClassAST new forClass: className value asSymbol
	                         super: superClassName value asSymbol
	                         instSide: instSide
	                         classSide: klassSide;
	                         start: className start;
	                         end: (classSide isNil ifTrue: [instSide end] ifFalse: [classSide end]);
	                         category: kat;
						format: format value.
	 ].
)
classSideDecl = (
^super classSideDecl
   wrapper: [:cn :side | side])
extendedClass = (
	^super extendedClass wrapper: [:extensions :name :eq :lp :instCategories :rp :colon :lp2 :classCategories :rp2 |
		ClassAST new
			name: name value asSymbol;
			instanceSide: (SideAST new categories: instCategories);
			classSide: (SideAST new categories: classCategories)
	]
)
keywordMsgPattern = (
	^super keywordMsgPattern wrap:
		[:kws |
		| sel  params |
		params:: List new.
		sel:: kws inject: '' into:
			[:s :kwp |
			 params add: kwp last.
			 s, kwp first value].
		MessagePatternAST new
			selector: sel asSymbol parameters: params;
			start: kws first first start;
			end: params last end]
)
messagePattern = (
	^super messagePattern wrap:
		[:pt (* :rt :tp *) |
		 | rt tp |
		tp isNil
			ifTrue: [rt isNil ifFalse: [pt end: rt end]]
			ifFalse: [pt end: tp end].
		pt returnType: rt; typePattern: tp]
)
public method = (
^super method
	wrapper: [:msg :cb :ei |
	         MethodAST new pattern: msg
	                            body: cb
	                            accessModifier: #public(*;
	                            start: msg start;
	                            end: cb end;
	                            concreteEnd: cb concreteEnd   *)
	 ].
)
methodDecl = (
	^super methodDecl wrapper:
		[:msg :eq :lp :cb :rp |
		MethodAST new
			pattern: msg
			body: cb
			accessModifier: #public;
			start: msg start;
			end: rp end]
)
public package = (
	^super package wrapper: [:langId :pkg :name :eq :lp :classes :extendedClasses :rp :end |
		PackageAST new
			name: name val asSymbol;
			classes: (classes ifNil: [List new]);
			extendedClasses: (extendedClasses ifNil: [List new])
	]
)
string = (
^super string
   wrap: [:t | StringAST new val: t value; start: t start; end: t end].
)
unaryMsgPattern = (
^super unaryMsgPattern
	wrap: [:sel  |
	         MessagePatternAST new selector: sel sel parameters: List new;
	                                     start: sel start; end: sel end
	 ].
)
unarySelector = (
^super unarySelector
	wrap: [:u |
	   MessageAST new send: u value asSymbol with: List new;
	                                    start: u start; end: u end

	 ].
)
varDecls = (
^super varDecls
	wrapper: [:vb1 :vds :vb2 |
	        vds isEmpty ifFalse: [vds first concreteStart: vb1 start.
	                                 vds last concreteEnd: vb2 end.
	                       ].
	        vds
	 ].
)
variableDecl = (
	^super variableDecl wrap:
		[:n (* :t *) |
		| end t |
		end:: t isNil ifTrue: [n end] ifFalse: [t end].
		VarDeclAST new
			name: n value asSymbol type: t;
			start: n start; end: end]
)
) : (
)
class UnarySelectorParser = CombinatorialParser (
(* In the absence of a separate lexer, an ambiguity arises, which this parser deals with.
 The problem is that when parsing a unary expression that is an argument to a keyword
 message, one expects a unary selector, which is an identifer.  However, it may be that the next
 token is actually a keyword, part of the surrounding message. If we aren't actually tokenizing,
 the prefix of the keyword will be misinterpreted as an identifier and hence as another unary
 message being sent to the argument.

 Using a lexer solves this but introduces a subtlety around the assignment operator :=,. In that case
 if there is no whitespace between a variable name and the assignment, the variable name will
 be tokenized as a keyword rather than as an identifier. The Strongtalk parser, DeltaParser, deals
 with this specially. In the longterm, that is probably the way to go.

   Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)
|
	p
|) (
public on: s = (
	self p: s.
)
public parse: input inContext: context ifError: blk = (
	| pos |
	pos:: input position.
	self p keyword
		parse: input inContext: context
		ifError: [:msg :position |
			input position: pos.
			^self p identifier parse: input inContext: context ifError: blk].
	input position: pos.
	blk value: 'should not print' value: pos
)
) : (
)
public installMirrors: mirrors <Collection[STPackageSourceMirrors]> = (
	mirrors do: [:ea | ea installPackage].
)
isLetter: charCode = (
	(* This is 12 times faster than Character>>isLetter and 6 times faster than Unicode class>>isLetter: *)
	^charCode < 255
		ifTrue: [AsciiLetterTable at: charCode + 1]
		ifFalse: [Unicode isLetter: charCode]
)
methodDeclToMethod: source usingMessagePattern: p = (
	| result |

	assert: [source startsWith: p] message: ''.

	result:: source copyFrom: 1 to: p size.

	result:: result , (source copyFrom: (source indexOf: "(")+1 to: (source lastIndexOf: ")") - 1).

	^result
)
methodToMethodDecl: rawSource = (
| ast output patternEnd end |

ast:: parser method parseString: rawSource
	               ifError: [:msg :pos |
	                          Transcript show: msg; show: ' at position ';
	                                       show: pos printString; show:' ', selector; cr
	              ].
(* determine end of pattern *)
patternEnd:: ast pattern concreteEnd.
(* extract pattern from source and append to output *)
output:: WriteStream on: String new.
ast pattern start to: patternEnd do: [:i | output nextPut: (rawSource at: i)].
output nextPutAll: ' = ('.
(* trim trailing crs... *)
end:: rawSource size.
[end > 1 and: [(rawSource at: end) = Character cr]] whileTrue:
	[end:: end - 1].
(* extract body from source and append to output *)
patternEnd + 1 to: end do: [:i | output nextPut: (rawSource at: i)].
output cr; nextPut: ")".
^{output contents asString . rawSource copyFrom: ast pattern start to: patternEnd}
)
public mirrorForPackage: pkgInfo <PackageInfo> ^<STPackageSourceMirror> = (
	^STPackageSourceMirror fromPackageInfo: pkgInfo
)
public mirrorForStream: stream <ReadStream> ^<STPackageSourceMirror> = (
	^STPackageSourceMirror fromStream: stream
)
) : (
)
