Newspeak3
'Root'
class IntermediatesForPrimordialSoup usingPlatform: p internalKernel: k = (|
private List = p collections List.
private Map = p collections Map.
private Method = k Method.
|) (
public class IntermediateClassDeclaration = (|
public simpleName
public headerSource
public factoryName
public comment
public category
public instanceSide = IntermediateMixin for: self isMeta: false.
public classSide = IntermediateMixin for: self isMeta: true.
public enclosingClass <IntermediateMixin>
public builder <ClassDeclarationBuilder>
public existingMixin
public accessor <IntermediateMethod>
public factory <IntermediateMethod>
public initializers <List[IntermediateMethod]>
|) (
public accessModifier ^<Symbol> = (
	isTopLevel ifTrue: [^#public].
	^accessor accessModifier
)
public addSyntheticSlotsTo: slots = (
	| slot = IntermediateSlotDeclaration new. |
	slot name: (simpleName, '`slot') asSymbol.
	slot isMutable: true.
	slot accessModifier: #private.
	slots add: slot.
)
public isTopLevel = (
	nil = enclosingClass ifFalse: [^false].
	(* No enclosing class computed yet, but might be just be deferred. *)
	nil = existingMixin ifTrue: [^true (* New class declarations are eagerly computed. *)].
	^nil = existingMixin _enclosingMixin
)
) : (
)
public class IntermediateMethod = (|
public method <CompiledMethod>
public debugInfo
public maxStack <Integer>
public maxLocals <Integer>
public argCount <Integer>
public literals <OrderedCollection[Object]>
public bytes <OrderedCollection[Byte]> ::= List new.
public selector <Symbol>
public methodMixin <AbstractMixin>
public source <String>
public primitive ::= 0.
public accessModifier <Symbol>

public category
public isSynthetic ::= false.
public builder
|) (
public bci ^<Integer> = (
	^bytes size + 1
)
public byte: b <Integer> = (
	assert: [0 <= b and: [b <= 255]] message: 'Bytecode out of range'.
	bytes add: b
)
public byteAt: index <Integer> ^<Integer> = (
	^bytes at: index
)
public byteAt: index <Integer> put: datum <Integer> = (
	bytes at: index put: datum
)
public compiledMethod ^<CompiledMethod> = (
	| bc |
	nil = method ifFalse: [^method].

	assert: [argCount <= maxLocals] message: ''.

	method:: Method new.
	method header:
		(Method
			headerForAccessModifier: accessModifier
			primitive: primitive
			numTemps: maxLocals
			numArgs: argCount).

	method literals: literals asArray.

	bc:: ByteArray new: bytes size.
	1 to: bytes size do: [:index | bc at: index put: (bytes at: index)].
	method bytecode: bc.
	method mixin: methodMixin.
	method selector: selector.

	isSynthetic
		ifTrue:
			[method metadata: nil]
		ifFalse:
			[assert: [source isKindOfString] message: 'Missing source'.
			 method metadata: source].

	literals:: nil.
	bytes:: nil.

	^method
)
public name = (
	^selector
)
public simpleName = (
	^selector
)
) : (
)
public class IntermediateMixin for: d isMeta: m = (|
public declaration <IntermediateClassDeclaration> = d.
public isMeta <Boolean> = m.
public slots <List[IntermediateSlotDeclaration]> ::= List new.
public methods <List[IntermediateMethod]> = List new.
public nestedClasses <List[IntermediateClassDeclaration]> = List new.
public builder <MixinBuilder>
|) (
public assembleMethods = (
	| assembledMethods = List new. |
	assembledMethods addAll: methods.
	assembleSlots do: [:slot | slot addSyntheticMethodsTo: assembledMethods].
	nestedClasses do: [:nestedClass | assembledMethods add: nestedClass accessor].
	isMeta
		ifTrue: [assembledMethods add: declaration factory]
		ifFalse: [assembledMethods addAll: declaration initializers].
	^assembledMethods
)
public assembleSlots = (
	| assembledSlots = List new. |
	assembledSlots addAll: slots.
	nestedClasses do: [:nestedClass | nestedClass addSyntheticSlotsTo: assembledSlots].
	^assembledSlots
)
public checkNameConflictsForFactory: selector <Symbol> = (
	assert: [isMeta] message: ''.
	methods do:
		[:method |
		method selector = selector ifTrue:
			[^Error signal: 'Class already has method named ', selector]].
)
public checkNameConflictsForMethod: selector <Symbol> = (
	nestedClasses do:
		[:nestedClass |
		nestedClass simpleName = selector ifTrue:
			[^Error signal: 'Class already has nested class named ', selector]].
	slots do:
		[:slot |
		slot name = selector ifTrue:
			[^Error signal: 'Class already has slot named ', selector].
		(slot isMutable and: [(slot name, ':') = selector]) ifTrue:
			[^Error signal: 'Class already has mutable slot named ', selector]].
	isMeta ifTrue:
		[declaration factoryName = selector ifTrue:
			[^Error signal: 'Class already has primary factory named ', selector]].
)
public checkNameConflictsForNestedClass: klassName <Symbol> = (
	methods do:
		[:method |
		method isSynthetic ifFalse:
			[method selector = klassName ifTrue:
				[^Error signal: 'Class already has method named ', klassName]]].
	slots do:
		[:slot |
		slot name = klassName ifTrue:
			[^Error signal: 'Class already has slot named ', klassName]].
)
public checkNameConflictsForSlot: slotName <Symbol> mutable: isMutable <Boolean> = (
	nestedClasses do:
		[:nestedClass |
		nestedClass simpleName = slotName ifTrue:
			[^Error signal: 'Class already has nested class named ', slotName]].
	methods do:
		[:method |
		method selector = slotName ifTrue:
			[^Error signal: 'Class already has method named ', slotName]].
	isMutable ifFalse: [^self].
	methods do:
		[:method |
		method selector = (slotName, ':') ifTrue:
			[^Error signal: 'Class already has method named ', method selector]].
)
) : (
)
public class IntermediateSlotDeclaration = (|
public name
public isMutable
public accessModifier
|) (
public addSyntheticMethodsTo: methods = (
	| index = 1. |
	methods add: (generateInitializerForSlot: index).
	methods add: (generateGetterForSlot: index).
	isMutable ifTrue: [methods add: (generateSetterForSlot: index)].
)
public generateGetterForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: accessModifier.
	method method: (Method newGetterForSlot: name at: index accessModifier: accessModifier).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
public generateInitializerForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: #private.
	method method: (Method newInitializerForSlot: name at: index).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
public generateSetterForSlot: index <Integer> ^<IntermediateMethod> = (
	| method = IntermediateMethod new. |
	method accessModifier: accessModifier.
	method method: (Method newSetterForSlot: name at: index accessModifier: accessModifier).
	method selector: method method selector.
	method isSynthetic: true.
	^method
)
public simpleName = (
	^name
)
) : (
)
public class IntermediateTransientSlot = () (
) : (
)
) : (
)
