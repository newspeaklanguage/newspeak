Newspeak3
'HopscotchIDE'
class WorkspaceManager usingPlatform: p <Platform> ide: ide <HopscotchIDE> = (
(*
Workspaces allow convenient live code evaluation in the Newspeak IDE. They provide access an IDE namespace,
unconstrained by the scope of a single module.

Copyright Google Inc. 2012 - 2017.
*)
|
	private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
	private ClassDeclarationMirror = p mirrors ClassDeclarationMirror.
	private ObjectMirror = p mirrors ObjectMirror.

	private Map = p collections Map.
	private List = p collections List.

	private Color = p graphics Color.
	private Gradient = p brazil plumbing Gradient.

	private Presenter = p hopscotch core Presenter.
	private Subject = p hopscotch core Subject.
	private TextEditorFragment = p hopscotch fragments TextEditorFragment.

	private CodeEditorFragment = ide tools CodeEditorFragment.
	private ProgrammingPresenter = ide tools ProgrammingPresenter.
	private DefinitionListPresenter = ide tools DefinitionListPresenter.
	private ExceptionalResultPresenter = ide inspection ExceptionalResultPresenter.
	private ObjectSubject = ide inspection ObjectSubject.
	private MethodGroupSubject = ide browsingNS MethodGroupSubject.
	private ExemplarMethodGroupSubject = ide browsingNS ExemplarMethodGroupSubject.
	private SlotGroupSubject = ide browsingNS SlotGroupSubject.
	private Root = ide namespacing Root.
	private 	NS3Colorizer = ide newspeakColorization NS3BrowserColorizer.

	private cachedPlatform = p.
	private cachedIde = ide.
	private manifestForSqueak = ide namespacing manifestForSqueak.

	(* module state *)
	private workspaces <Map[Symbol, Workspace]> = List new.
	private workspaceCounter <Integer> ::= 0.
|) (
class AllWorkspacesPresenter onSubject: s = DefinitionListPresenter onSubject: s (
(* This is the top-level presenter displayed when following the Workspaces link from the home page. It displays a list of WorkspacePresenters on all existing workspaces. *)
) (
contentPresenters ^ <Collection[Presenter]> = (
	^subject allWorkspaces collect: [:ws | expandableLineForWorkspace: ws]
)
definition = (
	^column: {
		minorHeadingBlock: (
			row: {
				label: 'Workspaces' asText allBold.
				largeBlank.
				addButtonWithAction: [respondToAddWorkspace].
				filler.
				expandButtonWithAction: [expandAll].
				blank: 3.
				collapseButtonWithAction: [collapseAll].
				blank: 3.
				dropDownMenu: [workspaceListMenu]
				}
			).
		mediumBlank.
		super definition.
		mediumBlank.
	}
)
expandableLineForWorkspace: ws <Workspace> = (
	| toggle |
	toggle::
		collapsed: [workspaceRowFor: ws]
		expanded: [
			(WorkspaceSubject onModel: ws) presenter]
		initiallyExpanded: workspaces size = 1.
	toggle onUserToggled: [toggle requestVisibility].
	^toggle
)
presenterRequestsWorkspaceDeletion: workspace <Workspace> = (
	subject deleteWorkspace: workspace.
	refresh.
)
respondToAddWorkspace = (
	subject addWorkspace.
	refresh.
)
respondToDeleteWorkspace: ws <Workspace> = (
	subject deleteWorkspace: ws.
	refresh.
)
workspaceListMenu = (
	^menuWithLabelsAndActions: {
		'Inspect Presenter' -> [respondToInspectPresenter].
		}
)
workspaceMenuFor: ws <Workspace> = (
	^menuWithLabelsAndActions: {
		('Delete workspace ', ws class name) -> [respondToDeleteWorkspace: ws]
		}
)
workspaceRowFor: ws <Workspace> = (
	^row: {
		link: ws printString
			action: [ | s = WorkspaceSubject onModel: ws. |
				enterSubject: s.
	 ]
			dragSubject: [WorkspaceSubject onModel: ws]
			withImage: nil.
		filler.
		dropDownMenu: [workspaceMenuFor: ws].
	}
)
) : (
)
public class AllWorkspacesSubject onModel: dontCare = Subject onModel: dontCare (
(* Subject for the list of all workspaces. It is responsible for creating and deleting workspace classes and instances. *)
) (
public = anotherSubject ^<Boolean> = (
	(* All workspace subjects are considered the same so that clicking the Workspaces link on the home page always takes us to the same page instead of multiplying them. *)
	^self class = anotherSubject class
)
public addWorkspace = (
	| ws <Workspace> |
	ws:: (defineClass: newWorkspaceClassDefinition) new.
	ws workspaceText: defaultWorkspaceText.
	workspaces add: ws.
)
public allWorkspaces ^ <Collection[Workspace]> = (
	(* Ensure there is always a workspace to work with. *)
	workspaces isEmpty ifTrue: [addWorkspace].
	^workspaces
)
public createPresenter ^ <AllWorkspacesPresenter> = (
	^AllWorkspacesPresenter onSubject: self
)
defineClass: definitionString <String> ^<Class> = (
	| builder mixin klass |
	builder:: ClassDeclarationBuilder fromSource: definitionString.
	mixin:: builder install reflectee.
	klass:: mixin apply: Workspace withName: builder name.
	^klass
)
public deleteWorkspace: ws <Workspace> = (
	workspaces remove: ws.
)
public hash ^<Integer> = (
	^self class hash
)
newWorkspaceClassDefinition ^<String> = (
	(* Produce definition source for a new workspace class. The class should include a slot named workspaceText. *)
	| wsNumber <String> |
	wsNumber:: currentWorkspaceNumberString.
	^'class Workspace_', wsNumber, ' = Workspace (
(*This is a workspace class automatically generated by the IDE. It has a single instance, workspace number ', wsNumber, '. You may add methods or slots at your convenience.*)
) ()'
)
public title ^<String> = (
	^'Workspaces'
)
) : (
public new = (
(* An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. *)
	^onModel: nil
)
)
public class Workspace = (
(* The superclass of workspaces. *)
|
public workspaceText
|) (
public actors = (^platform actors)
public aliens = (^platform aliens)
public applicationsOf: mixin = (
	^mixin isMeta
		ifFalse: [mixin applications asArray]
		ifTrue: [mixin instanceMixin applications asArray collect: [:ea | ea theMetaClass]].
)
public behaviors = (
	unimplemented
)
public brazil = (^platform brazil)
public browse: classMixinMethodOrSelector = (
	unimplemented
)
public class = (
	^super class
)
public classes = (
	unimplemented
)
public collections = (^platform collections)
public copy: object = (
	| string = object asString. |
	squeak Clipboard clipboardText: string.
	^string
)
public debug: block = (
	| process context |
	process:: block newProcess.
	process step. (* Activate termination block. *)
	process step. (* Activate argument block *)
	process stepToSendOrReturn.
	context:: process suspendedContext.
	ide finalizer debug: process context: context title: 'Debug-It'
)
protected doesNotUnderstand: message = (
	^Root
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
public files = (^platform files)
public findInSource: stringOrRegex = (
	stringOrRegex isString ifFalse: [unimplemented].
	^methods select: [:method | method getSource includesSubString: stringOrRegex].
)
public graphics = (^platform graphics)
public heapProfile = (
	^(squeak SpaceTally new systemWideSpaceTally)
		asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]
)
public hopscotch = (^platform hopscotch)
public ide = (
	^cachedIde yourself
)
public implementorsOf: selector = (
)
public instancesOf: classOrMixin = (
	classOrMixin isMixin ifTrue: [
		^Array streamContents:
			[:stm | (applicationsOf: classOrMixin) do:
				[:app | stm nextPutAll: (instancesOf: app)]]].
	^Array streamContents:
		[:stm | classOrMixin allInstancesDo: [:instance | stm nextPut: instance]].
)
public kernel = (^platform kernel)
public manifest = (
	^manifestForSqueak
)
public metaclasses = (
)
public methods = (
)
public mirrors = (^platform mirrors)
public pathTo: object = (
	^(squeak PointerFinder new goal: object; search; instVarNamed: 'objectList' ) asArray
)
public platform = (
	^cachedPlatform yourself
)
public pointersTo: object = (
	^(object inboundPointersExcluding: {}) asArray
)
public profile: block = (
	| MessageTally node result |
	MessageTally:: platform squeak MessageTally.
	node:: MessageTally new.
	node reportOtherProcesses: false.
	result:: node spyEvery: MessageTally defaultPollPeriod on: block.
	(* Should return the MessageTally node and have a special inspector view. *)
	^String streamContents: [:stm | node report: stm]
)
public sendersOf: selector = (
)
public simulate: block = (
	^platform squeak ContextPart runSimulated: block
)
public squeak = (^platform squeak)
public streams = (^platform streams)
public subinstancesOf: classOrMixin = (
	classOrMixin isMixin ifTrue: [
		^Array streamContents:
			[:stm | (applicationsOf: classOrMixin) do:
				[:app | stm nextPutAll: (subinstancesOf: app)]]].
	^Array streamContents:
		[:stm |
		classOrMixin allInstancesDo: [:instance | stm nextPut: instance].
		classOrMixin subclasses do:
			[:subclass | subclass allInstancesDo: [:instance | stm nextPut: instance]]].
)
public time = (^platform time)
) : (
)
class WorkspacePresenter onSubject: s = ProgrammingPresenter onSubject: s (
(* A presenter for an individual workspace. A cross between an inspector and a browser with access to both instance and class information. *)
|
	editor <TextEditorFragment>
	results <ColumnComposer>
|) (
addExceptionalResultPresenterFor: exception <Exception> in: thread <NewspeakDebugging ThreadSubject> = (
	results addFirst:
		(collapsed: [ExceptionalResultPresenter on: exception in: thread]
		expanded: [buildExceptionDetails: exception in: thread])
)
addResultPresenterOn: result <Object> = (
	results addFirst:
		(resultFragmentOn: (ObjectSubject onModel: result)).
)
buildExceptionDetails: exception <Exception> in: thread <NewspeakDebugging ThreadSubject> = (
	^column: {
		ExceptionalResultPresenter on: exception in: thread.
		(ObjectSubject onModel: (ObjectMirror reflecting: exception)) presenter.
	}
)
definition = (
	^column: {
		majorHeadingBlock: definitionForHeader.
		row: {
			frameLine.
			elastic: (column: {
				minorHeadingBlock:
					(row: {
						label: 'Evaluation Results'.
						filler.
						link: '[clear]' action: [respondToDiscardResults].
					}).
				results:: column: {}.
				sectionLabelled: 'Methods' presenting: subject methodsSubject.
			}).
			frameLine.
		}.
		frameLine.
		smallBlank.
	}
)
definitionForHeader = (
	^column: {
		row: {
			elastic: evaluationEditor.
			smallBlank.
			column: {
				button: 'Evaluate' action: [respondToEvaluate].
				filler.
				row: {
					filler.
					dropDownMenu: [workspaceMenu]
				}
			}
		}.
	}
)
evaluationEditor = (
	editor:: CodeEditorFragment new.
	editor
		colorizerBlock: [:text | subject colorizeSource: text];
		changeResponse: [subject saveText: editor editedText];
		acceptResponse: [respondToEvaluate];
		text: (subject savedText ifNil: [initialText]).
	^editor
)
frameColor = (
	^Color h: 240 s: 0.15 v: 0.74
)
frameLine = (
	^((row: {}) color: frameColor) width: 1
)
initialText = (
	^'

'
)
majorHeadingColor = (
	^Gradient
		from: (Color h: 240 s: 0.1 v: 0.8)
		to: frameColor
)
respondToBrowseClass = (
	browseClass: subject workspaceClass
)
respondToDelete = (
	sendUp presenterRequestsWorkspaceDeletion: subject model
)
respondToDiscardResults = (
	results children size timesRepeat: [results removeAt: 1]
)
respondToEvaluate = (
	| result <ObjectMirror> |
	editor removeMessages.
	result::	(ObjectSubject onModel: subject modelMirror)
		evaluate:
			editor maybeSelectCurrentLine
		ifCompilerError:
			[:message |
			^editor addMessage: message]
		ifError:
			[:thread :exception |
			^addExceptionalResultPresenterFor: exception in: thread].
	addResultPresenterOn: result.
)
resultFragmentOn: result <ObjectSubject> ^ <Fragment> = (
	^collapsed: [link: result title action: [enterSubject: result]]
		expanded: [result presenter]
)
sectionLabelled: title <String> presenting: groupSubject <MirrorGroupSubject> = (
	| groupPresenter |
	^column: {
		minorHeadingBlock: (
			row: {
				label: title.
				largeBlank.
				addButtonWithAction: [groupPresenter addNewItemTemplate].
				filler.
				expandButtonWithAction: [groupPresenter expandAll].
				blank: 3.
				collapseButtonWithAction: [groupPresenter collapseAll].
				}
			).
		row: {
			elastic: (groupPresenter:: groupSubject presenter).
			smallBlank.
		}.
	}
)
workspaceMenu = (
	^menuWithLabelsAndActions: {
		'Go to Class' -> [respondToBrowseClass].
		#separator.
		'Delete this Workspace' -> [respondToDelete].
		'Inspect Presenter' -> [respondToInspectPresenter].
	}
)
) : (
)
class WorkspaceSubject onModel: workspaceInstance = Subject onModel: workspaceInstance (
(* The subject of a WorkspacePresenter. Mostly responsible for suppying various mirrors on the workspace instance itself and on its class. *)
) (
public = another = (
	^class = another class and: [workspace = another workspace ]
)
public colorizeSource: sourceText <String | Text> ^<Text> = (
	^NS3Colorizer new
		parseText: sourceText asString
		fromClass: workspaceClass mixin
		usingSelector: #codeBody
)
public createPresenter = (
	^WorkspacePresenter onSubject: self
)
public hash = (
	^model hash
)
public methodsSubject ^<MethodGroupSubject> = (
	(* Return a subject presenting the methods of the workspace class. *)
	(cachedIde settings useExemplarPresenters) ifTrue:
		[^ExemplarMethodGroupSubject onModel: modelClassMirror instanceSide methods].
	^MethodGroupSubject onModel: modelClassMirror instanceSide methods
)
modelClassMirror ^<ClassDeclarationMirror> = (
	(* Return a mirror on the workspace class. *)
	^(ObjectMirror reflecting: model) getClass mixin declaration
)
public modelMirror ^<ObjectMirror> = (
	(* Return a mirror on the workspace object. *)
	^cachedIde tools ObjectMirror reflecting: model
)
public saveText: text <String> = (
	(* Save the provided text in the workspace instance. We do that on every change in the presenter's text editor. *)
	model workspaceText: text
)
public savedText ^<String> = (
	(* Return the text saved in the workspace object. *)
	^model workspaceText
)
public slotsSubject ^<SlotGroupSubject> = (
	(* Return a mirror on the slots of the workspace class. *)
	^SlotGroupSubject onModel: modelClassMirror instanceSide slots
)
public title = (
	^workspaceClass name
)
public workspace = (
	(* Return the raw workspace class metaobject. *)
	^model
)
public workspaceClass = (
	(* Return the raw workspace class metaobject. *)
	^(ObjectMirror reflecting: model) getClass reflectee
)
) : (
)
currentWorkspaceNumberString ^ <String> = (
	workspaceCounter:: workspaceCounter + 1.
	^workspaceCounter printString
)
defaultWorkspaceText = (
^'(* Workspaces provide a place to store temporary expressions and values, access to the system scope, and a number of utility functions (see examples below). Workspaces are available in expressions evaluated in debuggers and inspectors via the name `, allowing you to bypass Newspeak''s modularity at development time and access values you forgot to import. You can evaluate the current selection (or the current line if the selection is empty) by pressing [Evaluate]. *)

platform.
ide.

profile: [25 benchFib]. (* Run a block with a sampling profiler. *)
debug: [nil willNotUnderstand]. (* Start a debugger paused at the beginning of a block. *)
simulate: [25 benchFib]. (* Run a block with the execution simulator used by the debugger. *)

pointersTo: platform. (* Find all objects directly referencing the argument. *)
pathTo: platform. (* Find a path preventing the argument from being garbage collected. *)

copy: ''Hello, Pasty New World!'' (* Place the argument on the system clipboard. *)'
)
public workspaceScope = (
	^Map new
		at: #_ put: (ObjectMirror reflecting: Workspace new);
		yourself
)
) : (
)
