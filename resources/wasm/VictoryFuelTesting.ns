Newspeak3
'VictoryFuel'
class VictoryFuelTesting usingPlatform: p victoryFuel: vf minitest: m icons: i bootstrapRuntime: br = (|
private WeakArray = p collections WeakArray.
private icons = i.
private bootstrapRuntime = br.
private globals = p squeak Smalltalk globals.

private Serializer = vf Serializer.
private Deserializer = vf Deserializer.

private TestContext = m TestContext.
|) (
public class VFTests = TestContext () (
roundTrip: object = (
	|
	bytes
	serializer
	deserializer
	|
	bytes:: ByteArray new writeStream.
	serializer:: Serializer over: bytes withGlobals: globals.
	serializer serialize: object.
	deserializer:: Deserializer over: bytes contents readStream withGlobals: globals.
	^deserializer deserialize.
)
public testArrays = (
	| x |
	assert: (roundTrip: {}) equals: {}.
	assert: (roundTrip: {true. false. nil}) equals: {true. false. nil}.
	assert: (roundTrip: {{}. {}}) equals: {{}. {}}.

	x:: Array new: 1.
	x at: 1 put: x.
	x:: roundTrip: x.
	assert: [(x at: 1) == x].
)
public testBootstrapRuntime = (
	| br2 = roundTrip: bootstrapRuntime. |
	assert: [br2 printString startsWith: 'BootstrapRuntimeForSqueak'].
)
public testByteArrays = (
	assert: (roundTrip: ByteArray new) equals: ByteArray new.
	assert: (roundTrip: 'foobar' asByteArray) equals: 'foobar' asByteArray.
)
public testCharacters = (
	|
	NUL = Character value: 0.
	snowflake = Character codePoint: 16r2744.
	|
	assert: (roundTrip: "a") equals: "a".
	assert: (roundTrip: NUL) equals: NUL.
	assert: (roundTrip: snowflake) equals: snowflake.
)
public testCompiledMethods = (
	| x |
	x:: Array compiledMethodAt: #printOn:.
	assert: (roundTrip: x) equals: x.
)
public testFloats = (
	assert: (roundTrip: Float pi) equals: Float pi.
	assert: (roundTrip: Float infinity) equals: Float infinity.
	assert: (roundTrip: Float epsilon) equals: Float epsilon.
)
public testForms = (
	(* Form equality does an identity check. *)
	icons do: [:icon | assert: (roundTrip: icon) bits equals: icon bits].
)
public testLargeNegativeIntegers = (
	assert: (roundTrip: -1 << 31) equals: -1 << 31.
	assert: (roundTrip: -1 << 32) equals: -1 << 32.
	assert: (roundTrip: -1 << 33) equals: -1 << 33.

	assert: (roundTrip: -1 << 63) equals: -1 << 63.
	assert: (roundTrip: -1 << 64) equals: -1 << 64.
	assert: (roundTrip: -1 << 65) equals: -1 << 65.
)
public testLargePositiveIntegers = (
	assert: (roundTrip: 1 << 31) equals: 1 << 31.
	assert: (roundTrip: 1 << 32) equals: 1 << 32.
	assert: (roundTrip: 1 << 33) equals: 1 << 33.

	assert: (roundTrip: 1 << 63) equals: 1 << 63.
	assert: (roundTrip: 1 << 64) equals: 1 << 64.
	assert: (roundTrip: 1 << 65) equals: 1 << 65.
)
public testOddballs = (
	assert: (roundTrip: nil) equals: nil.
	assert: (roundTrip: false) equals: false.
	assert: (roundTrip: true) equals: true.
)
public testPoints = (
	assert: (roundTrip: 3@4) equals: 3@4.
)
public testSmallIntegers = (
	assert: (roundTrip: 0) equals: 0.

	assert: (roundTrip: 16r7FFF) equals: 16r7FFF.
	assert: (roundTrip: -32768) equals: -32768. (* -16r8000 *)

	assert: (roundTrip: 16r3FFFFFFF) equals: 16r3FFFFFFF.
	assert: (roundTrip: -1073741824) equals: -1073741824. (* -16r40000000 *)
)
public testSymbols = (
	| a b |
	a:: #foobar.
	b:: roundTrip: a.
	assert: [a == b]. (* Identical *)
)
public testWeakArrays = (
	| x |
	assert: (roundTrip: WeakArray new) equals: WeakArray new.

	x:: WeakArray new: 1.
	x at: 1 put: x.
	x:: roundTrip: x.
	assert: [(x at: 1) == x].

	x:: WeakArray new: 1.
	x at: 1 put: 'Otherwise unreferenced'.
	x:: roundTrip: x.
	assert: [(x at: 1) == nil].

	x:: Array new: 2.
	x at: 1 put: 'Also strongly referenced'.
	x at: 2 put: (WeakArray new: 1).
	(x at: 2) at: 1 put: (x at: 1).
	x:: roundTrip: x.
	assert: [(x at: 1) == ((x at: 2) at: 1)].
)
public testWideSymbols = (
	|
	snowflake = (Character codePoint: 16r2744) asSymbol.
	snowflake2 = roundTrip: snowflake.
	|
	assert: [snowflake == snowflake2]. (* Identical *)
)
) : (
TEST_CONTEXT = ()
)
) : (
)
