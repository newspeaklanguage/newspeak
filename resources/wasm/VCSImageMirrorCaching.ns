Newspeak3
'MemoryHole'
class VCSImageMirrorCaching usingPlatform: platform = (
(* Keeps track of mirrors corresponding to classes in image and removes them from the cache when corresponding classes change in the image.

Any changes that are loaded by the new version control cause the top-level classes that are affected by the change to be reloaded. As long as we're still using the old compiler, loading a top-level class happens incrementally. As a result, classes that are being loaded may be inconsistent. Reloading the class that removes mirrors for classes that are changed then causes problems.

By keeping this code in a separate top-level class we reduce the number of times it has to be changed.

Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. *)
|

private Map = platform squeak Dictionary.
private SystemChangeNotifier = platform squeak SystemChangeNotifier.
private PackageOrganizer = platform squeak PackageOrganizer.
private updatesFromMirrors = platform mirrors channelForMemoryHole.
|) (
public class ImageMirrorCache = (|
	classNameToMirrorCache = Map new.
	stringToMirrorCache = Map new.
	outlet
|) (
public at: key ifAbsentPut: block = (
	^classNameToMirrorCache at: key ifAbsentPut: block
)
resetMirrorOfClass: aClass = (
	| mirror name |
	nil = aClass ifTrue: [^self].

	name:: aClass theNonMetaClass mixin definingModule name , '.ns'.
	classNameToMirrorCache removeKey: name ifAbsent: [].

	name:: (PackageOrganizer default packageOfClass: aClass ifNone: [^self])
		name , '.st'.
	classNameToMirrorCache removeKey: name ifAbsent: [].
)
public start = (
	outlet:: updatesFromMirrors => [:mixin | resetMirrorOfClass: mixin].
	SystemChangeNotifier uniqueInstance
		notify: self
		ofAllSystemChangesUsing: #systemChangeEvent:
)
public stop = (
	updatesFromMirrors detach: outlet.
	outlet:: nil.
	SystemChangeNotifier uniqueInstance noMoreNotificationsFor: self.
)
public stringToMirrorCacheForProduction: production = (
	^stringToMirrorCache
		at: production
		ifAbsentPut: [Map new]
)
public systemChangeEvent: event = (
	event itemKind = SystemChangeNotifier classKind ifTrue: [
		resetMirrorOfClass: event item].
	event itemKind = SystemChangeNotifier methodKind ifTrue: [
		resetMirrorOfClass: event item methodClass]
)
public void = (
	classNameToMirrorCache keysAndValuesRemove: [:k :v| true].
	stringToMirrorCache keysAndValuesRemove: [:k :v| true].
)
) : (
)
) : (
)
