Newspeak3
'Root'
class JSForPrimordialSoup usingPlatform: platform = (
	|
	public undefined = Alien withIndex: 0.
	public global = Alien withIndex: 4.
	private nextExpatIndex ::= 1.
	private handleMap = platform actors handleMap.
	|
) (
class Alien withIndex: i = (
	|
	public index <Integer> = i.
	|
) (
private asJSSelector: nsSelector <String> ^<String> = (
	| position = nsSelector indexOf: ':'. |
	0 = position ifTrue: [^nsSelector].
	^nsSelector copyFrom: 1 to: position - 1
)
public at: key = (
	(* JavaScript: this[key] *)
	rawPushAlien: self index.
	rawPush: key.
	rawPerformGet.
	^rawPop
)
public at: key put: value = (
	(* JavaScript: this[key] = value *)
	rawPushAlien: self index.
	rawPush: key.
	rawPush: value.
	rawPerformSet.
	^rawPop
)
protected doesNotUnderstand: message = (
	| jsSelector |
	0 = message arguments size ifTrue:
		[(message selector startsWith: 'isKindOf') ifTrue:
			[^false]].
	jsSelector:: asJSSelector: message selector.
	^#new = jsSelector
		ifTrue: [self newWithArguments: message arguments]
		ifFalse: [self perform: jsSelector withArguments: message arguments]
)
public includesKey: key ^<Boolean> = (
	(* JavaScript: key in this *)
	rawPushAlien: self index.
	rawPush: key.
	rawPerformHas.
	^rawPop
)
public instanceOf: constructor ^<Boolean> = (
	(* JavaScript: this instanceof constructor *)
	rawPushAlien: self index.
	rawPush: constructor.
	rawPerformInstanceOf.
	^rawPop
)
public isKindOfClosure ^<Boolean> = (
	^false
)
public isUndefined ^<Boolean> = (
	^0 = index
)
public newWithArguments: arguments <Array> = (
	(* JavaScript: new this(arguments[0], ..., arguments[n-1]) *)
	rawPushAlien: self index.
	1 to: arguments size do:
		[:argumentIndex | rawPush: (arguments at: argumentIndex)].
	rawPerformNew: arguments size.
	^rawPop
)
public perform: selector <String> withArguments: arguments <Array> = (
	(* JavaScript: this.selector(arguments[0], ..., arguments[n-1]) *)
	rawPushAlien: self index.
	rawPush: selector.
	1 to: arguments size do:
		[:argumentIndex | rawPush: (arguments at: argumentIndex)].
	rawPerformCall: arguments size.
	^rawPop
)
public printString ^<String> = (
	self isUndefined ifTrue: [^'undefined']. (* undefined.toString() throws in JS *)
	^self perform: #toString withArguments: {}
)
private pushExpat: closure = (
	| expatIndex |
	expatIndex:: nextExpatIndex.
	nextExpatIndex:: 1 + expatIndex.
	handleMap at: expatIndex put:
		[:status :pending |
		| arguments = Array new: status. |
		status to: 1 by: -1 do:
			[:argumentIndex | arguments at: argumentIndex put: rawPop].
		rawPush: (closure valueWithArguments: arguments)].
	rawPushExpat: expatIndex.
)
private rawPerformCall: numArgs = (
	(* :literalmessage: primitive: 163 *)
	^Error signal: rawPop printString
)
private rawPerformDelete = (
	(* :literalmessage: primitive: 162 *)
	^Error signal: rawPop printString
)
private rawPerformGet = (
	(* :literalmessage: primitive: 160 *)
	^Error signal: rawPop printString
)
private rawPerformHas = (
	(* :literalmessage: primitive: 167 *)
	^Error signal: rawPop printString
)
private rawPerformInstanceOf = (
	(* :literalmessage: primitive: 166 *)
	^Error signal: rawPop printString
)
private rawPerformNew: numArgs = (
	(* :literalmessage: primitive: 164 *)
	^Error signal: rawPop printString
)
private rawPerformSet = (
	(* :literalmessage: primitive: 161 *)
	^Error signal: rawPop printString
)
private rawPop = (
	(* :literalmessage: primitive: 157 *)
	^Alien withIndex: rawPopAgain
)
private rawPopAgain = (
	(* :literalmessage: primitive: 158 *)
	halt
)
private rawPush: object = (
	(* :literalmessage: primitive: 154 *)
	object isKindOfClosure
		ifTrue: [pushExpat: object]
		ifFalse: [rawPushAlien: object index]
)
private rawPushAlien: alienIndex = (
	(* :literalmessage: primitive: 155 *)
	halt
)
private rawPushExpat: expatIndex = (
	(* :literalmessage: primitive: 156 *)
	halt
)
public removeKey: key = (
	(* JavaScript: delete this[key] *)
	rawPushAlien: self index.
	rawPush: key.
	rawPerformDelete.
	^rawPop
)
public isKindOfJSAlien ^ <Boolean> = (
	^true
)
public isKindOfImage ^ <Boolean> = (
  ^'IMG' = (at: 'tagName')
)
) : (
)
) : (
)
