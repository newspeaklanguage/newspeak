Newspeak3
'NS2PrimordialSoup'
class PrimordialFuel usingPlatform: p internalKernel: k = (|
private List = p collections List.
private IdentityMap = k IdentityMap.

(* Classes which require special handling. *)
private SmallInteger = k SmallInteger.
private MediumInteger = k MediumInteger.
private LargeInteger = k LargeInteger.
private Float = k Float.
private ByteArray = k ByteArray.
private String = k String.
private Array = k _Array.
private WeakArray = k WeakArray.
private Ephemeron = k Ephemeron.
private Activation = k Activation.
private Closure = k Closure.
private Metaclass = k Metaclass.

private True = k True.
private False = k False.
private UndefinedObject = k UndefinedObject.
private Fraction = k Fraction.
private Method = k Method.
private Class = k Class.
private InstanceMixin = k InstanceMixin.
private ClassMixin = k ClassMixin.
|) (
public class Deserializer = (|
stream <ReadStream>
clusters <Array>
refs <Array>
nextRefIndex <Integer>
|) (
class ActivationCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		fillActivation].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: Activation new].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class ArrayCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: object size do:
			[:index | object at: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: (Array new: stream unsigned)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class ByteArrayCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	(* ByteArray accessors are known to be side-effect free. *)
	stream unsigned timesRepeat:
		[ | size = stream unsigned. object = ByteArray new: size. |
		1 to: size do: [:index | object at: index put: stream uint8].
		registerRef: object].
)
) : (
)
class ClosureCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		fillClosure].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: (Closure withNumCopied: stream uint16)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class EphemeronCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	readRef. (* :todo: *)
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		object key: readRef.
		object value: readRef.
		object finalizer: readRef].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: Ephemeron new].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class IntegerCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	stream unsigned timesRepeat:
		[registerRef: stream int64].

	(* :todo: Add use direct diget accessors. *)
	stream unsigned timesRepeat:
		[ | negative digitLength integer |
		negative:: stream uint8 = 1.
		digitLength:: stream uint16.
		integer:: 0.
		0 to: digitLength - 1 << 3 by: 8 do:
			[:shift | integer:: integer bitOr: (stream uint8 << shift)].
		negative ifTrue: [integer:: 0 - integer].
		registerRef: integer].
)
) : (
)
class RegularObjectCluster for: format = (|
numSlots <Integer> = format.
klass
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		class: klass adoptInstance: object].
)
public readEdges = (
	klass:: readRef.
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: numSlots do:
			[:index | slotOf: object at: index put: readRef]].
)
public readNodes = (
	| allocClass = TemporaryClass withFormat: numSlots. |
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: allocClass vfBasicNew].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
class StringCluster = () (
public adoptInstances = (
)
public readEdges = (
)
public readNodes = (
	stream unsigned timesRepeat: [
		| size = stream unsigned. acc = ByteArray new: size. |
		1 to: size do: [:index | acc at: index put: stream uint8].
		registerRef: (String withAll: acc)].

	stream unsigned timesRepeat: [
		| size = stream unsigned. acc = ByteArray new: size. |
		1 to: size do: [:index | acc at: index put: stream uint8].
		registerRef: (String withAll: acc) asSymbol].
)
) : (
)
class WeakArrayCluster = (|
firstRefIndex <Integer>
lastRefIndex <Integer>
|) (
public adoptInstances = (
)
public readEdges = (
	firstRefIndex to: lastRefIndex do:
		[:refIndex |
		| object = refs at: refIndex. |
		1 to: object size do:
			[:index | object at: index put: readRef]].
)
public readNodes = (
	firstRefIndex:: nextRefIndex.
	stream unsigned timesRepeat:
		[registerRef: (WeakArray new: stream unsigned)].
	lastRefIndex:: nextRefIndex - 1.
)
) : (
)
public deserialize: bytes = (
	| numClusters |
	stream:: ReadStream over: bytes.
	assert: [stream uint16 = 16r1984] message: 'Not VictoryFuel'.
	assert: [stream uint16 = version] message: 'Version mismatch'.
	numClusters:: stream uint16.
	clusters:: Array new: numClusters.
	refs:: Array new: stream uint32.
	nextRefIndex:: 1.
	sharedObjects do: [:sharedObject | registerRef: sharedObject].

	1 to: numClusters do: [:i | clusters at: i put: readCluster readNodes].
	1 to: numClusters do: [:i | (clusters at: i) readEdges].
	1 to: numClusters do: [:i | (clusters at: i) adoptInstances].

	^readRef
)
readCluster = (
	| format ::= stream int32. |

	format >= 0 ifTrue: [^RegularObjectCluster for: format].

	format:: 0 - format.

	format = kSmiCid ifTrue: [^IntegerCluster new].
	format = kFloat64Cid ifTrue: [^FloatCluster new].
	format = kByteArrayCid ifTrue: [^ByteArrayCluster new].
	format = kStringCid ifTrue: [^StringCluster new].
	format = kArrayCid ifTrue: [^ArrayCluster new].
	format = kWeakArrayCid ifTrue: [^WeakArrayCluster new].
	format = kEphemeronCid ifTrue: [^EphemeronCluster new].
	format = kActivationCid ifTrue: [^ActivationCluster new].
	format = kClosureCid ifTrue: [^ClosureCluster new].

	unknownFormat.
)
readRef = (
	^refs at: stream unsigned
)
registerRef: object = (
	refs at: nextRefIndex put: object.
	nextRefIndex:: 1 + nextRefIndex.
)
) : (
)
class ReadStream over: bytes = (|
data = bytes.
public position ::= 0.
|) (
public int32 = (
	| result high |
	result:: high:: data at: 1 + position.
	result >= 128 ifTrue: [result:: result - 16r100].
	result:: (result << 8) | (data at: 2 + position).
	result:: (result << 8) | (data at: 3 + position).
	result:: (result << 8) | (data at: 4 + position).
	position:: position + 4.
	^result
)
public int64 = (
	| result high |
	result:: data at: 1 + position.
	result >= 128 ifTrue: [result:: result - 16r100].
	result:: (result << 8) | (data at: 2 + position).
	result:: (result << 8) | (data at: 3 + position).
	result:: (result << 8) | (data at: 4 + position).
	result:: (result << 8) | (data at: 5 + position).
	result:: (result << 8) | (data at: 6 + position).
	result:: (result << 8) | (data at: 7 + position).
	result:: (result << 8) | (data at: 8 + position).
	position:: position + 8.
	^result
)
public uint16 = (
	| result |
	result:: data at: 1 + position.
	result:: (result << 8) | (data at: 2 + position).
	position:: position + 2.
	^result
)
public uint32 = (
	| result |
	result:: data at: 1 + position.
	result:: (result << 8) | (data at: 2 + position).
	result:: (result << 8) | (data at: 3 + position).
	result:: (result << 8) | (data at: 4 + position).
	position:: position + 4.
	^result
)
public uint8 = (
	position:: position + 1.
	^data at: position
)
public unsigned = (
	| acc b |
	b:: uint8.
	b > 127 ifTrue: [^b - 128].
	acc:: b.

	b:: uint8.
	b > 127 ifTrue: [^(b - 128) << 7 | acc].
	acc:: acc | (b << 7).

	b:: uint8.
	b > 127 ifTrue: [^(b - 128) << 14 | acc].
	acc:: acc | (b << 14).

	b:: uint8.
	b > 127 ifTrue: [^(b - 128) << 21 | acc].
	acc:: acc | (b << 21).

	b:: uint8.
	b > 127 ifTrue: [^(b - 128) << 28 | acc].
	unreachable.
)
) : (
)
public class Serializer = (
|
stream = WriteStream new.
clusters = IdentityMap new: 32.
orderedClusters = List new.
stack ::= List new.
refs ::= IdentityMap new: 256.
nextRefIndex
|
) (
class ActivationCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Activation accessors are known to be side-effect free. *)
	enqueue:: object sender.
	enqueue:: object bci.
	enqueue:: object method.
	enqueue:: object closure.
	enqueue:: object receiver.
	(* enqueue:: object numTemps
	Cannot use back reference for allocation size. *)
	1 to: object size do: [:index | enqueue: (object tempAt: index)].
)
public writeEdges = (
	(* Activation accessors are known to be side-effect free. *)
	objects do: [:object |
		writeRef: object sender.
		writeRef: object bci.
		writeRef: object method.
		writeRef: object closure.
		writeRef: object receiver.
		stream uint16: object size. (* !!!! *)
		1 to: object size do: [:index | writeRef: (object tempAt: index)]].
)
public writeNodes = (
	writeFormat: kActivationCid negated.
	stream unsigned: objects size.
	objects do: [:object |
		registerRef: object.
		(* :todo: Have small and large contexts?
		stream uint8: isLarge *)].
)
) : (
)
class ArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Array accessors are known to be side-effect free. *)
	1 to: object size do: [:index | enqueue: (object at: index)].
)
public replace: old with: neu = (
	(* Array equality is known to be identity. *)
	1 to: objects size do:
		[:index | old = (objects at: index) ifTrue: [objects at: index put: neu]].
)
public writeEdges = (
	(* Array accessors are known to be side-effect free. *)
	objects do: [:object |
		1 to: object size do: [:index | writeRef: (object at: index)]].
)
public writeNodes = (
	writeFormat: kArrayCid negated.
	stream unsigned: objects size.
	(* Array accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream unsigned: object size].
)
) : (
)
class BehaviorCluster for: k = (|
klass = k.
numSlots = slotOf: k at: 6.
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	1 to: 4 do: [:index | enqueue: (slotOf: object at: index)].
	(* Erase the cid *)
	6 to: numSlots do: [:index | enqueue: (slotOf: object at: index)].
)
public writeEdges = (
	writeRef: klass.
	objects do:
		[:object |
		1 to: 4 do: [:index | writeRef: (slotOf: object at: index)].
		writeRef: nil. (* Erase the cid *)
		6 to: numSlots do: [:index | writeRef: (slotOf: object at: index)]].
)
public writeNodes = (
	writeFormat: numSlots.
	stream unsigned: objects size.
	objects do: [:object | registerRef: object].
)
) : (
)
class ByteArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kByteArrayCid negated.
	stream unsigned: objects size.
	(* ByteArray accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream unsigned: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].
)
) : (
)
class ClosureCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	enqueue:: definingActivationOf: object.
	enqueue:: initialBCIOf: object.
	enqueue:: object numArgs.

	1 to: (numCopiedOf: object) do: [:index | enqueue: (copiedOf: object at: index)].
)
public writeEdges = (
	objects do: [:object |
		writeRef:: definingActivationOf: object.
		writeRef:: initialBCIOf: object.
		writeRef:: object numArgs.
		1 to: (numCopiedOf: object) do: [:index | writeRef: (copiedOf: object at: index)]]
)
public writeNodes = (
	writeFormat: kClosureCid negated.
	stream unsigned: objects size.
	objects do: [:object |
		registerRef: object.
		stream uint16: (numCopiedOf: object)].
)
) : (
)
class EphemeronCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Ephemeron accessors are known to be side-effect free. *)
	(* :todo: Maintain the ephemeron property. *)
	enqueue: object key.
	enqueue: object value.
	enqueue: object finalizer.
)
public writeEdges = (
	writeRef: Ephemeron. (* :todo: *)
	objects do: [:object |
		writeRef: object key.
		writeRef: object value.
		writeRef: object finalizer].
)
public writeNodes = (
	writeFormat: 3 (* :todo: maybe kEphemeronCid? *).
	stream unsigned: objects size.
	objects do: [:object | registerRef: object].
)
) : (
)
class FloatCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kWeakArrayCid negated.
	stream unsigned: objects size.
	objects do: [:object |
		registerRef: object.
		stream uint64: UNIMPLEMENTED].
)
) : (
)
class IntegerCluster = (|
objects = List new.
large = List new.
|) (
public analyze: object = (
	(* :todo: Separate large integers into their own cluster. *)
	LargeInteger = (classOf: object)
		ifTrue: [large add: object]
		ifFalse: [objects add: object].
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kSmiCid negated.
	stream unsigned: objects size.
	objects do: [:object |
		registerRef: object.
		stream int64: object].

	(* :todo: Add use direct diget accessors. *)
	stream unsigned: large size.
	large do: [:object | | abs tmp digitLength |
		registerRef: object.
		object < 0
			ifTrue:
				[stream uint8: 1.
				abs:: 0 - object]
			ifFalse:
				[stream uint8: 0.
				abs:: object].
		tmp:: abs.
		digitLength:: 0.
		[0 = tmp] whileFalse:
			[digitLength:: digitLength + 1.
			 tmp:: tmp >> 8].
		stream uint16: digitLength.
		tmp:: abs.
		digitLength timesRepeat:
			[stream uint8: (tmp bitAnd: 255).
			 tmp:: tmp >> 8]].
)
) : (
)
class RegularObjectCluster for: k = (|
klass = k.
numSlots = slotOf: k at: 6.
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	1 to: numSlots do: [:index | enqueue: (slotOf: object at: index)].
)
public writeEdges = (
	writeRef: klass.
	objects do:
		[:object | 1 to: numSlots do:
			[:index | writeRef: (slotOf: object at: index)]].
)
public writeNodes = (
	writeFormat: numSlots.
	stream unsigned: objects size.
	objects do: [:object | registerRef: object].
)
) : (
)
class StringCluster = (|
noncanonical = List new.
canonical = List new.
|) (
public analyze: object = (
	(isCanonical: object)
		ifTrue: [canonical add: object]
		ifFalse: [noncanonical add: object].
)
public symbols = (
	^canonical asArray
)
public writeEdges = (
)
public writeNodes = (
	writeFormat: kStringCid negated.

	(* String accessors are known to be side-effect free. *)
	stream unsigned: noncanonical size.
	noncanonical do: [:object |
		registerRef: object.
		stream unsigned: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].

	stream unsigned: canonical size.
	canonical do: [:object |
		registerRef: object.
		stream unsigned: object size.
		1 to: object size do: [:index | stream uint8: (object at: index)]].
)
) : (
)
class WeakArrayCluster = (|
objects = List new.
|) (
public analyze: object = (
	objects add: object.

	(* Not traced. *)
)
public writeEdges = (
	(* WeakArray accessors are known to be side-effect free. *)
	objects do: [:object |
		1 to: object size do: [:index | writeWeakRef: (object at: index)]].
)
public writeNodes = (
	writeFormat: kWeakArrayCid negated.
	stream unsigned: objects size.
	(* WeakArray accessors are known to be side-effect free. *)
	objects do: [:object |
		registerRef: object.
		stream unsigned: object size].
)
) : (
)
analyze: object = (
	(clusterForClass: (classOf: object)) analyze: object
)
clusterForClass: klass = (
	^clusters at: klass ifAbsentPut: [newClusterForClass: klass].
)
createSpecialClassClusters = (
	| intCluster |
	intCluster:: IntegerCluster new.
	clusters at: SmallInteger put: intCluster.
	clusters at: MediumInteger put: intCluster.
	clusters at: LargeInteger put: intCluster.
	orderedClusters add: intCluster.

	(* clusters at: Float put: FloatCluster new. *)
	orderedClusters add: (clusters at: ByteArray put: ByteArrayCluster new).
	orderedClusters add: (clusters at: String put: StringCluster new).
	orderedClusters add: (clusters at: Array put: ArrayCluster new).
	orderedClusters add: (clusters at: WeakArray put: WeakArrayCluster new).
	orderedClusters add: (clusters at: Ephemeron put: EphemeronCluster new).
	orderedClusters add: (clusters at: Activation put: ActivationCluster new).
	orderedClusters add: (clusters at: Closure put: ClosureCluster new).

	(* Eagerly create the class. Avoids the mixin's application set from reallocating its backing store between analysis and writing edges. *)
	RegularObjectCluster.
	BehaviorCluster.
)
enqueue: object = (
	(refs at: object ifAbsentPutVal: 0) ifTrue: [stack add: object].
)
newClusterForClass: klass = (
	| instancesAreBehaviors ::= false. cluster |
	enqueue: klass.

	Metaclass = klass ifTrue: [instancesAreBehaviors:: true].
	Metaclass = (classOf: klass) ifTrue: [instancesAreBehaviors:: true].
	cluster:: (instancesAreBehaviors ifTrue: [BehaviorCluster] ifFalse: [RegularObjectCluster]) for: klass.
	orderedClusters add: cluster.
	^cluster
)
preRegisterRef: object = (
	refs at: object put: nextRefIndex.
	nextRefIndex:: nextRefIndex + 1.
)
registerRef: object = (
	refs at: object putReplace: nextRefIndex.
	nextRefIndex:: nextRefIndex + 1.
)
public serialize: root = (
	nextRefIndex:: 1.

	sharedObjects do: [:sharedObject | preRegisterRef: sharedObject].
	createSpecialClassClusters.

	enqueue: root.
	[stack isEmpty] whileFalse: [analyze: stack removeLast].

	stream uint16: 16r1984.
	stream uint16: version.
	stream uint16: orderedClusters size.
	stream uint32: refs size.
	orderedClusters do: [:c | c writeNodes].
	orderedClusters do: [:c | c writeEdges].
	writeRef: root.

	^stream stealBytes
)
writeFormat: format = (
	stream int32: format.
)
writeRef: object = (
	stream unsigned: (refs at: object).
)
writeWeakRef: object = (
	stream unsigned: (refs at: object ifAbsent: [refs at: nil])
)
) : (
)
public class Snapshotter = Serializer (
|
replacements = IdentityMap new: 128.
symbolTablePlaceholder = {}.
canonicalLiterals = List new.
canonicalBytecode = List new.
empty = Array new: 0.
keepSource ::= false.
|
) (
canonicalize: list in: canonicalLists = (
	nil = list ifTrue: [^nil]. (* Slot accessors have nil literals and bytecode. *)
	canonicalLists do: [:canonicalList | (list: list equals: canonicalList) ifTrue: [^canonicalList]].
	canonicalLists add: list.
	^list
)
canonicalizeEmpty: array = (
	0 = array size ifTrue: [^empty].
	^array
)
enqueue: object = (
	^super enqueue: (replace: object)
)
list: a equals: b = (
	a size = b size ifFalse: [^false].
	1 to: a size do: [:index | (a at: index) = (b at: index) ifFalse: [^false]].
	^true
)
replace: object = (
	Method = (classOf: object) ifTrue: [^replaceMethod: object].
	InstanceMixin = (classOf: object) ifTrue: [^replaceMixin: object].
	^replacements atOrItself: object
)
replaceClass: old with: nue = (
	replacements at: old put: nue.
	replacements at: (classOf: old) put: (classOf: nue)
)
replaceMethod: method = (
	^replacements at: method ifAbsentPut:
		[ | newMethod = Method new. |
		 newMethod header: method header.
		 newMethod literals: (canonicalize: method literals in: canonicalLiterals).
		 newMethod bytecode: (canonicalize: method bytecode in: canonicalBytecode).
		 newMethod mixin: method mixin.
		 newMethod selector: method selector.
		 newMethod source: (keepSource ifTrue: [method source] ifFalse: [nil = method source ifFalse: [0]]).
		 newMethod]
)
replaceMixin: mixin = (
	^replacements at: mixin ifAbsentPut:
		[ | newMixin = InstanceMixin new. |
		 newMixin _name: mixin _name.
		 newMixin _methods: mixin _methods.
		 newMixin _enclosingMixin: mixin _enclosingMixin.
		 newMixin _slots: (canonicalizeEmpty: mixin _slots).
		 newMixin _nestedMixins: (canonicalizeEmpty: mixin _nestedMixins).
		 newMixin _applications: mixin _applications.
		 newMixin _classMixin: mixin _classMixin.
		 newMixin _accessModifier: mixin _accessModifier.
		 newMixin _primaryFactorySelector: mixin _primaryFactorySelector.
		 newMixin _headerSource: (keepSource ifTrue: [mixin _headerSource]).
		 newMixin]
)
replaceSymbolTable = (
	| newSymbolTable |
	newSymbolTable:: (clusters at: String) symbols.

	(* Replace the written node. *)
	(clusters at: Array) replace: symbolTablePlaceholder with: newSymbolTable.
	(* Replace the written edges. *)
	replacements at: symbolTablePlaceholder put: newSymbolTable.

	(* registerRef: expects we've already traced the object. *)
	refs at: newSymbolTable put: 0.
)
public serialize: root = (
	| interpreter |
	nextRefIndex:: 1.

	(* Space optimization: ensure the most popular referents have short back refs. *)
	refs at: nil put: 0.
	analyze: nil.
	refs at: false put: 0.
	analyze: false.
	refs at: true put: 0.
	analyze: true.

	createSpecialClassClusters.

	enqueue: root.
	[stack isEmpty] whileFalse: [analyze: stack removeLast].

	replaceSymbolTable.

	stream uint16: 16r1984.
	stream uint16: version.
	stream uint16: orderedClusters size.
	stream uint32: refs size - 1. (* -1 accounts for symbol table placeholder *)
	orderedClusters do: [:c | c writeNodes].
	orderedClusters do: [:c | c writeEdges].
	writeRef: root.

	^stream stealBytes
)
public snapshotApp: app withRuntime: runtime keepSource: s = (
	| newPlatform newKernel methods objectStore |
	keepSource:: s.
	newKernel:: runtime InternalKernel new.
	newPlatform:: runtime Platform internalKernel: newKernel.
	objectStore:: newKernel
		buildObjectStoreWithApplication: app
		platform: newPlatform
		symbols: symbolTablePlaceholder.

	slotOf: newKernel _Object at: 1 put: nil. (* superclass *)
	methods:: slotOf: newKernel _Object at: 2.
	1 to: methods size do: [:index |
		| method = methods at: index. |
		method selector = #'initializer`new' ifTrue: [
			method header: 200 << 16. (* public + return self *)
			method bytecode: nil]].

	replaceClass: Activation with: newKernel Activation.
	replaceClass: Array with: newKernel _Array.
	replaceClass: ByteArray with: newKernel ByteArray.
	replaceClass: String with: newKernel String.
	replaceClass: Closure with: newKernel Closure.
	replaceClass: Ephemeron with: newKernel Ephemeron.
	replaceClass: SmallInteger with: newKernel SmallInteger.
	replaceClass: MediumInteger with: newKernel MediumInteger.
	replaceClass: LargeInteger with: newKernel LargeInteger.
	replaceClass: WeakArray with: newKernel WeakArray.

	replaceClass: True with: newKernel True.
	replaceClass: False with: newKernel False.
	replaceClass: UndefinedObject with: newKernel UndefinedObject.
	replaceClass: Fraction with: newKernel Fraction.
	replaceClass: Object with: newKernel _Object.
	replaceClass: Method with: newKernel Method.
	replaceClass: Class with: newKernel Class.
	replaceClass: Metaclass with: newKernel Metaclass.
	replaceClass: InstanceMixin with: newKernel InstanceMixin.
	replaceClass: ClassMixin with: newKernel ClassMixin.

	^serialize: objectStore
)
writeRef: object = (
	^super writeRef: (replacements atOrItself: object)
)
writeWeakRef: object = (
	^super writeWeakRef: (replacements atOrItself: object)
)
) : (
)
class TemporaryClass withFormat: fmt = (|
	superclass = Object.
	methods = {}.
	enclosingObject = nil.
	mixin = nil.
	classIndex
	format = fmt.
	public name = 'PartiallyDeserializedObject'.
	subclasses
|) (
public vfBasicNew = (
	(* :literalmessage: primitive: 34 *)
	halt.
)
) : (
)
class WriteStream = (|
data ::= ByteArray new: 32 * 1024.
public position ::= 0.
|) (
public int32: value = (
	position + 4 > data size ifTrue: [data:: data copyWithSize: data size * 2].
	data at: position + 1 put: (value >> 24 bitAnd: 255).
	data at: position + 2 put: (value >> 16 bitAnd: 255).
	data at: position + 3 put: (value >> 8 bitAnd: 255).
	data at: position + 4 put: (value bitAnd: 255).
	position:: position + 4.
)
public int64: value = (
	position + 8 > data size ifTrue: [data:: data copyWithSize: data size * 2].
	data at: position + 1 put: (value >> 56 bitAnd: 255).
	data at: position + 2 put: (value >> 48 bitAnd: 255).
	data at: position + 3 put: (value >> 40 bitAnd: 255).
	data at: position + 4 put: (value >> 32 bitAnd: 255).
	data at: position + 5 put: (value >> 24 bitAnd: 255).
	data at: position + 6 put: (value >> 16 bitAnd: 255).
	data at: position + 7 put: (value >> 8 bitAnd: 255).
	data at: position + 8 put: (value bitAnd: 255).
	position:: position + 8.
)
public stealBytes = (
	^data copyWithSize: position
)
public uint16: value = (
	position + 2 > data size ifTrue: [data:: data copyWithSize: data size * 2].
	data at: position + 1 put: value >> 8.
	data at: position + 2 put: (value bitAnd: 255).
	position:: position + 2.
)
public uint32: value = (
	position + 4 > data size ifTrue: [data:: data copyWithSize: data size * 2].
	data at: position + 1 put: value >> 24.
	data at: position + 2 put: (value >> 16 bitAnd: 255).
	data at: position + 3 put: (value >> 8 bitAnd: 255).
	data at: position + 4 put: (value bitAnd: 255).
	position:: position + 4.
)
public uint8: value = (
	position + 1 > data size ifTrue: [data:: data copyWithSize: data size * 2].
	position:: position + 1.
	data at: position put: value.
)
public unsigned: value = (
	| v ::= value. |
	[v > 127] whileTrue:
		[uint8: (v bitAnd: 127).
		 v:: v >> 7].
	uint8: v + 128.
)
) : (
)
private class: klass adoptInstance: object = (
	(* :literalmessage: primitive: 134 *)
	halt.
)
private classOf: object = (
	(* :literalmessage: primitive: 85 *)
	halt.
)
private copiedOf: closure <Closure> at: index <Integer> ^<Object> = (
	(* :literalmessage: primitive: 77 *)
	halt.
)
private copiedOf: closure <Closure> at: index <Integer> put: value <Object> ^<Object> = (
	(* :literalmessage: primitive: 78 *)
	halt.
)
private definingActivationOf: closure <Closure> ^<Activation> = (
	(* :literalmessage: primitive: 71 *)
	halt.
)
private initialBCIOf: closure <Closure> ^<Integer> = (
	(* :literalmessage: primitive: 73 *)
	halt.
)
private isCanonical: object = (
	(* :literalmessage: primitive: 126 *)
	halt.
)
private kActivationCid = ( ^12 )
private kArrayCid = ( ^9 )
private kBigintCid = ( ^5 )
private kByteArrayCid = ( ^7 )
private kClosureCid = ( ^13 )
private kEphemeronCid = ( ^11 )
private kFloat64Cid = ( ^6 )
private kMintCid = ( ^4 )
private kSmiCid = ( ^3 )
private kStringCid = ( ^8 )
private kWeakArrayCid = ( ^10 )
private numCopiedOf: closure <Closure> ^<Integer> = (
	(* :literalmessage: primitive: 70 *)
	halt.
)
sharedObjects = (
	^{
		nil.
		false.
		true.

		SmallInteger.
		MediumInteger.
		LargeInteger.
		Float.
		ByteArray.
		String.
		Array.
		WeakArray.
		Ephemeron.
		Activation.
		Closure.
		Metaclass.

		Fraction.
		Method.
		Class.
		InstanceMixin.
		ClassMixin.

		Object.
		classOf: Object.
	}
)
private slotOf: object at: index = (
	(* :literalmessage: primitive: 35 *)
	halt.
)
private slotOf: object at: index put: value = (
	(* :literalmessage: primitive: 36 *)
	halt.
)
private version = ( ^0 )
) : (
)
