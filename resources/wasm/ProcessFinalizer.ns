Newspeak3
'HopscotchIDE'
class ProcessFinalizer usingPlatform: p <Platform> ide: ide_ debuggerClass: debuggerClass_ = (
(* Central registry for all suspended processes. Ensures that any process forgotten by UI is terminated/unwound.

Copyright (c) 2012 Cadence Design Systems, Inc.
Copyright (c) 2009 Peter von der Ahe

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
''Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. *)
|
	brazil = p brazil.
	ide = ide_.
	debuggerClass = debuggerClass_.

	private WeakRegistry = p squeak WeakRegistry.
	private Process = p squeak Process.
	private Processor = p squeak Processor.
	private platform = p.
	debuggerRegistry = WeakRegistry new.
|) (
class Finalizer for: p <Process> = (
(* Terminates process when finalized. *)
|
	process = p.
|) (
public finalize = (
	[process terminate] fork
)
) : (
)
debug: thread <ThreadMirror> activation: activation <ActivationMirror> title: title = (
	| debugger |
	debugger:: debuggerFor: thread activation: activation title: title.
	brazil theDesktop scheduleUIAction: [debugger open]
)
public debug: process context: context title: title = (
	(* Bridge from Squeak Process/ContextPart to ThreadMirror and ActivationMirrors *)
	| thread activation |
	thread:: platform activationMirrors onProcess: process.
	activation:: thread createActivationFromContext: context.

	(* Avoid debugging the current process *)
	thread isActiveThread
		ifTrue:
			[[debug: thread activation: activation title: title] forkAt: process priority.
			Processor yield]
		ifFalse:
			[debug: thread activation: activation title: title]
)
debuggerFor: thread <ThreadMirror> activation: activation <ActivationMirror> title: title <String> = (
	^instanceOfDebuggerClass: debuggerClass for: thread activation: activation title: title
)
instanceOfDebuggerClass: klass for: thread <ThreadMirror> activation: activation <ActivationMirror> title: title <String> = (
	| debugger |
	debugger:: klass thread: thread activation: activation description: title.
	assert: [thread isActiveThread not] message: 'Cannot debug the active thread'.
	thread suspend.
	debuggerRegistry add: debugger executor: (Finalizer for: thread).
	debugger registry: self.
	^debugger
)
public release: debugger = (
	debuggerRegistry remove: debugger ifAbsent: []
)
public subjectFor: exception <Exception> in: process <Process> ^ <ThreadSubject> = (
	| thread activation debugger |
	thread:: platform activationMirrors onProcess: process.
	activation:: thread createActivationFromContext: exception signalerContext.
	debugger:: debuggerFor: thread activation: activation title: exception description.
	^debugger ThreadSubject onModel: thread
)
public subjectForContext: context ^ <ThreadSubject> = (
	| thread activation debugger process |

	process:: Process
		forContext: context
		priority: Processor activePriority.
	process name: 'Exemplar'.
	thread:: platform activationMirrors onProcess: process.
	activation:: thread createActivationFromContext: context.

	debugger:: debuggerFor: thread activation: activation title: 'Foo'.
	^debugger ThreadSubject onModel: thread
)
public terminateAll = (
	debuggerRegistry keys do:
			[:each |
			each releaseThread ifNotNil: [:thread | thread terminate]]
)
) : (
)
