Newspeak3
'MemoryHole'
class VCSSubversionBackendProvider usingPlatform: platform vcs: vcs = (
(* Back-end for accessing subversion repositories

Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. *)
|

	private AbstractBackend = vcs core AbstractBackend.

	private logger = vcs core logger.

	private FileDirectory = platform squeak FileDirectory.
|) (
public class Backend = AbstractBackend (
) (
public class LocalRepository onRepositoryId: repositoryId = AbstractLocalRepository onRepositoryId: repositoryId (|
	private svnAdmin = SvnAdminCommand new.
	private remoteRepositoryDirectory = FileDirectory on: repositoryDirectory pathName, '_svnrepo'.
	|) (
class Command = AbstractCommand (|
	commandLine = 'svn'.
|) (
public addStream: stream asFileNamed: filename = (
	writeStream: stream toFileNamed: filename.
	launcher run: {'add'. (repository repositoryDirectory / filename) fullName}
)
createEmptyWorkingCopy = (
	launcher run: {'checkout'. remoteRepositoryDirectory url. repository repositoryDirectory pathName}.
	addStream: '' readStream asFileNamed: ignoredFilename.
	launcher run: {'commit'.  '-m'. 'Initial Commit'. workingCopyPath}.
)
defaultArguments = (
	^{}
)
topLevelDirectoryNames = (
	halt.
	^launcher runLines: {'ls'. workingCopyPath}
)
workingCopyPath = (
	^repository repositoryDirectory pathName
)
) : (
)
class Historian named: historianName version: v = AbstractLocalHistorian named: historianName version: v (
) (
) : (
)
class RepositoryVersionAccessing = AbstractRepositoryVersionAccessing () (
class RepositoryVersion = AbstractRepositoryVersion (
) (
) : (
)
) : (
)
class SvnAdminCommand = AbstractCommand (|
	commandLine = 'svnadmin'.
|) (
public createEmptyRepository = (
	launcher noDefaultArgumentsRun: {'create'. remoteRepositoryDirectory pathName}.
)
) : (
)
clone: location = (
	logger warn: 'Cloning repositories is not supported'
)
create = (
	svnAdmin createEmptyRepository.
	command createEmptyWorkingCopy
)
public historians = (
	^command topLevelDirectoryNames collect: [:each | Historian named: each version: nil]
)
repository = (
	^self
)
) : (
)
Repository = (
	^AbstractRepository
)
) : (
)
) : (
)
