Newspeak3
'Samples'
class Words packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	private wordsByFrequency ::= manifest wordsByFrequency.
	|
) (
class WordsUI usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Timer = p actors Timer.
	randomFunc
|[| Math = p js global at: 'Math'. |
	randomFunc:: [Math random]]
		on: Error
		do: [ | random = p squeak Random new. | randomFunc:: [random next]]) (
class DictionaryPresenter onSubject: s = Presenter onSubject: s (| contentHolder refreshTimer |) (
definition = (
	refreshTimer:: Timer every: 1000 do: [:timer | contentHolder refresh].
	^contentHolder:: holder: [label: subject nextWord]
)
public noticeConcealment = (
	refreshTimer isNil ifFalse: [refreshTimer cancel. refreshTimer:: nil].
)
public noticeExposure = (
	refreshTimer isNil ifFalse: [refreshTimer cancel. refreshTimer:: nil].
	refreshTimer:: Timer every: 1000 do: [:timer | refresh].
)
) : (
)
public class DictionarySubject onModel: m = Subject onModel: m () (
createPresenter = (
	^DictionaryPresenter onSubject: self
)
public nextWord = (
	^wordsByFrequency at: (randomFunc value * wordsByFrequency size) floor.
)
public title = (
	^'Words'
)
) : (
)
) : (
)
public main: platform args: args = (
	| hopscotchPlatform |
	hopscotchPlatform:: hopscotchRuntime using: platform.
	wordsByFrequency:: wordsByFrequency splitBy: ' '.
	hopscotchPlatform hopscotch core HopscotchWindow openSubject:
		((WordsUI usingPlatform: hopscotchPlatform) DictionarySubject onModel: wordsByFrequency).
)
) : (
)
