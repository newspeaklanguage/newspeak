Newspeak3
'Fuchsia'
class ZirconTesting usingPlatform: platform minitest: minitest = (
|
	private zx = platform zircon.
	private Channel = zx Channel.
	private Message = zx Message.
	private Socket = zx Socket.
	private VMO = zx VMO.
	private ZirconException = zx ZirconException.

	private TestContext = minitest TestContext.
|) (
public class ZirconTests = TestContext (
) (
should: block <[]> failWithStatus: expectedStatus <Integer> = (
	| observedStatus ::= zx OK. |
	[block value]
		on: ZirconException
		do: [:ex | observedStatus:: ex status].

	assert: observedStatus equals: expectedStatus.
)
public testChannelCreate = (
	| pair |
	pair:: Channel new.
	(pair at: 1) close.
	(pair at: 2) close.

	(pair at: 1) close. (* Double-close is safe. *)
	(pair at: 2) close. (* Double-close is safe. *)
)
public testChannelReadWriteData = (
	| pair a b bytes msg |
	pair:: Channel new.
	a:: pair at: 1.
	b:: pair at: 2.

	a write: (Message bytes: (ByteArray new: 0) handles: {}).
	msg:: b read.
	assert: msg bytes size equals: 0.

	bytes:: ByteArray new: 4.
	bytes at: 2 put: 16rA.
	bytes at: 4 put: 16rB.
	a write: (Message bytes: bytes handles: {}).
	bytes at: 1 put: 16rC.
	a write: (Message bytes: bytes handles: {}).
	bytes at: 1 put: 16rD.
	a write: (Message bytes: bytes handles: {}).
	msg:: b read.
	assert: msg bytes size equals: 4.
	assert: (msg bytes at: 1) equals: 0.
	assert: (msg bytes at: 2) equals: 16rA.
	assert: (msg bytes at: 3) equals: 0.
	assert: (msg bytes at: 4) equals: 16rB.
	msg:: b read.
	assert: (msg bytes at: 1) equals: 16rC.
	msg:: b read.
	assert: (msg bytes at: 1) equals: 16rD.

	a close.
	b close.
)
public testChannelReadWriteErrors = (
	| pair a b |
	pair:: Channel new.
	a:: pair at: 1.
	b:: pair at: 2.

	should: [a read] failWithStatus: zx ERR_SHOULD_WAIT.

	should: [a write: nil] signal: Exception.
	should: [a write: (Message bytes: (ByteArray new: 0) handles: nil)] signal: Exception.
	should: [a write: (Message bytes: nil handles: {})] signal: Exception.

	a close.

	should: [b read] failWithStatus: zx ERR_PEER_CLOSED.
	should: [b write: (Message bytes: (ByteArray new: 0) handles: {})] failWithStatus: zx ERR_PEER_CLOSED.

	b close.

	should: [b read] failWithStatus: zx ERR_BAD_HANDLE.
	should: [b write: (Message bytes: (ByteArray new: 0) handles: {})] failWithStatus: zx ERR_BAD_HANDLE.
)
public testChannelReadWriteHandles = (
	| vmo pair a b bytes msg |
	vmo:: VMO new: 42.
	pair:: Channel new.
	a:: pair at: 1.
	b:: pair at: 2.

	a write: (Message bytes: (ByteArray new: 0) handles: {vmo}).

	should: [vmo size] failWithStatus: zx ERR_BAD_HANDLE. (* handle was transfered *)

	msg:: b read.
	assert: msg bytes size equals: 0.
	assert: msg handles size equals: 1.
	vmo:: VMO handle: (msg handles at: 1) takeHandle.
	assert: vmo size >= 42.

	a close.
	b close.
)
public testChannelSignal = (
	| pair a b bytes msg |
	pair:: Channel new.
	a:: pair at: 1.
	b:: pair at: 2.

	b onReadable:
		[msg:: b read.
		 assert: msg bytes size equals: 0.
		 bytes:: ByteArray new: 4.
		 bytes at: 2 put: 16rA.
		 bytes at: 4 put: 16rB.
		 b close].

	a write: (Message bytes: (ByteArray new: 0) handles: {}).
	a close.
)
public testVMOCreate = (
	| vmo |
	vmo:: VMO new: 42.
	vmo close.
	vmo close. (* Double-close is safe. *)

	vmo:: VMO new: 0. (* Empty VMO is fine. *)
	vmo close.

	should: [VMO new: nil] signal: Exception.
	should: [VMO new: -1] signal: Exception.
	should: [VMO new: 42 asFloat] signal: Exception.
)
public testVMOGetSize = (
	| vmo |
	vmo:: VMO new: 42.
	assert: vmo size >= 42. (* Size is rounded up to nearest multiple of the page size. *)
	vmo close.

	vmo:: VMO new: 0.
	assert: vmo size equals: 0.
	vmo close.

	should: [vmo size] failWithStatus: zx ERR_BAD_HANDLE.
)
public testVMOReadWrite = (
	| bytes vmo |
	vmo:: VMO new: 64.

	bytes:: vmo read: 4 from: 0.
	assert: bytes size equals: 4.
	assert: (bytes at: 1) equals: 0.
	assert: (bytes at: 2) equals: 0.
	assert: (bytes at: 3) equals: 0.
	assert: (bytes at: 4) equals: 0.

	should: [vmo read: nil from: 0] signal: Exception.
	should: [vmo read: -1 from: 0] signal: Exception.
	should: [vmo read: 8 asFloat from: 0] signal: Exception.

	should: [vmo read: 4 from: nil] signal: Exception.
	should: [vmo read: 4 from: -1] signal: Exception.
	should: [vmo read: 4 from: 8 asFloat] signal: Exception.

	should: [vmo read: vmo size + 1 from: 0] failWithStatus: zx ERR_OUT_OF_RANGE.
	should: [vmo read: 1 from: vmo size] failWithStatus: zx ERR_OUT_OF_RANGE.

	bytes at: 1 put: 11.
	bytes at: 2 put: 22.
	bytes at: 3 put: 33.
	bytes at: 4 put: 44.
	vmo write: bytes to: 1.
	bytes:: vmo read: 4 from: 2.
	assert: bytes size equals: 4.
	assert: (bytes at: 1) equals: 22.
	assert: (bytes at: 2) equals: 33.
	assert: (bytes at: 3) equals: 44.
	assert: (bytes at: 4) equals: 0.

	should: [vmo write: nil to: 0] signal: Exception.
	should: [vmo write: -1 to: 0] signal: Exception.
	should: [vmo write: 8 asFloat to: 0] signal: Exception.
	should: [vmo write: (Array new: 0) to: 0] signal: Exception.

	should: [vmo write: 4 to: nil] signal: Exception.
	should: [vmo write: 4 to: -1] signal: Exception.
	should: [vmo write: 4 to: 8 asFloat] signal: Exception.

	vmo write: (ByteArray new: 0) to: 0. (* Empty read *)
	should: [vmo write: (ByteArray new: vmo size + 1) to: 0] failWithStatus: zx ERR_OUT_OF_RANGE.
	should: [vmo write: (ByteArray new: 1) to: vmo size] failWithStatus: zx ERR_OUT_OF_RANGE.

	vmo close.

	should: [vmo read: 0 from: 0] failWithStatus: zx ERR_BAD_HANDLE.
	should: [vmo write: bytes to: 0] failWithStatus: zx ERR_BAD_HANDLE.
)
public testVMOSetSize = (
	| vmo |
	vmo:: VMO new: 0 options: zx VMO_RESIZABLE.
	assert: vmo size equals: 0.

	vmo size: 5000.
	assert: vmo size >= 5000. (* Size is rounded up to nearest multiple of the page size. *)

	vmo size: 0.
	assert: vmo size equals: 0.

	should: [vmo size: nil] signal: Exception.
	should: [vmo size: -1] signal: Exception.
	should: [vmo size: 42 asFloat] signal: Exception.

	vmo close.

	should: [vmo size: 0] failWithStatus: zx ERR_BAD_HANDLE.

	vmo:: VMO new: 0 options: 0.
	assert: vmo size equals: 0.
	should: [vmo size: 0] failWithStatus: zx ERR_UNAVAILABLE.
	vmo close.
)
) : (
TEST_CONTEXT = ()
)
) : (
)
