Newspeak3
'Newspeak'
class KernelWeakTests usingPlatform: p minitest: m gcAction: gc = (|
private TestContext = m TestContext.
private MessageNotUnderstood = p kernel MessageNotUnderstood.
private Ephemeron = p kernel Ephemeron.
private WeakArray = p kernel WeakArray.
private WeakMap = p kernel WeakMap.
private gcAction <[]> = gc.
|) (
public class EphemeronTests = TestContext () (
public testEphemeronAccessors = (
	|
	key = Object new.
	value = Object new.
	ephemeron = Ephemeron new.
	|
	assert: ephemeron key equals: nil.
	assert: ephemeron value equals: nil.
	assert: (ephemeron key: key) equals: ephemeron.
	assert: ephemeron key equals: key.
	assert: (ephemeron value: value) equals: ephemeron.
	assert: ephemeron value equals: value.
)
public testEphemeronEphemerality1 = (
	(* A simple weak reference. *)
	|
	key ::= Object new.
	ephemeron = Ephemeron new.
	|
	ephemeron key: key; value: 42.
	assert: ephemeron value equals: 42.

	gcAction value.

	assert: ephemeron value equals: 42.

	key:: nil.
	gcAction value.

	assert: ephemeron value equals: nil.
)
public testEphemeronEphemerality2 = (
	(* An indirect weak reference. *)
	|
	key1 ::= Object new.
	key2 ::= Object new.
	ephemeron1 = Ephemeron new.
	ephemeron2 = Ephemeron new.
	|
	ephemeron1 key: key1; value: key2.
	ephemeron2 key: key2; value: 42.
	assert: ephemeron2 value equals: 42.

	gcAction value.

	assert: ephemeron2 value equals: 42.

	key2:: nil.
	gcAction value.

	assert: ephemeron2 value equals: 42.
	deny: ephemeron1 value equals: nil.

	key1:: nil.
	gcAction value.

	assert: ephemeron1 value equals: nil.
	assert: ephemeron2 value equals: nil.
)
public testEphemeronEphemerality3 = (
	(* A cycle between ephemerons. *)
	|
	key1 ::= Object new.
	key2 ::= Object new.
	ephemeron1 = Ephemeron new.
	ephemeron2 = Ephemeron new.
	|
	ephemeron1 key: key1; value: key2.
	ephemeron2 key: key2; value: key1.
	deny: ephemeron1 value equals: nil.
	deny: ephemeron2 value equals: nil.

	gcAction value.

	deny: ephemeron1 value equals: nil.
	deny: ephemeron2 value equals: nil.

	key2:: nil.
	gcAction value.

	deny: ephemeron1 value equals: nil.
	deny: ephemeron2 value equals: nil.

	key1:: nil.
	gcAction value.

	assert: ephemeron1 value equals: nil.
	assert: ephemeron2 value equals: nil.
)
public testEphemeronEphemerality4 = (
	(* Ephemeron + weak array. *)
	|
	key ::= Object new.
	ephemeron ::= Ephemeron new.
	array = WeakArray new: 1.
	|
	ephemeron key: key; value: 42.
	array at: 1 put: key.

	gcAction value.

	assert: ephemeron value equals: 42.
	deny: (array at: 1) equals: nil.

	key:: nil.
	gcAction value.

	assert: ephemeron value equals: nil.
	assert: (array at: 1) equals: nil.
)
public testEphemeronEphemerality5a = (
	(* An indirect weak reference. *)
	|
	key1 ::= Object new.
	key2 ::= Object new.
	value2 ::= Object new.
	ephemeron1 ::= Ephemeron new.
	ephemeron2 ::= Ephemeron new.
	array = WeakArray new: 1.
	|
	ephemeron1 key: key1; value: key2.
	ephemeron2 key: key2; value: value2.
	array at: 1 put: value2.
	deny: (array at: 1) equals: nil.
	key2:: nil.
	value2:: nil.

	gcAction value.

	deny: (array at: 1) equals: nil.

	ephemeron2:: nil.
	gcAction value.

	assert: (array at: 1) equals: nil.
)
public testEphemeronEphemerality5b = (
	(* An indirect weak reference. *)
	|
	key1 ::= Object new.
	key2 ::= Object new.
	value2 ::= Object new.
	ephemeron1 ::= Ephemeron new.
	ephemeron2 ::= Ephemeron new.
	array = WeakArray new: 1.
	|
	ephemeron1 key: key1; value: key2.
	ephemeron2 key: key2; value: value2.
	array at: 1 put: value2.
	deny: (array at: 1) equals: nil.
	key2:: nil.
	value2:: nil.

	gcAction value.

	deny: (array at: 1) equals: nil.

	ephemeron1:: nil.
	gcAction value.

	assert: (array at: 1) equals: nil.
)
public testEphemeronEphemerality5c = (
	(* An indirect weak reference. *)
	|
	key1 ::= Object new.
	key2 ::= Object new.
	value2 ::= Object new.
	ephemeron1 ::= Ephemeron new.
	ephemeron2 ::= Ephemeron new.
	array = WeakArray new: 1.
	|
	ephemeron1 key: key1; value: key2.
	ephemeron2 key: key2; value: value2.
	array at: 1 put: value2.
	deny: (array at: 1) equals: nil.
	key2:: nil.
	value2:: nil.

	gcAction value.

	deny: (array at: 1) equals: nil.

	key1:: nil.
	gcAction value.

	assert: (array at: 1) equals: nil.
)
public testEphemeronEphemerality6 = (
	(* Chain of ephemerons only reachable through ephemeral references *)
	|
	shallowKey ::= Object new.
	deepKey ::= Object new.
	array ::= Array new: 512.
	temp
	|

	1 to: 511 do:
		[:index |
		temp:: Ephemeron new key: deepKey; value: index + 1000.
		array at: index put: temp].

	temp:: Ephemeron new key: shallowKey; value: deepKey.
	128 timesRepeat:
		[temp:: Ephemeron new key: shallowKey; value: temp].
	array at: 512 put: temp.
	temp:: nil.
	deepKey:: nil.

	1 to: 511 do:
		[:index |
		assert: (array at: index) value equals: index + 1000].

	gcAction value.

	1 to: 511 do:
		[:index |
		assert: (array at: index) value equals: index + 1000].

	shallowKey:: nil.
	gcAction value.

	1 to: 512 do:
		[:index |
		assert: (array at: index) value equals: nil].
)
public testEphemeronEqualityIsIdentity = (
	|
	key = Object new.
	value = Object new.
	ephemeron = Ephemeron new.
	ephemeron2 = Ephemeron new.
	|
	ephemeron key: key; value: value.
	ephemeron2 key: key; value: value.
	deny: ephemeron equals: ephemeron2.
)
public testEphemeronStableHash = (
	|
	key = Object new.
	value = Object new.
	key2 = Object new.
	value2 = Object new.
	ephemeron = Ephemeron new.
	firstHash
	|
	firstHash:: ephemeron hash.
	ephemeron key: key; value: value.
	assert: ephemeron hash equals: firstHash.
	ephemeron key: key2; value: value2.
	assert: ephemeron hash equals: firstHash.
)
) : (
TEST_CONTEXT = ()
)
public class FrameTests = TestContext () (
deepStack: n = (
	(* Not tail recursive. *)
	^0 = n ifTrue: [0] ifFalse: [n + (deepStack: n - 1) + n]
)
public testFrameActivationLeak = (
	|
	array = WeakArray new: 1.
	object ::= Object new.
	|
	array at: 1 put: object.
	assert: (array at: 1) equals: object.

	gcAction value.

	assert: (array at: 1) equals: object.

	(* Trigger stack overflow, causing this frame to be flushed to an activation. When control returns here, a new frame will be created for the activation. *)
	assert: (deepStack: 1000) equals: 1001000.

	(* Clears the temporary in the frame. *)
	object:: nil.
	gcAction value.

	(* Check the activation is not retaining a copy of our cleared temporary. *)
	assert: (array at: 1) equals: nil.
)
) : (
TEST_CONTEXT = ()
)
public class SymbolTests = TestContext () (
public testSymbolTableWeakness1 = (
	| weakCell = WeakArray new: 1. |
	(* Must not be a literal. *)
	weakCell at: 1 put: ('Hopefully unique string', 1 printString) asSymbol.

	gcAction value.

	assert: (weakCell at: 1) equals: nil.
)
public testSymbolTableWeakness2 = (
	| weakCell = Ephemeron new. |
	(* Must not be a literal. *)
	weakCell key: ('Hopefully unique string', 2 printString) asSymbol.

	gcAction value.

	assert: weakCell key equals: nil.
)
) : (
TEST_CONTEXT = ()
)
public class WeakArrayTests = TestContext () (
public testWeakArrayAt = (
	| array = WeakArray new: 2. empty = WeakArray new: 0. |
	array at: 1 put: 'apple'.
	array at: 2 put: 'banana'.

	assert: (array at: 1) equals: 'apple'.
	assert: (array at: 2) equals: 'banana'.
	should: [array at: 0] signal: Error.
	should: [array at: 3] signal: Error.
	should: [array at: -3] signal: Error.
	should: [array at: nil] signal: Error.

	should: [empty at: 1] signal: Error.
)
public testWeakArrayAtPut = (
	| array = WeakArray new: 2. empty = WeakArray new: 0. |
	assert: (array at: 1 put: 'apple') equals: 'apple'.
	assert: (array at: 2 put: 'banana') equals: 'banana'.
	should: [array at: 0 put: 'orange'] signal: Error.
	should: [array at: 3 put: 'orange'] signal: Error.
	should: [array at: -3 put: 'orange'] signal: Error.
	should: [array at: nil put: 'orange'] signal: Error.

	should: [empty at: 1 put: 'orange'] signal: Error.
)
public testWeakArrayFloatIndex = (
	| array = WeakArray new: 1. |
	should: [array at: 1 asFloat] signal: Error.
	should: [array at: 1 asFloat put: 0] signal: Error.
)
public testWeakArrayIsEmpty = (
	assert: (WeakArray new: 0) isEmpty.
	deny: (WeakArray new: 1) isEmpty.
)
public testWeakArrayNew = (
	assert: (WeakArray new: 0) size equals: 0.
	assert: (WeakArray new: 500) size equals: 500.

	should: [WeakArray new: -1] signal: Error.
	should: [WeakArray new: '10'] signal: Error.
	should: [WeakArray new: nil] signal: Error.
	should: [WeakArray new] signal: MessageNotUnderstood.
)
public testWeakArrayWeakness = (
	|
	array = WeakArray new: 1.
	object ::= Object new.
	|
	array at: 1 put: object.
	assert: (array at: 1) equals: object.

	gcAction value.

	assert: (array at: 1) equals: object.

	object:: nil.
	gcAction value.

	assert: (array at: 1) equals: nil.
)
) : (
TEST_CONTEXT = ()
)
public class WeakMapTests = TestContext () (
public testWeakMapBasic = (
	|
	map = WeakMap new.
	key = Object new.
	|
	assert: map isKindOfWeakMap.
	assert: (map at: key) equals: nil.
	assert: (map at: key put: 42) equals: 42.
	assert: (map at: key) equals: 42.
)
public testWeakMapGrowthExpand = (
	|
	map = WeakMap new.
	keys = Array new: 4097.
	values = Array new: 4097.
	|

	1 to: 4097 do:
		[:index | | key value |
		 key:: Object new.
		 value:: Object new.
		 map at: key put: value.
		 assert: (map at: key) equals: value.
		 keys at: index put: key.
		 values at: index put: value].

	1 to: 4097 do:
		[:index | | key value |
		 key:: keys at: index.
		 value:: values at: index.
		 assert: (map at: key) equals: value].
)
public testWeakMapGrowthTreadmill = (
	|
	map = WeakMap new.
	longTermKey = Object new.
	longTermValue = Object new.
	|
	map at: longTermKey put: longTermValue.

	1 to: 4097 do:
		[:iteration | | key value |
		 key:: Object new.
		 value:: Object new.
		 map at: key put: value.
		 (iteration \\ 512) = 0 ifTrue: [gcAction value].
		 assert: (map at: key) equals: value].

	assert: (map at: longTermKey) equals: longTermValue.
)
public testWeakMapWeakness = (
	|
	key ::= Object new.
	map = WeakMap new.
	array = WeakArray new: 1.
	|
	array at: 1 put: key.
	map at: key put: 42.

	gcAction value.

	deny: (array at: 1) equals: nil.
	assert: (map at: key) equals: 42.

	key:: nil.
	gcAction value.

	assert: (array at: 1) equals: nil.
)
) : (
TEST_CONTEXT = ()
)
) : (
)
