Newspeak3
'Root'
class HopscotchForCroquet usingPlatform: p <Platform> hopscotch: H <HopscotchForHTML5 class> = (
	|
(* imports *)
    private HopscotchForHTML5 = H.
    Promise = p actors Promise.
    Resolver = p actors Resolver.
	|
) (
public class Hopscotch usingPlatform: p <Platform> images: images ducts: ds =
  HopscotchForHTML5 usingPlatform: p images: images ducts: ds

(
(*
This class overrides the normal Hopscotch UI module to allow the UI to synchronize using croquet.io.
For every interactive fragment class, we maintain:

1) A subclass, defined here, that manages the interaction with Croquet.
2) A counter that is used to generate unique ids for each fragment.
3) A corresponding Javascript Croquet view type.

Each fragment is then connected to an instance of the corresponding Croquet view. It notifies this view when an interaction occurs. The view notifies the fragment when it can act - that is, when the reflector has signaled the Croquet model (which notifies the view). The fragment then performs the normal behavior defined in its superclass.

*)
  |
  buttonCount <Integer> ::= 0.
  imageButtonCount <Integer> ::= 0.  
  radioButtonCount <Integer> ::= 0. 
  checkboxCount <Integer> ::= 0.
  hyperlinkCount <Integer> ::= 0.
  hyperlinkImageCount <Integer> ::= 0.
  codeMirrorCount <Integer> ::= 0.
  toggleComposerCount <Integer> ::= 0.
  textEditorCount <Integer> ::= 0.
  js = p js.
  (* Croquet state - must be accessed lazily *)
    getCroquetRootView = [js global at: #theView].
    getCroquetRootModel = [js global at: #theModel].  
    private NewspeakCroquetButtonView_slot <Promise[Alien[NewspeakCroquetButtonView class]]>
    private NewspeakCroquetImageButtonView_slot <Promise[Alien[NewspeakCroquetImageButtonView class]]>
    private NewspeakCroquetRadioButtonView_slot <Promise[Alien[NewspeakCroquetRadioButtonView class]]>
    private NewspeakCroquetCheckboxView_slot <Promise[Alien[NewspeakCroquetCheckboxView class]]>
    private NewspeakCroquetHyperlinkView_slot <Promise[Alien[NewspeakCroquetHyperlinkView class]]>
    private NewspeakCroquetHyperlinkImageView_slot <Promise[Alien[NewspeakCroquetHyperlinkImageView class]]>    
    private NewspeakCroquetCodeMirrorView_slot <Promise[Alien[NewspeakCroquetCodeMirrorView class]]>    
    private NewspeakCroquetToggleComposerView_slot <Promise[Alien[NewspeakCroquetToggleComposerView class]]>
    private NewspeakCroquetTextEditorView <Promise[Alien[NewspeakCroquetTextEditorView class]]>
    
    rootView_slot <Alien[NewspeakCroquetView]>
    rootModel_slot <Alien[NewspeakCroquetModel]>
|
) (
class ButtonFragment label: l action: a = super ButtonFragment label: l action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetButtonView]]>
    buttonId <Integer> ::= newButtonId.
    scope_slot <String>
    |
    croquetView
) (
croquetModel = (
    ^croquetView model.
)
private NewspeakCroquetButtonView = (
   NewspeakCroquetButtonView_slot isNil ifTrue: [
     NewspeakCroquetButtonView_slot:: js global at: #NSCroquetButtonView
     ].
   ^NewspeakCroquetButtonView_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetButtonView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_button' eventSpec: #createButton data: scope].
  ^futureView promise
)
public scope ^ <String> = (
  (* Lazily return a unique identifier for this fragment *)
  scope_slot isNil ifTrue: [scope_slot: 'nsbutton_', buttonId printString].
  ^scope_slot
)
setupCroquetView = (
        (* ensure a corresponding Croquet view is set *)
        croquetView_slot:: getCroquetView.
        (* When the Croquet view is notified of a click, it will call back to the Newspeak button to perform its normal action *)
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value]
)
) : (
)
class ImageButtonFragment = super ImageButtonFragment (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetImageButtonView]]>
    imageButtonId <Integer> ::= newImageButtonId.
    scope_slot <String>
    |
    croquetView
) (
croquetModel = (
    ^croquetView model.
)
private NewspeakCroquetImageButtonView = (
   NewspeakCroquetImageButtonView_slot isNil ifTrue: [
     NewspeakCroquetImageButtonView_slot:: js global at: #NSCroquetImageButtonView
     ].
   ^NewspeakCroquetImageButtonView_slot
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nsImagebutton_', imageButtonId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <ImageButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value]
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetImageButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v out. v subscribe: scope event: #model_createImageButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetImageButtonView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_image_button' eventSpec: #createImageButton data: scope].
  ^futureView promise
)
) : (
)
class CheckboxFragment text: t <Holder> value: v <Boolean | Holder> action: a <[:Boolean]>  = super CheckboxFragment text: t value: v action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetCheckBoxView]]>
    checkboxId <Integer> ::= newCheckboxId.
    scope_slot <String>
    |
    croquetView
) (
croquetModel = (
    ^croquetView model.
)
private NewspeakCroquetCheckboxView = (
   NewspeakCroquetCheckboxView_slot isNil ifTrue: [
     NewspeakCroquetCheckboxView_slot:: js global at: #NSCroquetCheckboxView
     ].
   ^NewspeakCroquetCheckboxView_slot
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nscheckbox_', checkboxId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <CheckboxFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetCheckboxView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createCheckbox handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetCheckboxView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_checkbox' eventSpec: #createCheckbox data: scope].
  ^futureView promise
)
action = (
  ^[:b <Boolean> | croquetView <-: publish: scope event: (b ifTrue: [#checked] ifFalse: [#unchecked])]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_checked handler: [:e | super action value: true].
        croquetView <-: subscribe: scope eventSpec: #model_unchecked handler: [:e | super action value: false]
)
) : (
)
class RadioButtonFragment text: t <String> 
	value: v <Boolean | Holder> 
	group: g <String> 
	action: a <[:Boolean]> = super RadioButtonFragment text: t value: v group: g action: a (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetRadioButtonView]]>
    radioButtonId <Integer> ::= newRadioButtonId.
    scope_slot <String>
    |
    croquetView
) (
croquetModel = (
    ^croquetView model.
)
private NewspeakCroquetRadioButtonView = (
   NewspeakCroquetRadioButtonView_slot isNil ifTrue: [
     NewspeakCroquetRadioButtonView_slot:: js global at: #NSCroquetRadioButtonView
     ].
   ^NewspeakCroquetRadioButtonView_slot
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nsradiobutton_', radioButtonId printString].
  ^scope_slot
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <RadioButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetRadioButtonView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createRadioButton handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetRadioButtonView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_radio_button' eventSpec: #createRadioButton data: scope].
  ^futureView promise
)
action = (
  ^[:b <Boolean> | croquetView <-: publish: scope event: (b ifTrue: [#pressed] ifFalse: [#released])]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_pressed handler: [:e | super action value: true].
  croquetView <-: subscribe: scope eventSpec: #model_released handler: [:e | super action value: false]        
)
) : (
)
class HyperlinkFragment label: l action: a = super HyperlinkFragment label: l action: a (
   |
    public croquetView_slot <Promise[Alien[NewspeakCroquetHyperlinkView]]>
    hyperlinkId <Integer> ::= newHyperlinkId.
    scope_slot <String>
    |
    croquetView
) (
croquetModel = (
    ^croquetView model.
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <HyperlinkFragment>  ^ <Alien[LinkElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
action = (
  ^[croquetView <-: publish: scope event: #click]
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value]
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nshyperlink_', hyperlinkId printString].
  ^scope_slot
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetHyperlinkView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createHyperlink handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetHyperlinkView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_hyperlink' eventSpec: #createHyperlink data: scope].
  ^futureView promise
)
private NewspeakCroquetHyperlinkView = (
   NewspeakCroquetHyperlinkView_slot isNil ifTrue: [
     NewspeakCroquetHyperlinkView_slot:: js global at: #NSCroquetHyperlinkView
     ].
   ^NewspeakCroquetHyperlinkView_slot
)
) : (
)
public class CodeMirrorFragment onText: t <String> = super CodeMirrorFragment onText: t (
    |
    public croquetView_slot <Promise[Alien[NewspeakCodeMirrorView]]>
    codeMirrorId <Integer> ::= newCodeMirrorId.
    scope_slot <String>
    reflecting <Boolean> ::= true.
    |
    croquetView
) (
private NewspeakCroquetCodeMirrorView = (
   NewspeakCroquetCodeMirrorView_slot isNil ifTrue: [
     NewspeakCroquetCodeMirrorView_slot:: js global at: #NSCroquetCodeMirrorView
     ].
   ^NewspeakCroquetCodeMirrorView_slot
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nscodemirror_', codeMirrorId printString].
  ^scope_slot
)
croquetModel = (
    ^croquetView model.
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
updateVisualsFromSameKind: oldFragment <CodeMirrorFragment>  ^ <Alien[Element]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetCodeMirrorView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createCodeMirror handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetCodeMirrorView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_code_mirror' eventSpec: #createCodeMirror data: scope].
  ^futureView promise
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_keydown handler: [:e | reflecting:: false. super respondToKeyDown: e]
)
respondToKeyDown: event <Alien[Event]> = (
  ^[reflecting
        ifTrue: [preventDefault. croquetView <-: publish: scope eventSpec: #keydown data: event]
        ifFalse: [super respondToKeyDown: event.  reflecting:: true]
    ]
)
) : (
)
class HyperlinkImageFragment image: i action: a = super HyperlinkImageFragment (|
    public croquetView_slot <Promise[Alien[NewspeakCroquetHyperlinkImageView]]>
    hyperlinkImageId <Integer> ::= newHyperlinkImageId.
    scope_slot <String>
    |
    croquetView
) (
action = (
  ^[croquetView <-: publish: scope event: #click]
)
croquetModel = (
    ^croquetView model.
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nshyperlinkImage_', hyperlinkImageId printString].
  ^scope_slot
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_click handler: [:e | super action value]
)
updateVisualsFromSameKind: oldFragment <HyperlinkImageFragment>  ^ <Alien[LinkElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetHyperlinkImageView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createHyperlinkImage handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetHyperlinkImageView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_hyperlink_image' eventSpec: #createHyperlinkImage data: scope].
  ^futureView promise
)
private NewspeakCroquetHyperlinkImageView = (
   NewspeakCroquetHyperlinkImageView_slot isNil ifTrue: [
     NewspeakCroquetHyperlinkImageView_slot:: js global at: #NSCroquetHyperlinkImageView
     ].
   ^NewspeakCroquetHyperlinkImageView_slot
)
) : (
)
class ToggleComposer collapsedDefinition: collapsed <[Fragment]>
    expandedDefinition: expanded <[Fragment]>
    initiallyExpanded: flag <Boolean> = super ToggleComposer collapsedDefinition: collapsed 
    expandedDefinition: expanded 
    initiallyExpanded: flag (
    |
    public croquetView_slot <Promise[Alien[NewspeakCroquetToggleComposerView]]>
    toggleComposerId <Integer> ::= newToggleComposerId.
    scope_slot <String>
    |
    croquetView
) (
private NewspeakCroquetToggleComposerView = (
   NewspeakCroquetToggleComposerView_slot isNil ifTrue: [
     NewspeakCroquetToggleComposerView_slot:: js global at: #NSCroquetButtonView
     ].
   ^NewspeakCroquetToggleComposerView_slot
)
croquetModel = (
    ^croquetView model.
)
public scope ^ <String> = (
  scope_slot isNil ifTrue: [scope_slot: 'nstogglecomposer_', toggleComposerId printString].
  ^scope_slot
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetToggleComposerView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v subscribe: scope event: #model_createToggleComposer handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetToggleComposerView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_toggle_composer' eventSpec: #createToggleComposer data: scope].
  ^futureView promise
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
setupCroquetView = (
        croquetView_slot:: getCroquetView.
        croquetView <-: subscribe: scope eventSpec: #model_toggle handler: [:e | super toggle value]
)
updateVisualsFromSameKind: oldFragment <ToggleComposer>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
) : (
)
public class TextEditorFragment = super TextEditorFragment (
) (
respondToChange: event <Alien[Event]> = (
  croquetView <-: publish: scope event: #change data: (textEditor at: 'textContent')
)
respondToCancel: event <Alien[Event]> = (
  croquetView <-: publish: scope event: #cancel data: (textEditor at: 'textContent')
)
respondToAccept: event <Alien[Event]> = (
  croquetView <-: publish: scope event: #accept data: (textEditor at: 'textContent')
)
croquetModel = (
    ^croquetView model.
)
croquetView = (
    croquetView_slot isNil ifTrue: [setupCroquetView].
    ^croquetView_slot.
)
public scope ^ <String> = (
  (* Lazily return a unique identifier for this fragment *)
  scope_slot isNil ifTrue: [scope_slot: 'nstexteditor_', buttonId printString].
  ^scope_slot
)
getCroquetView ^ <Promise[Alien[NewspeakCroquetTextEditorView]]> = (
  |  (* create a future *) futureView <Resolver> = Resolver new.  resolved ::= false. |
  
  rootView then: [:v | v out. v subscribe: scope event: #model_createTextEditor handler: [:m | 
    resolved ifFalse: [
      resolved:: true.
      futureView fulfill: (NewspeakCroquetTextEditorView new: m)
      ]. 
      nil
  ]].
  rootView then: [ :v | v publish: 'newspeak_croquet_text_editor' eventSpec: #createTextEditor data: scope].
  ^futureView promise
)
updateVisualsFromSameKind: oldFragment <ImageButtonFragment>  ^ <Alien[ButtonElement]> = (
  scope_slot: oldFragment scope.
  croquetView_slot::  oldFragment croquetView_slot.
  ^super updateVisualsFromSameKind: oldFragment.
)
setupCroquetView = (
        (* ensure a corresponding Croquet view is set *)
        croquetView_slot:: getCroquetView.
        (* When the Croquet view is notified of a click, it will call back to the Newspeak button to perform its normal action *)
        (* how to get event data? *)
        croquetView <-: subscribe: scope eventSpec: #model_accept handler: [:e | textEditor at: 'textContent' put: data. super respondToAccept: e].
        croquetView <-: subscribe: scope eventSpec: #model_change handler: [:e | textEditor at: 'textContent' put: data. super respondToChange: e].
        croquetView <-: subscribe: scope eventSpec: #model_cancel handler: [:e | super respondToCancel: e].        
)
private NewspeakCroquetTextEditorView = (
   NewspeakCroquetTextEditorView_slot isNil ifTrue: [
     NewspeakCroquetTextEditorView_slot:: js global at: #NSCroquetTextEditorView
     ].
   ^NewspeakCroquetTextEditorView_slot
)
) : (
)
rootModel = (
  rootModel_slot isNil ifTrue: [rootModel_slot:: getCroquetRootModel value].
  ^rootModel_slot
)
newButtonId ^ <Integer> = (
  buttonCount::buttonCount + 1.
  ^buttonCount
)
rootView = (
  rootView_slot isNil ifTrue: [rootView_slot:: getCroquetRootView value].
  ^rootView_slot
)
newImageButtonId ^ <Integer> = (
  imageButtonCount:: imageButtonCount + 1.
  ^imageButtonCount
)
newRadioButtonId ^ <Integer> = (
  radioButtonCount:: radioButtonCount + 1.
  ^radioButtonCount
)
newHyperlinkId ^ <Integer> = (
  hyperlinkCount:: hyperlinkCount + 1.
  ^hyperlinkCount
)
newCodeMirrorId ^ <Integer> = (
  codeMirrorCount:: codeMirrorCount + 1.
  ^codeMirrorCount
)
newHyperlinkImageId ^ <Integer> = (
  hyperlinkImageCount:: hyperlinkImageCount + 1.
  ^hyperlinkImageCount
)
newToggleComposerId ^ <Integer> = (
  toggleComposerCount:: toggleComposerCount + 1.
  ^toggleComposerCount
)
newCheckboxId ^ <Integer> = (
  checkboxCount:: checkboxCount + 1.
  ^checkboxCount
)
) : (
)
) : (
)
