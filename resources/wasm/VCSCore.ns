Newspeak3
'MemoryHole'
class VCSCore usingPlatform: p vcs: vcs ide: ide = (
(* A source control application that supports different VCS backends (git, hg, ...).

Support for new VCSs can be added by providing a custom implementation of AbstractBackend.


Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*)
|
importedSourceMirrors = vcs sourceMirrors.

protected Set = p squeak Set.
protected List = p squeak OrderedCollection.
protected Map = p squeak Dictionary.
protected Stream = p squeak Stream.
protected ExternalLauncher = p squeak ExternalLauncher.
protected Monitor = p squeak Monitor.
protected MultiByteBinaryOrTextStream = p squeak MultiByteBinaryOrTextStream.
private CrLfFileStream = p squeak CrLfFileStream.
protected Transcript = p squeak Transcript.
private FileDirectory = p squeak FileDirectory.

protected Differencer = vcs diffing Differencer.

public logger = Logger new.
|) (
public class AbstractBackend = (
(* Abstract superclass for concrete back-ends. Provides shared functionality.

Concrete implementations must provide a subclass of AbstractBackend that implements classes/methods marked as such *)
) (
class AbstractLocalRepository onRepositoryId: repositoryId = Repository onRepositoryId: repositoryId (|
public repositoryDirectory = FileDirectory on: repositoryId.
public repositoryVersionAccessing = RepositoryVersionAccessing new.
|) (
class AbstractLocalHistorian named: n version: v = SuperHistorian named: n (|
	public version ::= v.
|) (
public canMergeWith: otherVersion = (
	^(version isAncestorOf: otherVersion version) not and: [
			(otherVersion version isAncestorOf: version) not]
)
public cloneAs: clonedHistorianName ifFail: failBlock = (
	^repository
		newHistorianNamed: clonedHistorianName
		setTo: version
		ifFail: failBlock.
)
forkAs: forkedHistorianName ifFail: failBlock = (
	| forkedHistorian |
	forkedHistorian:: repository newHistorianNamed: forkedHistorianName setTo: version ifFail: failBlock.
	^forkedHistorian
)
forwardTrackedHistorianIfFail: failBlock = (
	trackedHistorianifPresent: [:trackedHistorian | trackedHistorian setTo: version ifFail: failBlock]
	ifAbsent: [failBlock value: 'No tracked historian available']
	ifError: [
		logger warn: 'Couln''t access historian'.
		failBlock value: 'Failed to access historian']
)
public setTo: newVersion ifFail: failBlock = (
	super setTo: newVersion ifFail: failBlock.
	version:: newVersion
)
shareTo: remoteRepository = (
	| newName newHistorian |
	newHistorian:: remoteRepository newHistorianNamed: name setTo: version ifFail: [logger error: 'Could not create a new remote historian'].
	trackedHistorian: newHistorian.
)
public trackedHistorian: otherHistorian = (
	subclassResponsibility
)
public trackedHistorianifPresent: presentBlock ifAbsent: absentBlock ifError: errorBlock = (
	subclassResponsibility
)
) : (
)
class AbstractRepositoryVersionAccessing = () (
class AbstractRepositoryVersion = Version (
(* An immutable Version that can be retrieved from the repository using an identifier. *)
|
	public internalId
	public message
	public author
	cachedWithAncestors
|) (
public = other = (
	^other internalId = internalId
)
public hash = (
	^internalId hash
)
public isParentOfImage = (
	^imageHistorian version = self
)
public isRepositoryVersion = (
	^true
)
public loadIntoImage = (
	sourceMirrors installMirrorsAsToplevelClasses: mirrors
)
parentInternalIds = (
	subclassResponsibility
)
public parents = (
	^parentInternalIds collect: [:each | versionAtInternalId: each].
)
public withAncestors = (
	nil = cachedWithAncestors ifTrue: [
		cachedWithAncestors:: super withAncestors].
	^cachedWithAncestors
)
) : (
)
class AbstractRepositoryVersionStream onStream: s = Stream (|
	stream = s.
|) (
public atEnd = (
	^stream atEnd
)
public contents = (
	| copied |
	copied:: self class onStream: stream contents readStream.
	^Array streamContents: [:resultStream |
		[copied atEnd] whileFalse: [
			resultStream nextPut: copied next]].
)
nextLine = (
	^String streamContents: [:resultStream | | c |
		c:: stream next.
		[c = nil or: [c = Character cr] or: [c = Character lf]] whileFalse: [
			resultStream nextPut: c.
			c:: stream next]]
)
) : (
)
Version = (
	(* We shouldn't require this. But something appears to be broken with the compiler. *)
	^outer AbstractBackend Version
)
public exportVersionId: internalId to: remoteRepository = (
	subclassResponsibility
)
public importVersionId: internalId from: remoteRepository = (
	subclassResponsibility
)
public versionAtInternalId: internalId = (
	subclassResponsibility
)
) : (
)
RepositoryVersionAccessing = (
	subclassResponsibility
)
Stream = (
	(* Something is broken with the NS2 compiler. It cannot find Stream otherwise. *)
	^outer VCSCore Stream
)
SuperHistorian = (
	^super Historian
)
create = (
	subclassResponsibility
)
public exportVersionId: internalId to: remoteRepository = (
	repositoryVersionAccessing exportVersionId: internalId to: remoteRepository
)
historianNamed: name versionId: versionId = (
	^Historian named: name version: (versionAtInternalId: versionId)
)
public imageHistorian = (
	subclassResponsibility
)
public importVersionId: internalId from: remoteRepository = (
	^repositoryVersionAccessing importVersionId: internalId from: remoteRepository
)
public logStream = (
	^repositoryVersionAccessing logStream
)
public refresh = (
	(* May be overridden *)
)
public remoteRepositories = (
	subclassResponsibility
)
public remoteRepositoryAt: repositoryId = (
	^remoteRepositories detect: [:each |
		each repositoryId = repositoryId or: [each name = repositoryId]]
)
public versionAtInternalId: internalId = (
	^repositoryVersionAccessing versionAtInternalId: internalId
)
) : (
)
class AbstractRemoteRepository onLocalRepository: lr onRepositoryId: repositoryId onName: n = Repository onRepositoryId: repositoryId (|
	public localRepository = lr.
	public name = n. |) (
class AbstractRemoteHistorian named: historianName versionId: vId = GeneralHistorian named: historianName (
(* A historian stored in a remote repository. It knows only it's version's identifier *)
|
	versionId ::= vId.
|) (
createIfFail: failBlock = (
	repository importVersionId: version internalId.
	super createIfFail: failBlock
)
public isTracked = (
	^localRepository historians anySatisfy: [:each |
		each
			trackedHistorianifPresent: [:trackedHistorian | self = trackedHistorian]
			ifAbsent: [false]
			ifError: [
				logger warn: 'Couln''t access historian'.
				false]]
)
public trackAs: localHistorianName = (
	^localRepository
		newHistorianNamed: localHistorianName
		trackingHistorian: self
		setTo: version
		ifFail: [insertErrorHandlingForTrackingAHistorianWhenALocalHistorianWithTheGivenNameAlreadyExists]
)
public version = (
	repository exportVersionId: versionId.
	^localRepository versionAtInternalId: versionId
)
) : (
)
GeneralHistorian = (
	^super Historian
)
public exportVersionId: versionId = (
	localRepository importVersionId: versionId from: self
)
historianNamed: name versionId: versionId = (
	^Historian named: name versionId: versionId
)
public importVersionId: versionId = (
	localRepository exportVersionId: versionId to: self
)
repository = (
	^self
)
) : (
)
class AbstractRepository onRepositoryId: rid = (|
   	public repositoryId = rid.
	public cachedCommand
|) (
class AbstractCommand = (|
	cachedLauncher
|) (
class Launcher = (|
cachedExternalLauncher
public command
|) (
externalLauncher = (
	nil = cachedExternalLauncher ifTrue: [
		cachedExternalLauncher:: ExternalLauncher for: command.
		cachedExternalLauncher
			otherUnixLocations: {'/opt/local/bin'. '/usr/local/bin'};
			otherWindowsLocations: {'c:\cygwin\bin'}].
	cachedExternalLauncher programFullName = nil
		ifTrue: [Error signal: 'Cannot find ', command].
	^cachedExternalLauncher
)
noDefaultArgumentsRun: arguments = (
	^externalLauncher
		runWith: arguments
		ifSuccess: [:stdout <ReadStream> :stderr <ReadStream> |
			stdout contents]
		ifFailure: [:stdout <ReadStream> :stderr <ReadStream> |
			halt]
)
public run: arguments = (
	^run: arguments ifFail: [halt]
)
public run: arguments ifFail: failBlock= (

	^run: arguments ifSuccess: [:stdout :stderr | stdout contents asString] ifFailure: [:stdout :stderr | failBlock value]
)
public run: arguments ifSuccess: successBlock ifFailure: failureBlock = (
	^externalLauncher
		runWith: defaultArguments, arguments
		ifSuccess: [:stdout <ReadStream> :stderr <ReadStream> |
			successBlock value: stdout value: stderr]
		ifFailure: [:stdout <ReadStream> :stderr <ReadStream> |
			failureBlock value: stdout value: stderr]
)
public runBinaryStream: arguments = (
	| resultStream |
	resultStream:: run: arguments ifSuccess: [:stdout :stderr | stdout] ifFailure: [:stdout :stderr | halt].
	^resultStream binary
)
public runLines: arguments = (
	^runLines: arguments ifFail: [halt]
)
public runLines: arguments ifFail: failBlock = (
	| result|
	result:: List new.
	(run: arguments ifFail: failBlock) linesDo: [:each |
		result add: each].
	^result
)
public runStream: arguments = (
	| resultStream |
	resultStream:: run: arguments ifSuccess: [:stdout :stderr | stdout] ifFailure: [:stdout :stderr | halt].
	^resultStream contents asString readStream
)
) : (
)
commandLine = (
	subclassResponsibility
)
defaultArguments = (
	subclassResponsibility
)
ignoredFilename = (
	^'.ignore'
)
isFilenameIgnored: filename = (
	^filename = ignoredFilename
)
launcher = (
	cachedLauncher = nil ifTrue: [
		cachedLauncher:: Launcher new
			command: commandLine;
			yourself].
	^cachedLauncher
)
writeStream: stream toFileNamed: filename = (
	(CrLfFileStream forceNewFileNamed: (repository repositoryDirectory / filename) fullName)
		ascii;
		nextPutAll: stream contents;
		close.
)
) : (
)
class AbstractHistorian named: historianName = (|

	public name = historianName.
|) (
class AbstractHistorianChange onVersion: v = (
(* Encapsulates the action of committing a new version *)
|

newVersion = v.
|) (
changedMirrors = (
	| filteredZippedMirrors |
	(* TODO: Move zippedMirrors + allEqual into intermediate Project/StoreSnapshot abstraction. Check for senders of allEqual: *)
	filteredZippedMirrors:: zippedMirrors reject: [:each |
		nil = each first
			or: [Differencer allEqual: each]].
	^filteredZippedMirrors collect: [:each | each first]
)
public commit = (
	subclassResponsibility
)
deletedOriginalMirrors = (
	| filteredZippedMirrors |
	filteredZippedMirrors:: zippedMirrors select: [:each | nil = each first].
	^filteredZippedMirrors collect: [:each | each second]
)
historian = (
	^outer AbstractHistorian historian
)
zippedMirrors = (
	(* try zippedMirrorsWith: *)
	^newVersion zipMirrors: {newVersion mirrors. historian version mirrors}.
)
) : (
)
public = other = (
	^repository = other repository and: [name = other name]
)
HistorianChange = (
	subclassResponsibility
)
public canForwardTo: otherVersion = (
	^(version = otherVersion version) not and: [
		version isAncestorOf: otherVersion version]
)
public commit: v = (
	(* Commits a new version and sets the historian to it. We might want to do this using
	setTo:ifFail: only. We could dispatch on the version to determine whether the version is new and has to be committed. *)
	| change |
	(v parents includes: self version) ifFalse: [logger error: 'Trying to commit non-child version'].
	change:: HistorianChange onVersion: v.
	change commit
)
createIfFail: failBlock = (
	subclassResponsibility
)
public hash = (
	^name hash
)
historian = (
	^self
)
public loadIntoImage = (
	version loadIntoImage.
	makeCurrentHistorian
)
public makeCurrentHistorian = (
	subclassResponsibility
)
repository = (
	^outer AbstractRepository repository
)
public version = (
	subclassResponsibility
)
public versionsIncomingFrom: otherHistorian = (
	^version versionsIncomingFrom: otherHistorian version
)
) : (
)
public = other = (
	^self repositoryId = other repositoryId and: [
		self repositoryType = other repositoryType]
)
Historian = (
	subclassResponsibility
)
clone: repositoryLocation = (
	subclassResponsibility
)
command = (
	nil = cachedCommand ifTrue: [
		cachedCommand:: Command new.].
	^cachedCommand
)
public createNewVersion = (
	^NewVersion new
)
public hash = (
	^self repositoryId hash
)
public historianNamed: historianName ifFail: failBlock = (
	^historians detect: [:each | each name = historianName] ifNone: failBlock
)
historianNamed: name versionId: versionId = (
	(* Implemented in abstract subclasses *)
	subclassResponsibility
)
public historians = (
	subclassResponsibility
)
public logStream = (
	subclassResponsibility
)
public newHistorianNamed: historianName setTo: initialVersion ifFail: failBlock = (
	(historians anySatisfy: [:each | each name = historianName]) ifTrue: [
		^failBlock value].
	^(Historian named: historianName version: initialVersion)
		createIfFail: failBlock;
		yourself
)
public newHistorianNamed: historianName trackingHistorian: trackedHistorian setTo: initialVersion ifFail: failBlock = (
	| result |
	result:: newHistorianNamed: historianName setTo: initialVersion ifFail: failBlock.
	nil = trackedHistorian ifFalse: [
		result trackedHistorian: trackedHistorian].
	^result
)
repository = (
	^self
)
public repositoryType = (
	subclassResponsibility
)
) : (
)
class NewVersion = Version (
(* A version that has not yet been committed. *)
|
	public parents
	public mirrors
	public message
|) (
public = other = (
	(* TODO: Move zippedMirrors + allEqual into intermediate Project/StoreSnapshot abstraction. Check for senders of allEqual: *)
	^other message = message and: [ | zippedMirrors |
		zippedMirrors:: self zipMirrors: {self mirrors. other mirrors}.
		(zippedMirrors allSatisfy: [:each | Differencer allEqual: each]) and: [
			other parents asSet = parents asSet]]
)
public commonAncestorWith: version = (
	parents size = 0 ifTrue: [logger halt: 'no parents set'].
	^parents inject: version into: [:acc :each | acc commonAncestorWith: each]
)
public hash = (
	^message hash
)
) : (
)
class Version = (
(* Common functionality shared by all versions

Subclasses must provide:
- parents
- mirrors
- hash
- =
- commonAncestorWith:

Generic implementations could be provided for hash, =, commonAncestorWith: if needed at some point. *)
) (
= other = (
	subclassResponsibility
)
public commonAncestorWith: otherVersion = (
	subclassResponsibility
)
public diffsFrom: version = (
	| zippedMirrors |
	zippedMirrors:: zippedMirrorsWith: version.
	^zippedMirrors collect: [:each |
		Differencer compare: each last to:each first withAncestor: each second]
)
public diffsFromFirstParent = (
	^diffsFrom: parents first
)
diffsTo: version = (
	^version diffsFrom: self
)
genericZip: partitions sortBlock: sortBlock = (
	(* Taken from my parsing code *)
	| streams result partitionsHavingSmallest |
	result:: List new.
	partitionsHavingSmallest:: List new.
	streams:: partitions collect: [:each |
		(each asSortedList: sortBlock) readStream].
	[streams allSatisfy: [:each | each atEnd]] whileFalse: [ | smallest zipped |
		partitionsHavingSmallest reset.
		smallest:: nil.
		streams doWithIndex: [:stream :i | | c |
			stream atEnd ifFalse: [
				c:: stream peek.
				(smallest isNil or: [sortBlock value: c value: smallest]) ifTrue: [
					(smallest isNil or: [(sortBlock value: smallest value: c) not]) ifTrue: [
						smallest:: c.
						partitionsHavingSmallest reset].
					partitionsHavingSmallest add: i]]].
		zipped:: Array ofSize: partitions size. (* Object allocation *)
		partitionsHavingSmallest do: [:i | | stream |
			stream:: streams at: i.
			zipped at: i put: stream next].
		result add: zipped].
	^result
)
hash = (
	subclassResponsibility
)
public isAncestorOf: version = (
	^self = (self commonAncestorWith: version)
)
mirrors = (
	subclassResponsibility
)
parents = (
	subclassResponsibility
)
public versionsIncomingFrom: otherVersion = (
	(* The name isn't too descriptive. But withAncestorsNotContainedIn: (works the other way) isn't that good, either *)
	(* The implementation is slow and can be optimized to traverse ancestors in parallel, should efficiency become a problem. *)
	^otherVersion withAncestors copyWithoutAll: self withAncestors asSet
)
withAncestors = (
	(* While traversing our ancestors we must keep track of ancestors that we already added to the result. We're using an iterative approach for traversing through the ancestors, as a recursive algorithm was too slow. *)
	| result position ancestorsAlreadyAdded |

	result:: List new.
	position:: 1.
	ancestorsAlreadyAdded:: Set new.
	result add: self.

	[position > result size] whileFalse: [ | current |
		current:: result at: position.
		position:: position + 1.
		current parents do: [:each |
			(ancestorsAlreadyAdded includes: each) ifFalse: [
				ancestorsAlreadyAdded add: each.
				result add: each]]].
	^result
)
public zipMirrors: mirrorCollections = (
	| sortBlock |
	sortBlock:: [:a :b | a filename asString <= b filename asString]. (* filename not name because a module and package might share a name *)
	^genericZip: mirrorCollections sortBlock: sortBlock
)
zippedMirrorsWith: other = (
	| commonAncestor |
	commonAncestor:: commonAncestorWith: other.
	^zipMirrors: {mirrors. commonAncestor mirrors. other mirrors}.
)
) : (
)
LocalRepository = (
	subclassResponsibility
)
RemoteRepository = (
	subclassResponsibility
)
sourceMirrors = (
	^importedSourceMirrors
)
) : (
)
class Logger = (|
	logMonitor = Monitor new.
	logCounter ::= 0.
|) (
public error: msg = (
	Error signal: msg
)
public halt: message = (
	log: 'HALT: ', message.
	halt
)
public info: message = (
	log: 'INFO: ', message.
)
public log: message = (
	(* logMonitor critical: [
		logCounter:: logCounter + 1.
		Transcript cr; show: '[', logCounter asString, ' | ', Time now asString, ']', message.]. *)
)
public log: message around: block = (
	| result |
	log: '[BEGIN]', message.
	result:: block value.
	log: '[END]', message.
	^result
)
public warn: message = (
	log: 'WARNING: ', message
)
) : (
)
sourceMirrors = (
	^importedSourceMirrors
)
) : (
)
