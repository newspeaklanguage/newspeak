Newspeak3
'HostSystem-Requests'
class Request usingPlatform: platform = (
(*

   Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)
|
	OSProcess = platform squeak OSProcess.
	brazil = platform brazil.
	DirectoryPicker = brazil tools DirectoryPicker.
	FilePicker = brazil tools FilePicker.
	NewFilePicker = brazil tools NewFilePicker.
	Alien = platform squeak Alien.
	ObjectiveCClassAlien = platform squeak ObjectiveCClassAlien.
	UnhandledError = platform squeak UnhandledError.
	api = setupApi: platform.
|) (
public class Directory = (|
	initialDirectory|) (
macRequestDirectory ^<String> = (
	| panel files dir |
	(ObjectiveCClassAlien lookup: 'NSApplication' inFramework: 'AppKit') sharedApplication.
	(panel:: (ObjectiveCClassAlien lookup: 'NSOpenPanel' inFramework: 'AppKit') openPanel)
		setAllowsOtherFileTypes: false asAlien;
		setAllowsMultipleSelection: false asAlien;
		setCanChooseDirectories: true asAlien;
		setCanCreateDirectories: true asAlien;
		setCanChooseFiles: false asAlien.
	dir:: nil = initialDirectory ifTrue: [nil asAlien] ifFalse: [makeNSStringFrom: initialDirectory].
	(panel runModalForDirectory: dir file: nil asAlien types: nil asAlien) = 0 ifTrue:
		[^nil].
	^(panel filenames objectAtIndex: 0) UTF8String strcpyUTF8
)
openModal ^<String> = (
	| dialog |
	(* OSProcess isUnixMac ifTrue: [^macRequestDirectory]. *)
	dialog:: DirectoryPicker new.
	dialog open ifFalse: [^nil].
	^dialog selectedPath
)
) : (
)
public class File = (
(* I am used when one wants to prompt to open a file.  If a the current platform has a native dialog to do this, then that will be used.  If not, then the FilePicker from BrazilTools will be used.  I can be configured in different ways, and will pass those settings along to the dialog (if appropriate).

The allowedFileTypes slot, if not nil, is a collection of associations.  The key for each assocation is a description of the file type, and the value is the extension.  For example:
		{'Text File ( *.text)' ->'*.text'. 'Rich Text ( *.rtf)' -> '*.rtf'}
Note, that FilePicker does not support this behavior.  However, if allowedFileTypes is not empty, it will set FilePicker's filter to be the value of the first association. *)
|
	public initialDirectory < nil | String>
	public initialFile <nil | String>
	public allowedFileTypes <nil | Collection[Association]> ::= {}.
	public title <nil | String>
	public multipleSelection <Boolean> ::= false.
|) (
macRequestFiles ^<String> = (
	| panel files file dir |
	(ObjectiveCClassAlien lookup: 'NSApplication' inFramework: 'AppKit') sharedApplication.
	(panel:: (ObjectiveCClassAlien lookup: 'NSOpenPanel' inFramework: 'AppKit') openPanel)
		setAllowsOtherFileTypes: false asAlien;
		setAllowsMultipleSelection: multipleSelection asAlien;
		setCanChooseDirectories: false asAlien;
		setCanChooseFiles: true asAlien.
	dir:: nil = initialDirectory ifTrue: [nil asAlien] ifFalse: [makeNSStringFrom: initialDirectory].
	file:: nil = initialFile ifTrue: [nil asAlien] ifFalse: [makeNSStringFrom: initialFile].
	(panel runModalForDirectory: dir file: file types: nil asAlien) = 0
		ifTrue: [^nil].
	multipleSelection ifFalse: [^panel filename UTF8String strcpyUTF8].
	files:: panel filenames.
	files:: Array streamContents: [:a |
		0 to: files count - 1 do: [:i |
			a nextPut: (files objectAtIndex: i) UTF8String strcpyUTF8]].
	files isEmpty ifTrue: [^nil].
	^files first
)
public openModal ^<String> = (
	| dialog |
	(* OSProcess isUnixMac ifTrue: [^macRequestFiles]. *)
	OSProcess isWindows ifTrue: [^windowsRequestFile].
	dialog:: FilePicker new.
	(* FilePicker does not currently support the ability to tell it what set of extensions to
	filter on.  However, it does have a filter field and we can populate that with at
	least one of allowedFileTypes as a courtesy. *)
	allowedFileTypes isEmpty ifFalse:
		[dialog fileFilter: allowedFileTypes first value].
	dialog open ifFalse: [^nil].
	^dialog selectedPath
)
windowsRequestFile = (
	| openstruct strFilter selectedFile lpstrTitle result |
	openstruct:: api OPENFILENAME newC.
	strFilter:: nil.
	allowedFileTypes isEmpty ifFalse: [
		| filter |
		filter:: Array streamContents: [:s |
			allowedFileTypes do: [:ea <Association> |
				s nextPut: ea key.
				s nextPut: ea value]].
		strFilter:: api nullTerminatedCString: filter.
		openstruct lpstrFilter: strFilter address].
	lpstrTitle:: nil.
	title notNil ifTrue: [
		lpstrTitle:: api Alien newCString: title.
		openstruct lpstrTitle: lpstrTitle address].
	[result:: api GetOpenFileName boolValue: openstruct address.
	selectedFile:: openstruct fileName] ensure: [
		openstruct free.
		strFilter notNil ifTrue: [strFilter free].
		lpstrTitle notNil ifTrue: [lpstrTitle free]].
	result ifFalse: [^nil].
	selectedFile isEmpty ifTrue: [^nil].
	^selectedFile
)
) : (
)
public class NewFile = (
(* I am used when one wants to prompt to save a file.  If a the current platform has a native dialog to do this, then that will be used.  If not, then the NewFilePicker from BrazilTools will be used.  I can be configured in different ways, and will pass those settings along to the dialog (if appropriate).

See the class File for a description of allowedFileTypes. *)
|
	public initialDirectory < nil | String>
	public initialFile <nil | String>
	public allowedFileTypes <nil | Collection[Association]>
	public title <nil | String>
|) (
macRequestNewFile ^<String> = (
	| panel files file dir |
	(ObjectiveCClassAlien lookup: 'NSApplication' inFramework: 'AppKit') sharedApplication.
	(panel:: (ObjectiveCClassAlien lookup: 'NSSavePanel' inFramework: 'AppKit') savePanel)
		setAllowsOtherFileTypes: false asAlien;
		setAllowsMultipleSelection: false asAlien;
		setCanChooseDirectories: false asAlien;
		setCanChooseFiles: true asAlien.
	nil = title ifFalse: [panel setTitle: (makeNSStringFrom: title)].
	dir:: nil = initialDirectory ifTrue: [nil asAlien] ifFalse: [makeNSStringFrom: initialDirectory].
	file:: nil = initialFile ifTrue: [nil asAlien] ifFalse: [makeNSStringFrom: initialFile].
	(panel runModalForDirectory: dir file: file types: nil asAlien) = 0
		ifTrue: [^nil].
	^panel filename UTF8String strcpyUTF8
)
public openModal ^<String> = (
	| dialog |
	(* OSProcess isUnixMac ifTrue: [^macRequestNewFile]. *)
	OSProcess isWindows ifTrue: [^windowsRequestFile].
 	dialog:: NewFilePicker new.
	dialog fileName: initialFile.
	dialog open ifFalse: [^nil].
	^dialog selectedPath
)
windowsRequestFile = (
	| openstruct strFilter selectedFile lpstrTitle result |
	openstruct:: api OPENFILENAME newC.
	strFilter:: nil.
	allowedFileTypes notNil ifTrue: [
		| filter |
		filter:: Array streamContents: [:s |
			allowedFileTypes do: [:ea <Association> |
				s nextPut: ea key.
				s nextPut: ea value]].
		strFilter:: api nullTerminatedCString: filter.
		openstruct lpstrFilter: strFilter address].
	lpstrTitle:: nil.
	title notNil ifTrue: [
		lpstrTitle:: api Alien newCString: title.
		openstruct lpstrTitle: lpstrTitle address].
	initialFile notNil ifTrue: [ | sz |
		sz:: initialFile size.
		(Alien forPointer: openstruct lpstrFile)
			replaceFrom: 1 to: sz with: initialFile startingAt: 1;
			unsignedByteAt: sz + 1 put: 0].
	[result:: api GetSaveFileName boolValue: openstruct address.
	selectedFile:: openstruct fileName] ensure: [
		openstruct free.
		strFilter notNil ifTrue: [strFilter free].
		lpstrTitle notNil ifTrue: [lpstrTitle free]].
	result ifFalse: [^nil].
	selectedFile isEmpty ifTrue: [^nil].
	^selectedFile
)
) : (
)
adhocImport: sym = (
	^class environment at: sym
)
directory = (
	^Directory new
)
file = (
	^File new
)
handleFileDoesNotExist: exception <FileDoesNotExistException> = (
	^UnhandledError signalForException: exception
)
handleFileExists: exception <FileExistsException> = (
	^UnhandledError signalForException: exception
)
makeNSStringFrom: string = (
	^ObjectiveCClassAlien makeNSStringFrom: string
)
newFile = (
	^NewFile new
)
setupApi: platform <Platform> = (
	OSProcess isWindows ifTrue: [^platform apiManager win32api].
	^nil
)
) : (
)
