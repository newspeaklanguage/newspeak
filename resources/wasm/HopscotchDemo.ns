Newspeak3
'Samples'
class HopscotchDemo packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	private findImage = manifest hsFindImage.
	private peekingEye = manifest peekingeye1610.
	|
) (
class Demo usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Color = p graphics Color.
	Point = p graphics Point.
	Stopwatch = p kernel Stopwatch.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
|) (
class DemoPresenter onSubject: s = Presenter onSubject: s (| counter ::= 0. |) (
public definition = (
	| slowHolder echo |
	^(column: {
		row: {
			filler.
			(label: 'Hello, DOM New World!') color: (Color r: 1 g: 0 b: 0).
			filler.
		}.
		row: {
			(label: 'Allow this really long label to get cut off by the other one') compressibility: 1.
			filler compressibility: 0.
			label: 'Dont cut me off'.
		}.
		label: ' This label should have a leading space and should be cut off rather than wrapping onto another line.'.
		textDisplay: ' This text display should have a leading space. There     should    be     lots   of   space		between    these	words.  This text should wrap.  Until after here.
This is after a newline.'.
		row: {label: 'Nested'. label: ' in '. label: 'Outer'. filler.  sampleMenu. filler}.
		echo:: textDisplay: ''.
		TextEditorFragment new changeResponse: [:editor | echo text: editor textBeingAccepted].
		row: {
			link: 'Alan Kay' action: [echo text: '"In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing "computer stuff" into things each less strong than the whole--like data structures, procedures, and functions which are the usual paraphernalia of programming languages--each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network." --Alan Kay, The Early History of Smalltalk'].
			mediumBlank.
			link: 'Puck' action: [echo text: 'Yet but three? Come one more
Two of both kinds make up four'].
			mediumBlank.
			(link: 'Clear' action: [echo text: '']) color: (Color r: 1 g: 0 b: 0).
			blank: 25.
			link: 'Alert' action: [alert: 'Bar'].
		}.
		slowHolder:: holder: [column: {slow. slow}].
		button: 'Do it again!' action: [slowHolder refresh].
		image: peekingEye.
	}) color: (Color r: 0.855 g: 0.855 b: 0.9)
)
fib: n = (
	^n < 2 ifTrue: [1] ifFalse: [(fib: n - 1) + (fib: n - 2)]
)
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfDemoPresenter
)
sampleMenu ^ <DropDownMenuFragment> = (
	^dropDownMenu: [{{counter printString. [counter:: counter + 1. alert: counter]}. {'one'. [alert: '1']}. {'two'. [alert: '2']}. #separator. {'three'. [alert: '3']}. {subject elapsedMilliseconds printString. [alert: 'Dynamic!']}  }]
)
slow = (
	^initially:
		(label: 'Doing something slow...')
	deferred: [
		slowFib.
		row: {
			label: 'Done!'.
			mediumBlank.
			image: findImage.}].
)
slowFib = (
	| stopwatch ::= Stopwatch new start. |
	[ fib: 20.
	  stopwatch elapsedMilliseconds < 1000] whileTrue.
)
) : (
)
public class DemoSubject new = Subject onModel: nil (| stopwatch = Stopwatch new. |stopwatch start) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
public elapsedMilliseconds = (
	^stopwatch elapsedMilliseconds
)
) : (
)
) : (
)
public main: platform args: args = (
	| hopscotchPlatform demo |
	hopscotchPlatform:: hopscotchRuntime using: platform.
	demo:: Demo usingPlatform: hopscotchPlatform.
	hopscotchPlatform hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)
) : (
)
