Newspeak3
'CombinatorialParsing'
class ParserTesting usingPlatform: platform parserLib: parserLib minitest: minitest = (|
private TestContext = minitest TestContext.
private CombinatorialParser = parserLib CombinatorialParser.
private ExecutableGrammar = parserLib ExecutableGrammar.
|) (
public class ParserTests = TestContext (|
	grammar = ExecutableGrammar new.
|) (
assert: production accepts: input = (
	shouldnt: [production parse: input readStream] signal: Error.
)
assert: production rejects: input = (
	should: [production parse: input readStream] signal: Error.
)
public testAlternation = (
	assert: (grammar char: "b") | (grammar char: "B") accepts: 'b'.
	assert: (grammar char: "b") | (grammar char: "B") accepts: 'B'.
	assert: (grammar char: "B") | (grammar char: "b") accepts: 'b'.
	assert: (grammar char: "B") | (grammar char: "b") accepts: 'B'.
	assert: (grammar char: "b") | (grammar char: "B") rejects: 'a'.
	assert: (grammar char: "b") | (grammar char: "B") rejects: 'A'.
	assert: (grammar char: "b") | (grammar char: "B") rejects: 'c'.
	assert: (grammar char: "b") | (grammar char: "B") rejects: 'C'.
)
public testCharacter = (
	assert: (grammar char: "b") rejects: 'a'.
	assert: (grammar char: "b") accepts: 'b'.
	assert: (grammar char: "b") rejects: 'c'.
)
public testCharacterRange = (
	assert: (grammar charBetween: "b" and: "d") rejects: 'a'.
	assert: (grammar charBetween: "b" and: "d") accepts: 'b'.
	assert: (grammar charBetween: "b" and: "d") accepts: 'c'.
	assert: (grammar charBetween: "b" and: "d") accepts: 'd'.
	assert: (grammar charBetween: "b" and: "d") rejects: 'e'.
	assert: (grammar charBetween: "b" and: "d") rejects: 'B'.
)
public testEmpty = (
	assert: (grammar empty) accepts: ''.
	assert: (grammar empty) accepts: 'a'.
)
public testEndOfInput = (
	assert: (grammar eoi) accepts: ''.
	assert: (grammar eoi) rejects: 'a'.
)
public testFail = (
	assert: (grammar fail) rejects: ''.
	assert: (grammar fail) rejects: 'a'.
)
public testNegation = (
	assert: (grammar empty not) rejects: ''.
	assert: (grammar empty not) rejects: 'a'.

	assert: (grammar eoi not) rejects: ''.
	assert: (grammar eoi not) accepts: 'a'.

	assert: (grammar fail not) accepts: ''.
	assert: (grammar fail not) accepts: 'a'.

	assert: (grammar char: "b") not accepts: 'a'.
	assert: (grammar char: "b") not rejects: 'b'.
	assert: (grammar char: "b") not accepts: 'c'.

	assert: (grammar charBetween: "b" and: "d") not accepts: 'a'.
	assert: (grammar charBetween: "b" and: "d") not rejects: 'b'.
	assert: (grammar charBetween: "b" and: "d") not rejects: 'c'.
	assert: (grammar charBetween: "b" and: "d") not rejects: 'd'.
	assert: (grammar charBetween: "b" and: "d") not accepts: 'e'.
	assert: (grammar charBetween: "b" and: "d") not accepts: 'B'.
)
public testPlus = (
	assert: (grammar char: "b") plus rejects: ''.
	assert: (grammar char: "b") plus accepts: 'b'.
	assert: (grammar char: "b") plus accepts: 'bb'.
	assert: (grammar char: "b") plus accepts: 'bbbbbb'.
	assert: (grammar char: "b") plus rejects: 'abb'.
	assert: (grammar char: "b") plus rejects: 'Aabb'.

	assert: (grammar charBetween: "b" and: "d") plus rejects: ''.
	assert: (grammar charBetween: "b" and: "d") plus accepts: 'b'.
	assert: (grammar charBetween: "b" and: "d") plus accepts: 'bcd'.
	assert: (grammar charBetween: "b" and: "d") plus accepts: 'ddbc'.
	assert: (grammar charBetween: "b" and: "d") plus rejects: 'addbc'.
	assert: (grammar charBetween: "b" and: "d") plus rejects: 'Bdbc'.
)
public testSequence = (
	assert: (grammar char: "b") , (grammar char: "B") accepts: 'bB'.
	assert: (grammar char: "b") , (grammar char: "B") rejects: ''.
	assert: (grammar char: "b") , (grammar char: "B") rejects: 'Bb'.
	assert: (grammar char: "b") , (grammar char: "B") rejects: 'A'.

	assert: (grammar char: "B") , (grammar char: "b") accepts: 'Bb'.
	assert: (grammar char: "B") , (grammar char: "b") rejects: ''.
	assert: (grammar char: "B") , (grammar char: "b") rejects: 'bB'.
	assert: (grammar char: "B") , (grammar char: "b") rejects: 'A'.
)
public testStar = (
	assert: (grammar char: "b") star accepts: ''.
	assert: (grammar char: "b") star accepts: 'b'.
	assert: (grammar char: "b") star accepts: 'bb'.
	assert: (grammar char: "b") star accepts: 'bbbbbb'.
	assert: (grammar char: "b") star accepts: 'abb'.
	assert: (grammar char: "b") star accepts: 'Abb'.

	assert: (grammar charBetween: "b" and: "d") star accepts: ''.
	assert: (grammar charBetween: "b" and: "d") star accepts: 'b'.
	assert: (grammar charBetween: "b" and: "d") star accepts: 'bcd'.
	assert: (grammar charBetween: "b" and: "d") star accepts: 'ddbc'.
	assert: (grammar charBetween: "b" and: "d") star accepts: 'addbc'.
	assert: (grammar charBetween: "b" and: "d") star accepts: 'Bdbc'.
)
) : (
TEST_CONTEXT = (
)
)
) : (
)
