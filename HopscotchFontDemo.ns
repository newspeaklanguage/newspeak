Newspeak3
'Root'
class HopscotchFontDemo packageUsing: manifest = (
) (
class Demo usingPlatform: p = (|
    Holder = p hopscotch ducts Holder.
	Subject = p hopscotch Subject.
	Presenter = p hopscotch Presenter.
	Color = p graphics Color.	    
|) (
class DemoPresenter onSubject: s = Presenter onSubject: s (
    |
    underlined <Holder> = Holder with: true.  
    |
) (
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfDemoPresenter
)
public definition = (
    ^row: {
        column: {
                
            (row: {
                (label: 'Ultralight')
                    fontWeight: #ultralight.
            }).

            mediumBlank.

            (row: {
                (label: 'Thin')
                    fontWeight: #thin.
            }).

            mediumBlank.

            (row: {
                (label: 'Light')
                    fontWeight: #light.
            }).

            mediumBlank.

            (row: {
                (label: 'Regular')
                    fontWeight: #regular.
            }).

            mediumBlank.

            (row: {
                (label: 'Medium')
                    fontWeight: #medium.
            }).

            mediumBlank.

            (row: {
                (label: 'Semibold')
                    fontWeight: #semibold.
            }).

            mediumBlank.

            (row: {
                (label: 'Bold')
                    fontWeight: #bold.
            }).

            mediumBlank.

            (row: {
                (label: 'Heavy')
                    fontWeight: #heavy.
            }).

            mediumBlank.

            (row: {
                (label: 'Black')
                    fontWeight: #black.
            }).    
        }.

        mediumBlank.

        column: {
                
            (row: {
                (label: 'Underlined')
                    fontWeight: #ultralight;
                    underline.

                mediumBlank.

                checkbox: 'Underlined' 
                    value: underlined 
                    action: [ :checked | 
                        updateGUI: [checked out].
                    ].
            }).

            mediumBlank.

            (row: {
                (label: 'Strikethrough')
                    fontWeight: #thin;
                    strikethrough.

                mediumBlank.

                radioButton: 'On' 
                    value: true
                    group: 'strikethrough'
                    action: [ :checked | 
                        updateGUI: [checked out].
                    ].

                mediumBlank.

                radioButton: 'Off' 
                    value: false
                    group: 'strikethrough'
                    action: [ :checked | 
                        checked out.
                    ].
            }).

            mediumBlank.

            (row: {
                (label: 'Italic')
                    fontWeight: #light;
                    italic.

                mediumBlank.

                colorPicker: '#ff0000' action: [ :value | 
                    value out.
                ].
            }).

            mediumBlank.

            (row: {
                picker: 'Regular' 
                    items: {
                        'One'. 
                        'Two'. 
                        'Three'.
                    }
                    action: [ :item | 
                        item out.
                    ].
            }).

            mediumBlank.

            (row: {
                (label: 'Medium')
                    fontWeight: #medium.
            }).

            mediumBlank.

            (row: {
                (label: 'Semibold')
                    fontWeight: #semibold.

                mediumBlank.

                datePicker: '1984-01-22' action: [ :value | 
                    value out.
                ].
            }).

            mediumBlank.

            (row: {
                (label: 'Bold')
                    fontWeight: #bold.

                mediumBlank.

                timePicker: '14:00' action: [ :value | 
                    value out.
                ].
            }).

            mediumBlank.

            (row: {
                (label: 'Heavy')
                    fontWeight: #heavy.

                mediumBlank.

                progressBar: 0.5.
            }).

            mediumBlank.

            (row: {
                (label: 'Black')
                    fontWeight: #black.
            }).    
        }.
    }
)
) : (
)
public class DemoSubject new = Subject onModel: nil (
) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
isMyKind: other ^ <Boolean> = (
    ^other isKindOfDemoPresenter
)
) : (
)
) : (
)
public main: platform args: args = (
	| 
    demo = Demo usingPlatform: platform.
    |
	platform hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)
) : (
)
