Newspeak3
'Mirrors'
class MirrorTesting usingPlatform: p minitest: m model: md = (|
private ObjectMirror = p mirrors ObjectMirror.
private ClassMirror = p mirrors ClassMirror.
private Map = p collections Map.
private Set = p collections Set.
private TestContext = m TestContext.
private model = md.
|) (
public class ClassDeclarationMirrorTests = TestBase () (
public testClassDeclarationMirrorEnclosingClass = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin declaration.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin declaration.
	assert: mirror enclosingClass equals: mirror2.
	assert: mirror2 enclosingClass equals: nil.
)
public testClassDeclarationMirrorEquality = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin declaration.
	mirror2:: (ClassMirror reflecting: model Klass) mixin declaration.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror instanceSide.
	deny: mirror equals: mirror classSide.
	deny: mirror equals: mirror header.

	mirror:: (ObjectMirror reflecting: model) getClass mixin declaration.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin declaration.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror instanceSide.
	deny: mirror equals: mirror classSide.
	deny: mirror equals: mirror header.

	mirror:: (ClassMirror reflecting: model Klass) mixin declaration.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin declaration.
	deny: mirror equals: mirror2.
)
public testClassDeclarationMirrorName = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin declaration.
	assert: mirror name equals: 'Klass'. (* Not MirrorTestingModel`Klass *)

	mirror:: (ObjectMirror reflecting: model) getClass mixin declaration.
	assert: mirror name equals: 'MirrorTestingModel'.
)
public testIsKindOfClassDeclarationMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfClassDeclarationMirror.
	deny: classMirror isKindOfClassDeclarationMirror.
	deny: instanceMixinMirror isKindOfClassDeclarationMirror.
	assert: classDeclarationMirror isKindOfClassDeclarationMirror.
	deny: classHeaderMirror isKindOfClassDeclarationMirror.
	deny: classMixinMirror isKindOfClassDeclarationMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfClassDeclarationMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfClassDeclarationMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | assert: nestedClassMirror isKindOfClassDeclarationMirror].
)
) : (
TEST_CONTEXT = ()
)
public class ClassHeaderMirrorTests = TestBase () (
public testClassHeaderMirrorEquality = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin declaration header.
	mirror2:: (ClassMirror reflecting: model Klass) mixin declaration header.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.

	mirror:: (ObjectMirror reflecting: model) getClass mixin declaration header.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin declaration header.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.

	mirror:: (ClassMirror reflecting: model Klass) mixin declaration header.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin declaration header.
	deny: mirror equals: mirror2.
)
public testClassHeaderMirrorName = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin declaration header.
	assert: mirror name equals: 'Klass'. (* Not MirrorTestingModel`Klass *)

	mirror:: (ObjectMirror reflecting: model) getClass mixin declaration header.
	assert: mirror name equals: 'MirrorTestingModel'.
)
public testIsKindOfClassHeaderMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfClassHeaderMirror.
	deny: classMirror isKindOfClassHeaderMirror.
	deny: instanceMixinMirror isKindOfClassHeaderMirror.
	deny: classDeclarationMirror isKindOfClassHeaderMirror.
	assert: classHeaderMirror isKindOfClassHeaderMirror.
	deny: classMixinMirror isKindOfClassHeaderMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfClassHeaderMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfClassHeaderMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfClassHeaderMirror].
)
) : (
TEST_CONTEXT = ()
)
public class ClassMirrorTests = TestBase () (
classOf: classMirror = (
	^(ObjectMirror reflecting: classMirror reflectee) getClass
)
public testClassMirrorEnclosingObject = (
	assert: (ClassMirror reflecting: model Klass) enclosingObject
	equals: (ObjectMirror reflecting: model).

	assert: (ObjectMirror reflecting: model) getClass enclosingObject
	equals: (ObjectMirror reflecting: nil).

	(* :todo: Cases with generalized mixin application *)
)
public testClassMirrorEquality = (
	| mirror mirror2 |
	mirror:: ClassMirror reflecting: model Klass.
	mirror2:: (ObjectMirror reflecting: (model Klass factory: 2)) getClass.
	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.

	mirror:: (ObjectMirror reflecting: model) getClass.
	mirror2:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.

	mirror:: ClassMirror reflecting: model Klass.
	mirror2:: (ObjectMirror reflecting: model) getClass.
	deny: mirror equals: mirror2.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.

	(* Same mixin, same superclass, different enclosing object. *)
	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror2:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror mixin equals: mirror2 mixin.
	deny: mirror equals: mirror2.
	deny: mirror2 equals: mirror.
)
public testClassMirrorIsMeta = (
	| mirror mirror2 |
	mirror:: ClassMirror reflecting: model Klass.
	deny: mirror isMeta.

	mirror:: (ObjectMirror reflecting: model Klass) getClass.
	assert: mirror isMeta.

	mirror:: (ObjectMirror reflecting: model) getClass.
	deny: mirror isMeta.

	mirror:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	deny: mirror isMeta.

	mirror:: ClassMirror reflecting: self class yourclass.
	assert: mirror isMeta.
)
public testClassMirrorMethods = (
	| object mirror |
	(* Fails because of all the stuff from ImplementationBase in Squeak *)
	object:: (ClassMirror reflecting: Object) mixin.
	mirror:: ClassMirror reflecting: model Klass.
	assertSet: ((mirror methods reject: [:method | method definingMixin = object])
		collect: [:method | method name])
	equals: {'superMethod'. '>>>'. 'defaultMethod'. 'keyword:method:'. 'privateMethod'. 'protectedMethod'. 'publicMethod'}.

	mirror:: classOf: mirror.
	mirror methods.
)
public testClassMirrorName = (
	(* :todo: Should we answer the name with or without the hash?

	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: (model Klass factory: 2)) getClass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: model) getClass.
	assert: mirror name equals: 'MirrorTestingModel'.

	mirror:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	assert: mirror name equals: 'MirrorTestingModel'.

	mirror:: ClassMirror reflecting: model Klass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: model) getClass.
	assert: mirror name equals: 'MirrorTestingModel'.

	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror name equals: 'Nested'.

	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror name equals: 'Nested'. *)
)
public testClassMirrorNestedClasses = (
	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assertSet: (mirror nestedClasses collect: [:klass | klass name])
	equals: {'SuperNestedClass'. 'DefaultNestedClass'. 'Nested'. 'PrivateNestedClass'. 'ProtectedNestedClass'. 'PublicNestedClass'}.

	mirror:: classOf: mirror.
	mirror nestedClasses.
)
public testClassMirrorNonBehavior = (
	should: [ClassMirror reflecting: 'Not a behavior'] signal: Error
)
public testClassMirrorSlots = (
	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assertList: (mirror slots collect: [:slot | slot name])
	equals: {'superSlot'. 'publicSlot'. 'protectedSlot'. 'defaultSlot'. 'privateSlot'. 'mutableSlot'. 'immutableSlot'. 'uninitializedSlot'}.

	mirror:: classOf: mirror.
	mirror slots.
)
public testClassMirrorSuperclass = (
	assert: (ClassMirror reflecting: model Klass) superclass
	equals: (ClassMirror reflecting: model SuperKlass).

	assert: (ClassMirror reflecting: model SuperKlass) superclass
	equals: (ClassMirror reflecting: Object).

	assert: (ClassMirror reflecting: Object) superclass
	equals: nil. (* fails in Squeak because the superclass of Object is ImplementationBase *)

	(* :todo: Cases with generalized mixin application *)
)
public testIsKindOfClassMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfClassMirror.
	assert: classMirror isKindOfClassMirror.
	deny: instanceMixinMirror isKindOfClassMirror.
	deny: classDeclarationMirror isKindOfClassMirror.
	deny: classHeaderMirror isKindOfClassMirror.
	deny: classMixinMirror isKindOfClassMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfClassMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfClassMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfClassMirror].
)
public testMetaRelationships = (
	|
	mClassMirrorTests = ClassMirror reflecting: class.
	mObject = ClassMirror reflecting: Object.
	mClass = (classOf: mClassMirrorTests) superclass.
	mMetaclass = classOf: (classOf: mClassMirrorTests).
	|
	assert: [mObject mixin name = 'Object' or: [mObject mixin name = '_Object']].
	assert: mClass mixin name equals: 'Class'.
	assert: mMetaclass mixin name equals: 'Metaclass'.

	assert: [mClass superclass = mObject
			or: [mClass superclass superclass = mObject]]
	description: 'Class superclass [superclass] = Object'.

	assert: (classOf: mObject) superclass equals: mClass.
	assert: (classOf: mClass) superclass equals: mClass.
	assert: (classOf: mClassMirrorTests) superclass equals: mClass.
	assert: (classOf: mMetaclass) superclass equals: mClass.

	assert: (classOf: (classOf: mObject)) equals: mMetaclass.
	assert: (classOf: (classOf: mClass)) equals: mMetaclass.
	assert: (classOf: (classOf: mMetaclass)) equals: mMetaclass.
	assert: (classOf: (classOf: mClassMirrorTests)) equals: mMetaclass.
)
) : (
TEST_CONTEXT = ()
public yourclass = (
	^self class
)
)
class ErrorOnEquals = () (
public = other = (
	^Error new signal
)
public class = (
	^Error new signal
)
public hash = (
	^Error new signal
)
) : (
)
public class MethodMirrorTests = TestBase () (
public testIsKindOfMethodMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfMethodMirror.
	deny: classMirror isKindOfMethodMirror.
	deny: instanceMixinMirror isKindOfMethodMirror.
	deny: classDeclarationMirror isKindOfMethodMirror.
	deny: classHeaderMirror isKindOfMethodMirror.
	deny: classMixinMirror isKindOfMethodMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfMethodMirror].
	classMirror methods do:
		[:methodMirror | assert: methodMirror isKindOfMethodMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfMethodMirror].
)
public testMethodMirrorAccessModifier = (
	| methods |
	methods:: (ClassMirror reflecting: model Klass) mixin methods.
	assert: (in: methods findMirrorNamed: 'defaultMethod') accessModifier equals: #protected.
	assert: (in: methods findMirrorNamed: 'privateMethod') accessModifier equals: #private.
	assert: (in: methods findMirrorNamed: 'protectedMethod') accessModifier equals: #protected.
	assert: (in: methods findMirrorNamed: 'publicMethod') accessModifier equals: #public.
)
public testMethodMirrorEquality = (
	| mirror mirror2 mirror3 methods |

	(* Different applications of the same mixin. *)
	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror:: in: mirror methods findMirrorNamed: 'nestedMethod'.

	mirror2:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror2:: in: mirror2 methods findMirrorNamed: 'nestedMethod'.

	mirror3:: (ClassMirror reflecting: model Klass).
	mirror3:: in: mirror3 nestedClasses findMirrorNamed: 'Nested'.
	mirror3:: in: mirror3 instanceSide methods findMirrorNamed: 'nestedMethod'.

	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror3.
	assert: mirror3 equals: mirror.

	assert: mirror hash equals: mirror2 hash.
	assert: mirror2 hash equals: mirror3 hash.
	assert: mirror3 hash equals: mirror hash.

	(* Different methods. *)
	methods:: (ClassMirror reflecting: model Klass) mixin methods.
	mirror:: in: methods findMirrorNamed: 'protectedMethod'.
	mirror2:: in: methods findMirrorNamed: 'privateMethod'.
	mirror3:: in: methods findMirrorNamed: 'publicMethod'.

	deny: mirror equals: mirror2.
	deny: mirror2 equals: mirror3.
	deny: mirror3 equals: mirror.
	deny: mirror equals: nil.
	deny: nil equals: mirror.
)
) : (
TEST_CONTEXT = ()
)
public class MixinMirrorTests = TestBase () (
public testIsKindOfMixinMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfMixinMirror.
	deny: classMirror isKindOfMixinMirror.
	assert: instanceMixinMirror isKindOfMixinMirror.
	deny: classDeclarationMirror isKindOfMixinMirror.
	deny: classHeaderMirror isKindOfMixinMirror.
	assert: classMixinMirror isKindOfMixinMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfMixinMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfMixinMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfMixinMirror].
)
public testMixinMirrorDeclaration = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror declaration name equals: 'Klass'.
	assert: mirror declaration instanceSide equals: mirror.

	deny: mirror declaration equals: mirror. (* Even though they have the same reflectee. *)

	mirror:: (ObjectMirror reflecting: model Klass) getClass mixin.
	assert: mirror declaration name equals: 'Klass'.
	assert: mirror declaration classSide equals: mirror.

	deny: mirror declaration equals: mirror.
)
public testMixinMirrorEnclosingMixin = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror enclosingMixin equals: mirror2.
	assert: mirror2 enclosingMixin equals: nil.
)
public testMixinMirrorEquality = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.

	mirror:: (ObjectMirror reflecting: model) getClass mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.

	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	deny: mirror equals: mirror2.
)
public testMixinMirrorIsMeta = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	deny: mirror isMeta.

	mirror:: mirror declaration classSide.
	assert: mirror isMeta.
)
public testMixinMirrorMethods = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertSet: (mirror methods collect: [:method | method name])
	equals: {'>>>'. 'defaultMethod'. 'keyword:method:'. 'privateMethod'. 'protectedMethod'. 'publicMethod'}.
	mirror methods do: [:method | assert: method definingMixin equals: mirror].

	mirror:: mirror declaration classSide.
	assertSet: (mirror methods collect: [:method | method name])
	equals: {'classMethod'}.
	mirror methods do: [:method | assert: method definingMixin equals: mirror].
)
public testMixinMirrorName = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror name equals: 'Klass'. (* Not MirrorTestingModel`Klass *)
	mirror:: mirror declaration classSide.
	assert: mirror name equals: 'Klass class'.

	mirror:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror name equals: 'MirrorTestingModel'.
	mirror:: mirror declaration classSide.
	assert: mirror name equals: 'MirrorTestingModel class'.
)
public testMixinMirrorNestedClasses = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertSet: (mirror nestedClasses collect: [:klass | klass name])
	equals: {'DefaultNestedClass'. 'Nested'. 'PrivateNestedClass'. 'ProtectedNestedClass'. 'PublicNestedClass'}.
	mirror nestedClasses do: [:klass | assert: klass definingMixin equals: mirror].

	mirror:: mirror declaration classSide.
	assertSet: (mirror nestedClasses collect: [:klass | klass name])
	equals: {}.
	mirror nestedClasses do: [:klass | assert: klass definingMixin equals: mirror].
)
public testMixinMirrorSlots = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertList: (mirror slots collect: [:slot | slot name])
	equals: {'publicSlot'. 'protectedSlot'. 'defaultSlot'. 'privateSlot'. 'mutableSlot'. 'immutableSlot'. 'uninitializedSlot'}.
	mirror slots do: [:slot | assert: slot definingMixin equals: mirror].

	mirror:: mirror declaration classSide.
	assertList: (mirror slots collect: [:slot | slot name])
	equals: {}.
	mirror slots do: [:slot | assert: slot definingMixin equals: mirror].
)
) : (
TEST_CONTEXT = ()
)
public class ObjectMirrorTests = TestBase () (
class A = (
|
	public a1
	public a2
|
) (
foo = ( ^'A' )
) : (
)
class B = A () (
foo = ( ^'B' )
) : (
)
class C = B (
|
	public c1
	public c2
|
) (
foo = ( ^'C' )
) : (
)
public testIsKindOfObjectMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	assert: objectMirror isKindOfObjectMirror.
	deny: classMirror isKindOfObjectMirror.
	deny: instanceMixinMirror isKindOfObjectMirror.
	deny: classDeclarationMirror isKindOfObjectMirror.
	deny: classHeaderMirror isKindOfObjectMirror.
	deny: classMixinMirror isKindOfObjectMirror.
	classMirror slots do:
		[:slotMirror | deny: slotMirror isKindOfObjectMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfObjectMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfObjectMirror].
)
public testObjectMirrorEquality = (
	| a b |
	a:: ErrorOnEquals new.
	b:: ErrorOnEquals new.

	assert: (ObjectMirror reflecting: a) equals: (ObjectMirror reflecting: a).
	assert: (ObjectMirror reflecting: a) hash equals: (ObjectMirror reflecting: a) hash.

	deny: (ObjectMirror reflecting: a) equals: (ObjectMirror reflecting: b).

	deny: (ObjectMirror reflecting: a) equals: nil.
	deny: nil equals: (ObjectMirror reflecting: a).
)
public testObjectMirrorEvaluate = (
	| c mirror thread |
	c:: C new.
	mirror:: ObjectMirror reflecting: c.
	thread:: mirror evaluate: 'foo'.
	assert: thread isFulfilled.
	assert: thread result reflectee equals: 'C'.

	should: [mirror evaluate: '--parse--error--'] signal: Error.
)
public testObjectMirrorEvaluateEmpty = (
	| c mirror thread |
	c:: C new.
	mirror:: ObjectMirror reflecting: c.
	thread:: mirror evaluate: ''.
	assert: thread isFulfilled.
	assert: thread result reflectee equals: c.
)
public testObjectMirrorEvaluateWithScope = (
	| c mirror scope thread |
	c:: C new.
	c a1: 3.
	c c1: 4.
	mirror:: ObjectMirror reflecting: c.
	scope:: Map new.
	scope at: #w put: (ObjectMirror reflecting: 10).
	thread:: mirror evaluate: 'a1 + c1 + w' with: scope.
	assert: thread isFulfilled.
	assert: thread result reflectee equals: 17.
)
public testObjectMirrorGetClass = (
	| a |
	a:: ErrorOnEquals new.

	assert: (ObjectMirror reflecting: a) getClass equals: (ClassMirror reflecting: ErrorOnEquals).
	assert: (ObjectMirror reflecting: a) getClass reflectee equals: ErrorOnEquals.
)
public testObjectMirrorGetSlot = (
	| c mirror result |
	c:: C new.
	c a1: 10.
	c a2: 20.
	c c1: 30.
	c c2: 40.
	mirror:: ObjectMirror reflecting: c.
	result:: mirror getSlot: #a1.
	assert: result reflectee equals: 10.
	result:: mirror getSlot: #a2.
	assert: result reflectee equals: 20.
	result:: mirror getSlot: #c1.
	assert: result reflectee equals: 30.
	result:: mirror getSlot: #c2.
	assert: result reflectee equals: 40.
)
public testObjectMirrorPerform = (
)
public testObjectMirrorReflectee = (
	| obj |
	obj:: Object new.
	assert: (ObjectMirror reflecting: obj) reflectee equals: obj.
)
public testObjectMirrorSetClass = (
)
public testObjectMirrorSetClassShapeChange = (
)
public testObjectMirrorSetSlot = (
	| c mirror result |
	c:: C new.
	c a1: 10.
	c a2: 20.
	c c1: 30.
	c c2: 40.
	mirror:: ObjectMirror reflecting: c.

	mirror setSlot: #a1 to: 100.
	assert: c a1 equals: 100.
	assert: c a2 equals: 20.
	assert: c c1 equals: 30.
	assert: c c2 equals: 40.

	mirror setSlot: #a2 to: 200.
	assert: c a1 equals: 100.
	assert: c a2 equals: 200.
	assert: c c1 equals: 30.
	assert: c c2 equals: 40.

	mirror setSlot: #c1 to: 300.
	assert: c a1 equals: 100.
	assert: c a2 equals: 200.
	assert: c c1 equals: 300.
	assert: c c2 equals: 40.

	mirror setSlot: #c2 to: 400.
	assert: c a1 equals: 100.
	assert: c a2 equals: 200.
	assert: c c1 equals: 300.
	assert: c c2 equals: 400.
)
public testObjectMirrorSetSlotImmutable = (
)
) : (
TEST_CONTEXT = ()
)
public class SlotDeclarationMirrorTests = TestBase () (
public testIsKindOfSlotDeclarationMirror = (
	|
	objectMirror = ObjectMirror reflecting: model.
	classMirror = objectMirror getClass.
	instanceMixinMirror = classMirror mixin.
	classDeclarationMirror = instanceMixinMirror declaration.
	classHeaderMirror = classDeclarationMirror header.
	classMixinMirror = classDeclarationMirror classSide.
	|

	deny: objectMirror isKindOfSlotDeclarationMirror.
	deny: classMirror isKindOfSlotDeclarationMirror.
	deny: instanceMixinMirror isKindOfSlotDeclarationMirror.
	deny: classDeclarationMirror isKindOfSlotDeclarationMirror.
	deny: classHeaderMirror isKindOfSlotDeclarationMirror.
	deny: classMixinMirror isKindOfSlotDeclarationMirror.
	classMirror slots do:
		[:slotMirror | assert: slotMirror isKindOfSlotDeclarationMirror].
	classMirror methods do:
		[:methodMirror | deny: methodMirror isKindOfSlotDeclarationMirror].
	classMirror nestedClasses do:
		[:nestedClassMirror | deny: nestedClassMirror isKindOfSlotDeclarationMirror].
)
public testSlotDeclarationMirrorAccessModifier = (
	| slots |
	slots:: (ClassMirror reflecting: model Klass) mixin slots.
	assert: (in: slots findMirrorNamed: 'defaultSlot') accessModifier equals: #protected.
	assert: (in: slots findMirrorNamed: 'privateSlot') accessModifier equals: #private.
	assert: (in: slots findMirrorNamed: 'protectedSlot') accessModifier equals: #protected.
	assert: (in: slots findMirrorNamed: 'publicSlot') accessModifier equals: #public.
)
public testSlotDeclarationMirrorIsMutable = (
	| slots |
	slots:: (ClassMirror reflecting: model Klass) mixin slots.
	assert: (in: slots findMirrorNamed: 'mutableSlot') isMutable.
	deny: (in: slots findMirrorNamed: 'immutableSlot') isMutable.
	assert: (in: slots findMirrorNamed: 'uninitializedSlot') isMutable.
)
) : (
TEST_CONTEXT = ()
)
class TestBase = TestContext () (
assertSet: actual equals: expected = (
	| missing extra missingString extraString |
	missing:: Set new.
	missing addAll: expected.
	actual do: [:element | missing remove: element ifAbsent: []].
	extra:: Set new.
	extra addAll: actual.
	expected do: [:element | extra remove: element ifAbsent: []].
	(missing isEmpty and: [extra isEmpty]) ifTrue: [^self].

	missingString: ''.
	missing do: [:element | missingString: missingString, ' ', element printString].
	extraString: ''.
	extra do: [:element | extraString: extraString, ' ', element printString].

	failWithMessage: 'Missing:', missingString, ' Extra:', extraString.
)
in: collection findMirrorNamed: name = (
	collection do: [:mirror | mirror name = name ifTrue: [^mirror]].
	^nil
)
) : (
)
) : (
)
