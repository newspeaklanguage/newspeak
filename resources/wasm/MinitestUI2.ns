Newspeak3
'Root'
class MinitestUI2 usingPlatform: p minitest: mt ide: devEnv = (
	(* Hopscotch UI for unit testing using Minitest. *)
	|
	private List = p collections List.
	private Map = p collections Map.
    private Set = p collections Set.
	private Promise = p actors Promise.
	private Color = p graphics Color.
	private Gradient = p hopscotch Gradient.
	private Presenter = p hopscotch Presenter.
	private Subject = p hopscotch Subject.

	private TestCatalog = mt TestCatalog.

	private AssortedMethodsPresenter = devEnv browsing AssortedMethodsPresenter.
    private AssortedMethodsSubject = devEnv browsing AssortedMethodsSubject.

	private MethodSubject = devEnv browsing MethodSubject.
    private MethodPresenter = devEnv browsing MethodPresenter.
	private ProgrammingPresenter = devEnv browsing ProgrammingPresenter.

	private ide = devEnv.
	private platform = p.
	private minitest = mt.
	|
) (
class TestResultListPresenter onSubject: s = AssortedMethodsPresenter onSubject: s (
(* A presenter for a list of TestResults, such as a list of successes or failures of a test run. *)
) (
contentPresenters ^ <Collection[Presenter]> = (
	| sortedTestResults |
	sortedTestResults:: subject results (* asSortedList:
		[:a :b | a testCase selector < b testCase selector] *).
	^sortedTestResults collect:
		[:each <TestResult> |
		(TestResultPresenter onSubject: (TestResultSubject onModel: each)) showIndicatorBar: false]
)
public isKindOfTestResultListPresenter ^ <Boolean> = (
	^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTestResultListPresenter
)
runAll = (
	sendUp respondToRunAll: content presenters
)
) : (
)
class TestResultListSubject onModel: list = Subject onModel: list (
(* The subject of a list of test results, such as a list of successes or failures of a test run. The model is a list of TestResult instances. *)
) (
public createPresenter = (
	^TestResultListPresenter onSubject: self
)
public isEmpty ^ <Boolean> = (
	^model isEmpty
)
public isKindOfTestResultListSubject ^ <Booelan> = (
  ^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfTestResultListSubject
)
public results = (
	^model
)
) : (
)
class TestResultPresenter onSubject: s = ProgrammingPresenter onSubject: s (
(* Shows a single TestResult as an expandable selector of the method defining the test. If the result is a failure, also shows the description of the failure. *)
|
	public showIndicatorBar <Boolean> ::= true.
	methodPresenterSlot <MethodPresenter>
|) (
ancestorTestingOutcomePresenter = (
	| ancestor ::= parent. |
	[nil = ancestor] whileFalse:
		[ancestor isKindOfTestingOutcomePresenter ifTrue:
			[^ancestor].
		 ancestor:: ancestor parent].
	^nil
)
public collapse = (
	methodPresenter collapse
)
definition ^ <Fragment> = (
	^showIndicatorBar
		ifTrue: [row: {indicatorBar. elastic:: resultColumn}]
		ifFalse: [resultColumn]
)
exceptionFragment ^ <Fragment> = (
	| link |
	link::
		(link: subject exception printString
		action: [ancestorTestingOutcomePresenter runWithNoExceptionHandling: subject testCase])
			color: footnoteColor.
	^row: {
		blank: 12.
		elastic: link.
		}
)
public expand = (
	methodPresenter expand
)
failureFragment ^ <Fragment> = (
	^row: {
		blank: 12.
		(link: subject failureDescription
		action: [ancestorTestingOutcomePresenter runToDebugFailure: subject testCase])
			color: footnoteColor
		}
)
footnoteColor ^ <Color> = (
	^Color gray: 0.7
)
indicatorBar = (
	^(row: {blank: 5} ) color: statusColor.
)
public isKindOfTestResultPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTestResultPresenter
)
methodPresenter ^ <ExpandableMethodPresenter> = (
      methodPresenterSlot isNil ifTrue: [
	   methodPresenterSlot:: subject methodSubject createPresenter showClassName: true
	].
      ^methodPresenterSlot
)
resultColumn ^ <Fragment> = (
	^column: {
		methodPresenter.
		subject isFailure ifTrue: [failureFragment] ifFalse: [nothing].
		subject hasException ifTrue: [exceptionFragment] ifFalse: [nothing].
		(* subject hasNoData ifTrue: [noDataFragment] *)
	}
)
statusColor ^ <Color> = (
	(* subject passed ifTrue: [^Color green].
	subject failed ifTrue: [^Color red].
	subject error ifTrue: [^Color black]. *)
	^Color gray.
)
public tag ^ <String> = (
  ^methodPresenter tag
)
updateVisualsFromSameKind: oldPresenter <Self> ^ <Alien[Element]> = (
  showIndicatorBar:: oldPresenter showIndicatorBar.
  substanceSlot:: nil.
  ensureSubstance.
  ^super updateVisualsFromSameKind: oldPresenter
)
) : (
)
class TestResultSubject onModel: m <TestResult> = Subject onModel: m (
(* The subject for presenting a single TestResult. *)
) (
public = x <Object> ^ <Boolean> = (
	x class = class ifFalse: [^false].
	^selector = x selector and: [className = x className]
)
classDeclarationMirror = (
	^testCase environment classDeclarationMirror
)
public className = (
	^classDeclarationMirror qualifiedName
)
public exception = (
	(* If the model is a test error, return the exception associated with the result. Otherwise return nil. *)
	^model isError
		ifTrue: [model exception]
		ifFalse: [nil]
)
public failureDescription ^<String> = (
	(* If the model is a failure, return the description of the failure. Otherwise return an empty string. *)
	^isFailure
		ifTrue: [model description]
		ifFalse: ['']
)
public hasException ^<Boolean> = (
	(* True if the test result has an exception associated with it, or in other words, the result is a test error. *)
	^model isError
)
public hash = (
	^selector hash * 37 + className hash
)
public isFailure = (
	^model isFailure
)
public isKindOfTestResultSubject ^ <Boolean> = (
  ^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfTestResultSubject
)
public selector ^ <Symbol> = (
	^testCase selector
)
public methodSubject = (
	^TestMethodSubject onModel: (testCase environment classDeclarationMirror instanceSide methods findMirrorNamed: selector)
)
public testResult ^ <TestResult> = (
  ^model
)
public testCase = (
	^testResult testCase
)
) : (
)
class TestingInProgressPresenter onSubject: subject = Presenter onSubject: subject (
(* Presents a Tester in the process of running tests. *)
|
	progressBar
	currentSelector
	errorCountHolder
	failureCountHolder
|) (
definition = (
	schedule: [startTests].

	errorCountHolder:: holder: [nothing].
	failureCountHolder:: holder: [nothing].
	(* progressBar:: progress. *)
	currentSelector:: label: 'no tests yet'.	
	^column: {
		(* progressBar. *)
		row: {label: 'Running '. currentSelector . label: '...'}.
		errorCountHolder.
		failureCountHolder.
	}
)
public isKindOfTestingInProgressPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTestingInProgressPresenter
)
public isTransient = (
	(* Should not be recorded in navigation history. *)
	^true
)
pumpTests = (
	tester atEnd ifTrue:
		[tester haveAllTestsSucceeded ifTrue: [tester cleanUp].
		 enterSubject:: TestingOutcomeSubject tester: tester configClass: subject configClass.
		 ^self].

	currentSelector text: tester peekSelector.
	(failureCountHolder hasVisual and: [tester failures size > 0]) ifTrue:
		[failureCountHolder content: (row: {label: 'Failures: ', tester failures size asString})].
	(errorCountHolder hasVisual and: [tester errors size > 0]) ifTrue:
		[errorCountHolder content: (row: {label: 'Errors: ', tester errors size asString})].

	schedule:
		[Promise when: tester stepAsync fulfilled: [pumpTests]].
)
startTests = (
	tester prepare.
	pumpTests.
)
tester ^ <Tester> = (
	^subject tester
)
) : (
)
public class TestingInProgressSubject tester: tester <Tester> configClass: configClass = Subject onModel: tester (
(* Represents a Tester instance, in the process of running tests. *)
|
	public configClass = configClass.
|) (
public isKindOfTestingInProgressSubject ^ <Boolean> = (
  ^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfTestingInProgressSubject
)
public tester ^ <Tester> = (
	^model
)
public title ^ <String> = (
	^'Running Tests'
)
public refreshmentSubject ^ <TestingInProgressSubject> = (
	^self class tester: model configClass: configClass.
)
public createPresenter ^ <TestingInProgressPresenter> = (
	^TestingInProgressPresenter onSubject: self
)
) : (
public onConfiguration: configClass <Class> platform: platform minitest: minitest = (
	| config modules tester |
	config:: configClass packageTestsUsing: ide namespacing manifest.
	modules:: config testModulesUsingPlatform: platform minitest: minitest.
	tester:: minitest Tester testModules: modules.
	^self tester: tester configClass: configClass.
)
)
class TestingOutcomePresenter onSubject: s <TestingOutcomeSubject> = ProgrammingPresenter onSubject: s (
(* Shows an outcome of running a suite of tests, as a page with separate sections for errors, failures and successes. *)
) (
didAllTestsPass = (
	^didNoTestsFail (* not tracking incomplete for now, so no difference from didNoTestsFail *)
)
didNoTestsFail ^ <Boolean> = (
	^subject failures isEmpty and: [subject errors isEmpty]
)
errors ^ <Fragment> = (
	^section: 'Errors'
		with: subject errors
		status: #error
		color: errorsSectionColor
)
errorsSectionColor = (
	^Gradient from: (Color h: 0 s: 0.15 v: 1) to: (Color h: 0 s: 0.15 v: 0.9)
)
failureHeadingColor = (
	^Gradient from: (Color h: 0 s: 0.5 v: 0.8) to: (Color h: 0 s: 0.5 v: 0.6)
)
failures ^ <Fragment> = (
	^section: 'Failures'
		with: subject failures
		status: #failure
		color: failuresSectionColor
)
failuresSectionColor = (
	^Gradient from: (Color h: 50 s: 0.3 v: 1) to: (Color h: 50 s: 0.3 v: 0.9)
)
headingBlock: fragment color: aColor = (
	^(padded: fragment with: {10. 5. 5. 5}) color: aColor
)
headingDefinition ^ <Presenter> = (
	^(majorHeadingBlock: headingContentsDefinition)
	color: (
		didNoTestsFail
			ifFalse: [failureHeadingColor]
			ifTrue:
				[successHeadingColor])
)
public isKindOfTestingOutcomePresenter ^ <Boolean> = (
	^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfTestingOutcomePresenter
)
public noticeAbandonment = (
	subject tester haveAllTestsSucceeded ifFalse: [subject tester cleanUp].
	super noticeAbandonment.
)
respondToRunAgain = (
	| newSubject |
	subject tester cleanUpResults.
	subject tester haveAllTestsSucceeded ifFalse: [subject tester cleanUp].
	newSubject:: TestingInProgressSubject
		onConfiguration: subject configClass
		platform: platform
		minitest: minitest.
	enterSubject: newSubject.
)
respondToRunAll: testCases = (
(* Run the set of test cases given by testCases.  The UI uses this to re-run just the failures, or errors or successes. However, tests have shared state, which one has to tear down and re-initialize.

Other sections that hold test results should be pointing at different shared state so that they can be re-examined  It doesn't look like things are set up to support this. *)
	halt.
)
public runToDebugFailure: testCase = (
	| thread <ThreadMirror> |
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[subject tester runToDebugFailure: testCase].
	enterSubject:: ide debugging ThreadSubject onModel: thread.
)
section: label <String> with: testCases <Collection[TestCase]> status: aSymbol <Symbol> color: aColor <Color | Gradient> ^ <Fragment> = (
	| testedMethodsPresenter |
	testedMethodsPresenter:: TestResultListPresenter onSubject: (TestResultListSubject onModel: testCases).
	^column: {
		sectionHeader: label with: testCases status: aSymbol color: aColor.
		blank: 3.
		testedMethodsPresenter.
	}
)
successHeadingColor = (
	^Gradient from: (Color h: 120 s: 0.5 v: 0.7) to: (Color h: 120 s: 0.5 v: 0.5)
)
successesSectionColor = (
	^Gradient from: (Color h: 90 s: 0.3 v: 1) to: (Color h: 90 s: 0.3 v: 0.9)
)
sectionHeader: label <String> with: testCases <Collection[TestCase]> status: aSymbol <Symbol> color: aColor <Color | Gradient> ^ <Fragment> = (
	^headingBlock: (row: {
			label: (label, ' (', testCases size printString, ')') (*asText allBold *).
			largeBlank.
			(* (link: 'run all' action: [testedMethodsPresenter runAll]) tinyFont. *)
			filler.
		}) color: aColor.
)
public runWithNoExceptionHandling: testCase = (
	| thread <ThreadMirror> |
	thread:: platform mirrors ActivationMirror invokeSuspended:
		[subject tester runWithNoExceptionHandling: testCase].
    thread resume.
	enterSubject:: ide debugging ThreadSubject onModel: thread.
)
testOutcomesMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Presenter'. [respondToInspectPresenter]}
	}
)
headingContentsDefinition ^ <Presenter> = (
	| statusMessage |
	statusMessage::
		didAllTestsPass
			ifTrue: ['Passed']
			ifFalse:
				[didNoTestsFail
					ifTrue: ['Incomplete test results']
					ifFalse: ['Failed ']].
	^row: {
		(link: subject configurationName (* asText allBold *)
			action: [browseClass: subject configClass]) color: Color white.
		smallBlank.
		(label: statusMessage (* asText allBold *)) color: Color white.
		filler.
		button: 'Run Again' action: [respondToRunAgain].
(*		smallBlank.
		button: 'Forget' action: [respondToForget] *)
        mediumBlank.
        dropDownMenu: [testOutcomesMenu]
		}.
)
successes ^ <Fragment> = (
  ^subject showSuccesses ifTrue: [
	section: 'Successes'
		with: subject successes
		status: #success
		color: successesSectionColor
	] ifFalse: [
	column: {
		sectionHeader: 'Successes'
		with: subject successes
		status: #success
		color: successesSectionColor.
	      row: {
			blank: 10.
			subject successes isEmpty ifFalse:
				[(link: 'Show details...'
				action: [updateGUI: [subject showSuccesses: true]]) (*tinyFont*)]
                ifTrue: [nothing]
		       }
		}
	]
)
disabledSectionColor = (
	^Gradient from: (Color h: 180 s: 0.3 v: 1) to: (Color h: 180 s: 0.3 v: 0.9)
)
untestedSectionColor = (
	^Gradient from: (Color h: 150 s: 0.3 v: 1) to: (Color h: 150 s: 0.3 v: 0.9)
)
definition ^ <Fragment> = (
	^column: {
	      headingDefinition.
		blank: 2.
		errors.
		blank: 1.
		failures.
		blank: 1.
        disabled.
		blank: 1.
		inactive.
        blank: 1.
		successes.
	}
)
disabled ^ <Fragment> = (
	| 
    methods = subject disabled collect: [:testCase <TestCase> | 
        TestMethodSubject onModel: (testCase environment classDeclarationMirror instanceSide methods findMirrorNamed: testCase selector)
      ].
    testedMethodsPresenter = (AssortedMethodsSubject onModel: methods) presenter.
    |
	^column: {
		sectionHeader: 'Disabled' with: subject disabled status: #disabled color: disabledSectionColor.
		blank: 3.
		testedMethodsPresenter.
	}
)
inactive ^ <Fragment> = (
	| 
    methods = subject inactive collect: [:testCase <TestCase> | 
        TestMethodSubject onModel: (testCase environment classDeclarationMirror instanceSide methods findMirrorNamed: testCase selector)
      ].
    testedMethodsPresenter = (AssortedMethodsSubject onModel: methods) presenter.
    |
	^column: {
		sectionHeader: 'Untested' with: subject inactive status: #untested color: untestedSectionColor.
		blank: 3.
		testedMethodsPresenter.
	}
)
public run: tc <TestCase> = (
  subject tester run: tc
)
) : (
)
public class TestingOutcomeSubject tester: t <Tester> configClass: c = Subject onModel: t (
|
	public configClass = c.
	public showSuccesses <Boolean> ::= false.
    public disabled <Collection[TestCase]> = List new.
    public inactive <Collection[TestCase]> = computeInactiveTests.
|) (
public configurationName = (
	^configClass name
)
public createPresenter = (
	^TestingOutcomePresenter onSubject: self
)
public isKindOfTestingOutcomeSubject ^ <Boolean> = (
  ^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfTestingOutcomeSubject
)
public refreshmentSubject = (
	^self class tester: tester configClass: configClass
)
public tester ^ <Tester> = (
	^model
)
public title = (
	^'Test Results for ', configurationName
)
public successes ^ <List[TestSuccess]> = (
	^tester successes
)
public failures ^ <List[TestFailure]> = (
	^tester failures
)
public errors ^ <List[TestError]> = (
	^tester errors
)
computeInactiveTests ^ <Set[TestCase]> = (
^(Set withAll: tester testCaseList)
      removeAll: (errors collect: [:tr <TestResult> | tr testCase]);
      removeAll: (failures collect: [:tr <TestResult> | tr testCase]);
      removeAll: (successes collect: [:tr <TestResult> | tr testCase]);
      yourself
)
public disable: tc <TestCase | TestResult> = (
  tc isKindOfTestFailure ifTrue: [^disableFailure: tc].
  tc isKindOfTestError ifTrue: [^disableError: tc].
  tc isKindOfTestCase ifTrue: [
    (* only add tc to disabled if it's not already there *)
    0 = (disabled indexOf: tc) ifTrue: [
      disabled add: tc.
      inactive remove: tc ifAbsent: [Error signal: 'inconsistency in TestOutcomeSubject>>disable:'].
      ^self
      ].
  ].
  (* tc is a success; least likely to be disabled *)
  disableSuccess: tc
)
public isEnabled: tc ^ <Boolean> = (
  disabled detect: [:dt <testCase> | dt = tc] ifNone: [^true].
  ^false
)
public enable: tc <TestCase> = (
  tc isKindOfTestCase ifTrue: [
    (* only add tc to inactive if it's not already there *)
    (inactive includes: tc) ifFalse: [
      inactive add: tc.
      disabled remove: tc ifAbsent: [Error signal: 'inconsistency in TestOutcomeSubject>>enable:'].
      ^self
      ].
  ].
)
disableTestCase: tc = (
  0 = (disabled indexOf: tc) 
    ifTrue: [disabled add: tc]
    ifFalse: [shouldNotHappen].
)
disableFailure: tf <TestFailure> = (
  | tc <TestCase> = tf testCase. |
  tester failures remove: tf ifAbsent: [].
  disableTestCase: tc.
)
disableError: te <TestError> = (
  | tc <TestCase> = te testCase. |
  tester errors remove: te ifAbsent: [].
  disableTestCase: tc.
)
disableSuccess: ts <TestSuccess> = (
  | tc <TestCase> = ts testCase. |
  tester successes remove: ts ifAbsent: [].
  disableTestCase: tc.
)
public activate: t <TestCase | TestResult> = (
  t isKindOfTestResult ifTrue: [
  ] ifFalse: [
    inactive remove: t ifAbsent: [shouldNotHappen]
  ]
)
) : (
public onConfiguration: configClass <Class> platform: platform minitest: minitest = (
	| config modules tester |
	config:: configClass packageTestsUsing: ide namespacing manifest.
	modules:: config testModulesUsingPlatform: platform minitest: minitest.
	tester:: minitest Tester testModules: modules.
    tester prepare.
	^self tester: tester configClass: configClass.
)
)
class TestMethodPresenter onSubject: s <MethodSubject> = MethodPresenter onSubject: s(
) (
public isKindOfTestMethodPresenter ^ <Boolean> = (
  ^true
)
isMyKind: other ^ <Boolean> = (
  ^other isKindOfTestMethodPresenter
)
ancestorTestingOutcomePresenter = (
	| ancestor ::= parent. |
	[nil = ancestor] whileFalse:
		[ancestor isKindOfTestingOutcomePresenter ifTrue:
			[^ancestor].
		 ancestor:: ancestor parent].
	^nil
)
methodMenuFor: methodName <String> = (
   | 
   superMenu = super methodMenuFor: methodName. 
   menuExtensions =  isEnabled ifFalse: [
     {
        {'enable and run'. [respondToEnableAndRun]}. 
        {'enable'.  [respondToEnable]}
     }
     ] ifTrue: [{ {'run'. [respondToRun] }. {'disable'.  [respondToDisable]}}].
   |
	^superMenu, menuExtensions
)
outcomeSubject ^ <TestingOutcomeSubject> = (
  ^ancestorTestingOutcomePresenter subject
)
isEnabled ^ <Boolean> = (
  ^outcomeSubject isEnabled: test
)
respondToEnable = (
  updateGUI: [outcomeSubject enable: test]
)
respondToDisable = (
  updateGUI: [outcomeSubject disable: test]
)
ancestorResultPresenter = (
	| ancestor ::= parent. |
	[nil = ancestor or: [ancestor isKindOfHopscotchWindow]] whileFalse:
		[ancestor isKindOfTestResultPresenter ifTrue:
			[^ancestor].
		 ancestor:: ancestor parent].
	^nil
)
test ^ <TestCase | TestResult>  = (
 (* Return the testCase or testResult I represent.*)
   | resultPresenter <TestResultPresenter> = ancestorResultPresenter. |
   (* If I represent an failure, error or success, I am embedded
       in a TestResultPresenter.*)
  resultPresenter isNil ifFalse: [ 
    (* Return test result *)
    ^resultPresenter subject testResult
  ].
   (* Otherwise I am disabled or untested *)
   ^outcomeSubject disabled detect: [:tc | tc selector = subject name] ifNone: [
       outcomeSubject inactive detect: [:tc | tc selector = subject name] ifNone: []
       ].
)
respondToRun = (
  |
  t <TestCase | TestResult> = test.
  tc  <TestCase> = t isKindOfTestResult ifTrue: [t testCase] ifFalse: [t].
  |
  updateGUI: [
    outcomeSubject activate: t.
    ancestorTestingOutcomePresenter run: tc
    ]
)
respondToEnableAndRun = (
  |
  t <TestCase | TestResult> = test.
  tc  <TestCase> = t isKindOfTestResult ifTrue: [t testCase] ifFalse: [t].
  |
  updateGUI: [
    outcomeSubject enable: t.
    outcomeSubject activate: t.
    ancestorTestingOutcomePresenter run: tc    
    ]
)
) : (
)
class TestMethodSubject onModel: m = MethodSubject onModel: m (

) (
public enable = (
)
public disable = (
)
public isKindOfTestMethodSubject ^ <Boolean> = (
  ^true
)
isMyKind: other <Subject> = (
  ^other isKindOfTestMethodSubject
)
public enableAndRun = (
  enable.
  run.
)
public createPresenter ^ <TestMethodPresenter> = (
  ^TestMethodPresenter onSubject: self
)
public isEnabled ^ <Boolean> = (
  ^true (* for now *)
)
) : (
)
) : (
)
