Newspeak3
'Samples'
class Particles packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	|
) (
class World usingPlatform: p = (|
Timer = p actors Timer.
Point = p graphics Point.
Color = p graphics Color.
List = p collections List.
Subject = p hopscotch core Subject.
Presenter = p hopscotch core Presenter.
Math = p js global at: 'Math'.
tau = 6.28318530718 asFloat.
|) (
class Atom = (|
public x ::= Math random * 800.
public y ::= Math random * 600.
public vx ::= (Math random - 0.5) * 6.
public vy ::= (Math random - 0.5) * 6.
public m = Math random * 150 + 5.
public r = m sqrt + 1.
public color = Color r: Math random g: Math random b: Math random.
|) (
public collideWith: b = (
	| a = self. dx dy R distance overlap ox oy e dvx dvy top bottom j |

	dx:: a x - b x.
	dy:: a y - b y.
	R:: a r + b r.
	(dx*dx) + (dy*dy) > (R*R) ifTrue: [^self].

	distance:: ((dx*dx) + (dy*dy)) sqrt.
	overlap:: R - distance.
	ox:: overlap * dx / distance.
	oy:: overlap * dy / distance.

	a x: (a x + (ox / 2)).
	a y: (a y + (oy / 2)).
	b x: (b x - (ox / 2)).
	b y: (b y - (oy / 2)).

	dvx:: a vx - b vx.
	dvy:: a vy - b vy.
	e:: 1.

	top:: (-1*(1+e)) * ((dvx*dx) + (dvy*dy)).
	bottom:: ((1 / a m) + (1 / b m)) * ((dx*dx) + (dy*dy)).
	j:: top/bottom.

	a vx: (a vx + ((j / a m)*dx)).
	a vy: (a vy + ((j / a m)*dy)).
	b vx: (b vx - ((j / b m)*dx)).
	b vy: (b vy - ((j / b m)*dy)).
)
public drawOn: gc = (
	gc fillStyle: color.
	gc beginPath.
	gc arcAt: (Point x: x y: y) radius: r from: 0 to: tau.
	gc fill.
)
public tick = (
	x:: x + vx.
	y:: y + vy.

	x < r ifTrue: [vx:: vx abs].
	x > (800 - r) ifTrue: [vx:: vx abs * -1].
	y < r ifTrue: [vy:: vy abs].
	y > (600 - r) ifTrue: [vy:: vy abs * -1].

	vx abs > 16 ifTrue: [vx: vx * 0.9].
	vy abs > 16 ifTrue: [vy: vy * 0.9].
)
) : (
)
public class World withExtent: e = (
|
	extent = e.
	public atoms = List new.
	timer
|
	10 timesRepeat: [atoms add: Atom new].
) (
public drawOn: gc = (
	gc fillStyle: (Color r: 0 g: 0 b: 0 a: 0.12 asFloat).
	gc beginPath.
	gc rectangle: ((Point x: 0 y: 0) corner: extent).
	gc fill.
	atoms do: [:atom | atom drawOn: gc].
)
public tick = (
	1 to: atoms size -1 do: [:i |
		i + 1 to: atoms size do: [:j |
			(atoms at: i) collideWith: (atoms at: j).
		].
	].

	atoms do: [:atom | atom tick].
)
) : (
)
class WorldPresenter onSubject: s = Presenter onSubject: s () (
definition = (
	| c |
	c:: canvas: (Point x: 800 y: 600).
	Timer every: 30 do: [:timer | subject model tick. subject model drawOn: c context].
	^column: {
		c.
		link: 'Add Atom' action: [subject model atoms add: Atom new].
		link: 'Remove Atom' action: [subject model atoms removeFirst].
	}
)
public isKindOfWorldPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfWorldPresenter
)
) : (
)
public class WorldSubject onModel: m = Subject onModel: m () (
public createPresenter = (
	^WorldPresenter onSubject: self
)
public model = (
	^super model
)
) : (
)
) : (
)
public main: platform args: args = (
	| hopscotchPlatform world |
	hopscotchPlatform:: hopscotchRuntime using: platform.
	world:: World usingPlatform: hopscotchPlatform.
	hopscotchPlatform hopscotch core HopscotchWindow openSubject:
		(world WorldSubject onModel:
			(world World withExtent: (hopscotchPlatform graphics Point x: 800 y: 600))).
)
) : (
)
