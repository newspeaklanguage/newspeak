Newspeak3
'HopscotchIDE'
class WorkspaceManagerForV8 usingPlatform: p <Platform> ide: webIde <HopscotchIDE> = (
(*
Workspaces allow convenient live code evaluation in the Newspeak IDE. They provide access to an IDE namespace,
unconstrained by the scope of a single module.  This module implements workspaces in the IDE. 

Copyright Google Inc.  2017.
Copyright Gilad Bracha 2018-2021.
*)
|
	(* imports *)
	private Map = p collections Map.
	private Presenter = p hopscotch Presenter.
	private Subject = p hopscotch Subject.
    private ObjectSubject = webIde browsing ObjectSubject.
	private ProgrammingPresenter = webIde browsing ProgrammingPresenter.  
    private EvaluationViewState = webIde browsing EvaluationViewState.
	private List = p collections List.
	private ObjectMirror = p mirrors ObjectMirror.
    
	(* module state *)
	private workspaces <List[EvaluationViewState]> = List new.
	private workspaceCounter <Integer> ::= 0.
	private retainedPlatform = p.
	private ide = webIde.
	private Root = ide namespacing Root.
|) (
class AllWorkspacesPresenter onSubject: s = ProgrammingPresenter onSubject: s (
(* This is the top-level presenter displayed when following the Workspaces link from the home page. It displays a list of WorkspacePresenters on all existing workspaces. *)
) (
public contentPresenters ^ <Collection[ToggleComposer]> = (
	^subject allWorkspaces collect: [:ws | expandableLineForWorkspace: ws]
)
public isKindOfAllWorkspacesPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfAllWorkspacesPresenter
)
respondToAddWorkspace = (
	subject addWorkspace.
)
respondToDeleteWorkspace: ws <ObjectSubject> = (
	subject deleteWorkspace: ws.
)
workspaceListMenu = (
	^menuWithLabelsAndActions: {
		{'Inspect Presenter' . [respondToInspectPresenter]}
		}
)
workspaceMenuFor: ws <ObjectSubject> = (
	^menuWithLabelsAndActions: {
		{'Delete workspace ', (nameOf: ws). [updateGUI: [respondToDeleteWorkspace: ws]]}
		}
)
definition = (
      | toggles = toggleList: contentPresenters. |
	^column: {
		minorHeadingBlock: (
			row: {
				label: 'Workspaces' (*asText allBold*).
				largeBlank.
				addButtonWithAction: [updateGUI: [respondToAddWorkspace]].
				filler.
				expandButtonWithAction: [toggles childrenDo: [:each <ToggleComposer> | each expand]].
				blank: 3.
				collapseButtonWithAction: [toggles childrenDo: [:each <ToggleComposer> | each collapse]].
				blank: 3.
				dropDownMenu: [workspaceListMenu].
				largeBlank.
				}
			).
		mediumBlank.
		toggles.
		mediumBlank.
	}
)
expandableLineForWorkspace: ws <EvaluationViewState> ^ <ToggleComposer> = (
	| toggle <ToggleComposer> |
	toggle::
		collapsed: [workspaceRowFor: ws]
		expanded: [(ObjectSubject onEvaluator: ws) presenter]
		initiallyExpanded: workspaces size = 1
		tag: (nameOf: ws).
	^toggle
)
workspaceRowFor: ws <EvaluationViewState> ^ <Fragment> = (
	^row: {
		link: (nameOf: ws)
		action: [enterSubject: (ObjectSubject onEvaluator: ws)].
		filler.
		dropDownMenu: [workspaceMenuFor: ws].
	}
)
nameOf: ws <EvaluationViewState> ^ <String>  = (
  ^(ws mirror evaluate: 'workspaceName') result reflectee
)
) : (
)
public class AllWorkspacesSubject onModel: dontCare = Subject onModel: dontCare (
(* Subject for the list of all workspaces. It is responsible for creating and deleting workspace classes and instances. *)
) (
public = anotherSubject ^<Boolean> = (
	(* All AllWorkspacesSubject instances are considered the same so that clicking the Workspaces link on the home page always takes us to the same page instead of multiplying them. *)
	^anotherSubject isKindOfAllWorkspacesSubject
)
public allWorkspaces ^ <Collection[Workspace]> = (
	(* Ensure there is always a workspace to work with. *)
	workspaces isEmpty ifTrue: [addWorkspace].
	^workspaces
)
public createPresenter ^ <AllWorkspacesPresenter> = (
	^AllWorkspacesPresenter onSubject: self
)
public deleteWorkspace: ws <Workspace> = (
	workspaces remove: ws.
)
public hash ^<Integer> = (
	^self class hash
)
public isKindOfAllWorkspacesSubject ^ <Boolean> = (
	^true
)
isMyKind: s <Subject> ^ <Boolean> = (
  ^s isKindOfAllWorkspacesSubject
)
public title ^<String> = (
	^'Workspaces'
)
public addWorkspace = (
	| ws <Workspace> |
	ws:: Workspace named: currentWorkspaceNumberString.
	(* ws workspaceText: defaultWorkspaceText.*)
	workspaces add: (EvaluationViewState onModel: (ObjectMirror reflecting: ws)).
)
) : (
public new = (
(* An AllWorkspacesSubject always has its module as its model. This method is a dummy to satisfy the requirements of the Subject class protocol. Hence it doesn't care about the formal parameter  'dontCare'. *)
	^onModel: nil
)
)
public class Workspace  named: n <String> = (
(* The superclass of workspaces. For the time being, we do not dynamically create distinct classes per workspace. Instead,
we pass a name for each instance to the factory. *)
|
public workspaceName  <String> = 'Workspace ', n.
public workspaceText
|) (
public actors = (^retainedPlatform actors)
public aliens = (^retainedPlatform aliens)
public class = (
	^super class
)
public collections = (^retainedPlatform collections)
protected doesNotUnderstand: message = (
	^Root
		at: message selector
		ifAbsent: [super doesNotUnderstand: message]
)
public files = (^retainedPlatform files)
public findInSource: stringOrRegex = (
	stringOrRegex isKindOfString ifFalse: [unimplemented].
	^methods select: [:method | method getSource includesSubString: stringOrRegex].
)
public graphics = (^retainedPlatform graphics)
public hopscotch = (^retainedPlatform hopscotch)
public ide ^ <HopscotchWebIDE> = (
	^outer WorkspaceManagerForV8 ide
)
public kernel = (^retainedPlatform kernel)
public mirrors = (^retainedPlatform mirrors)
platform ^ <Platform> = (
	^retainedPlatform
)
public printString ^ <String> = (
  ^workspaceName
)
public streams = (^retainedPlatform streams)
public text = (
	^retainedPlatform text
)
) : (
)
currentWorkspaceNumberString ^ <String> = (
	workspaceCounter:: workspaceCounter + 1.
	^workspaceCounter printString
)
defaultWorkspaceText ^ <String> = (
^'(* Workspaces provide access to the system scope,  allowing you to bypass Newspeak''s modularity at development time. You can evaluate the current selection (or the current line if the selection is empty) by pressing [Evaluate]. *)

platform.
ide.

copy: ''Hello, Pasty New World!'' (* Place the argument on the system clipboard. *)'
)
) : (
)
