Newspeak3
'NSFiles-Unix'
class UnixFiles usingPlatform: p <NsPlatform> = (
(* This code was derived by converting the Strongtalk Unix file classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.

Copyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
Copyright 2009 Stephen Rees
Copyright 2010 Ryan Macnak and other contributors.
Copyright 2012 Cadence Design Systems, Inc.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
 this  list of conditions and the following disclaimer.

* Redistribution in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.

Neither the name of Sun Microsystems or the names of contributors may
be used to endorse or promote products derived from this software without
specific prior written permission.

>>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.>> *)
|

private FileDescriptor = p files FileDescriptor.
private FilePattern = p files FilePattern.
private FilePath = p files FilePath.

private outerStatBuffer = p squeak StatBuffer.

private Alien = p aliens Alien.
private NotFoundError = p squeak NotFoundError.
private __error_func
private strerror_func
private chdir_func
private chmod_func
private close_func
private fxstat_func
private getcwd_func
private getegid_func
private geteuid_func
private glob_func
private lseek_func
private lxstat_func
private mkdir_func
private open_func
private read_func
private readlink_func
private realpath_func
private rename_func
private rmdir_func
private symlink_func
private unlink_func
private write_func
private xstat_func
(* TermIO functions *)
private tcgetattr_func
private tcsetattr_func
private cfmakeraw_func

private ExternalUnixFilePattern = ExternalObject mixinApply: UnixFilePattern.
private ExternalStreamableUnixFilePattern = ExternalStreamableObject mixinApply: ExternalUnixFilePattern.
private ExternalUnixFilePath = FilePath mixinApply: ExternalStreamableUnixFilePattern.
|) (
class ExternalObject = (
(* A dummy class for mixin *)
) (
) : (
)
class ExternalStreamableObject = ExternalObject (
(* A dummy class for mixin *)
) (
) : (
)
public class UnixFileDescriptor = FileDescriptor (| ioCount <ExternalProxy>
	  (* Used to hold the count of bytes read/written, & other temporary results, for speed *)
	|) (
SEEK_SET = (
	^0
)
StatBuffer = (
	^outerStatBuffer
)
blockSize ^<Int> = (
	| statBuffer <StatBuffer> |

statBuffer:: StatBuffer newC.

	^[(fxstat_func
			primFFICallResult: (Alien new: 4)
			with: statBuffer version
			with: self handle
			with: statBuffer address)
		asSignedLong == -1
			ifTrue: [4096]
			ifFalse: [ statBuffer blockSize ] ]
		ensure: [ statBuffer free]
)
errno = (
	(* ^{{primitiveGetLastError}} *)
)
errorText: message = (
	^message, lastError printString
)
public flushIfFail: errf <[:ExternalError]> = (
	| result <ExternalProxy> |
	(* %todo: uncomment *)
	(* result := {<kernel ExternalProxy FlushFileBuffers async>
	handle: self handle }. *)
	result isNull
	ifTrue: [ errf value: 'I/O Error flushing file information' ].
)
getBufferSize ^<Int> = (
	^self blockSize * 8
)
initializeIOCount = (
   (* ioCount:: ExternalProxy new.
	ioCount malloc: 4. *)
	ioCount:: Alien newC: 4.
)
lseek: handle position: p <Int> whence: whence <Int> = (
	(* %todo: support large integer positions for extremely large files *)

	^(lseek_func
		primFFICallResult: (Alien new: 4)
		with: handle
		with: p
		with: whence) asSignedLong
)
public mode: m <Symbol> = (
	super mode: m.
	self initializeIOCount.
)
public openIfFail: err <[:ExternalError]> = (
	super openIfFail: err.
  (* self ioCount malloc: Platform wordSize. *)
)
postCopy = (
	super postCopy.
	self initializeIOCount.
)
read: handle buffer: buffer count: count = (
	^(read_func
		primFFICallResult: (Alien newWord)
		with: handle
		with: buffer address
		with: count) asSignedLong
)
public readAt: pos <Int> ifFail: errf <[:ExternalError]> ^<Int> = (
	| result <ExternalProxy> count <Int> |
	self position = pos
	ifFalse: [ self position: pos ].
	self knowAtEnd
	ifTrue: [ count:: 0 ]
	ifFalse: [result:: self read: self handle
	              				buffer: self buffer
	              				count: self bufferSize.
	           result == -1
	           	ifTrue: [|msg|
	           				msg:: self errorText: 'Error filling buffer: '.
	           				errf value: msg]
	           	ifFalse: [count:: result ]].
	self setPosition: self position + count.
	^count
)
setExternalPosition: p <Int> = (
	(* %todo: support large integer positions for extremely large files *)
	| result |
	result:: self lseek: self handle
						position: p
	 				whence: self SEEK_SET. (* FILE_BEGIN *)
	result == -1 ifTrue:
		[error: (self errorText: 'Could not position file descriptor: ')]
)
severExternalConnections = (
	super severExternalConnections.
	self ioCount free.
	(close_func
			primFFICallResult: (Alien new: 4)
 			with: self handle)
		asSignedLong == -1 ifTrue:
			[error: 'Error closing file handle' ]
)
public size ^<Int> = (
	| statBuffer <StatBuffer>
status <ExternalProxy> |
	statBuffer:: outerStatBuffer newC.
	^[(fxstat_func
			primFFICallResult: (Alien new: 4)
			with: statBuffer version
			with: self handle asSignedLong
			with: statBuffer address)
		asSignedLong == -1
			ifTrue: [0]
			ifFalse: [ statBuffer fileSize ] ]

ensure: [statBuffer free]
)
public stat: testBlock ifFail: failBlock = (
	| statBuffer <StatBuffer> |
	statBuffer:: StatBuffer newC.
	^[(fxstat_func
			primFFICallResult: (Alien new: 4)
			with: statBuffer version
			with: self handle
			with: statBuffer address)
		asSignedLong == -1
			ifTrue: [ failBlock value ]
			ifFalse: [ testBlock value: statBuffer ] ]
		ensure: [statBuffer free]
)
public write: nBytes <Int> at: pos <Int> ifFail: errf <[:ExternalError]> = (
	| result <ExternalProxy> count <Int> |
	self position = pos
		ifFalse: [ self position: pos ].

	count:: (write_func
				primFFICallResult: (Alien newWord)
				with: self handle
				with: self buffer address
				with: nBytes) asSignedLong.

		count > 0 ifTrue:
		[self setPosition: self position + count]
)
) : (
public for: obj <EOBJ> mode: m <Symbol> ^ <Instance> = (
	(* Create a new instance, but don't open yet *)

	^self new externalObject: obj; mode: m
)
)
public class UnixFilePath = ExternalUnixFilePath (
) (
O_CREAT = (
	^8r100
)
O_RDONLY = (
	^0
)
O_RDWR = (
	^2
)
O_TRUNC = (
	^8r1000
)
O_WRONLY = (
	^1
)
S_IFDIR = (
	^8r40000
)
S_IFLNK = (^8r120000)
S_IRGRP = (
	^8r400
)
S_IROTH = (
	^8r40
)
S_IRUSR = (
	^8r4000
)
S_IWGRP = (
	^8r200
)
S_IWOTH = (
	^8r20
)
S_IWUSR = (
	^8r2000
)
S_IXGRP = (
	^8r100
)
S_IXOTH = (
	^8r10
)
S_IXUSR = (
	^8r1000
)
StatBuffer = (
	^outerStatBuffer
)
chmod: dmode <SmallInt> ^ <ExternalProxy> = (
	| name |
	name:: Alien newCString: self name.
	[(chmod_func
			primFFICallResult: (Alien new: 4)
			with: name address
			with: dmode)
		asSignedLong == -1 ifTrue: [error: 'chmod']
	] ensure: [name free]
)
public copyAs: newPath <FilePath> ifFail: fail <[:ExternalError]> = (
	| source target	|
	source:: self readStream.
	target:: newPath writeStream.
	[[source atEnd]	 whileFalse: [
		target nextPut: source next]]
			ensure: [source close.
							target close]
)
createDirectoryIfFail: fail <[:Symbol]> = (
	| name <CString> |
	name:: Alien newCString: self name.
	[(mkdir_func
			primFFICallResult: (Alien new: 4)
			with: name address
			with: 8r777)
		asSignedLong == -1 ifTrue: [ fail value: #CannotCreatFile ]
	] ensure: [ name free ]
)
createSymbolicLinkTo: target <String|FilePath> = (
	| newpath <CString> oldpath <CString> |
	newpath:: Alien newCString: self name.
	oldpath:: Alien newCString: (target isString ifTrue: [target] ifFalse: [target name]).
	[(symlink_func
			primFFICallResult: (Alien new: 4)
			with: oldpath address
			with: newpath address)
		asSignedLong == -1 ifTrue: [error: 'symlink']
	] ensure: [newpath free. oldpath free]
)
createValueFor: mode <Symbol> ^<ExternalData> = (
	mode = #read
	ifTrue: [ ^3        (* OPEN_EXISTING *) ].
	mode = #write
	ifTrue: [ ^2        (* CREATE_ALWAYS *) ].
	mode = #readWrite
	ifTrue: [ ^4        (* OPEN_ALWAYS *) ].
	self shouldNotHappen
)
deleteDirectoryIfFail: blk <[:Symbol]> = (
	| name <CString> |
	name:: Alien newCString: self name.
	[(rmdir_func
			primFFICallResult: (Alien new: 4)
			with: name address)
		asSignedLong == -1 ifTrue: [ blk value: #ErrorDeletingDirectory ]
	] ensure: [ name free ]
)
public deleteFileIfFail: blk <[:Symbol]> = (
	| name <CString> |
	name:: Alien newCString: self name.
	[(unlink_func
			primFFICallResult: (Alien new: 4)
			with: name address)
		asSignedLong == -1 ifTrue: [ blk value: #ErrorDeletingFile ]
	] ensure: [ name free ]
)
public deletePathIfFail: blk <[:Symbol]> = (
	self exists
	ifFalse: [ blk value: #NoSuchFileOrDirectory.
	         	^self ].
	self isDirectory
	ifTrue: [ self deleteDirectoryIfFail: blk ]
	ifFalse: [ self deleteFileIfFail: blk ]
)
public exists ^<Boolean> = (
	| name |
	name:: Alien newCString: self pattern.
	^[| result |
	   result:: open_func
				primFFICallResult: (Alien new: 4)
				with: name address
				with: 0
				with: 0.
	result asSignedLong > 0 ifTrue:
		[close_func primFFICallResult: nil with: result].
	result asSignedLong > 0] ensure: [name free]
)
fileAttributesFor: mode <Symbol> ^<ExternalData> = (
	mode = #read
	ifTrue: [ ^ExternalProxy new
	          setHigh: 16r0800        (* FILE_FLAG_SEQUENTIAL_SCAN *)
	          low:      16r80        (* FILE_ATTRIBUTE_NORMAL *) ].
	(mode = #write)
	ifTrue: [ ^ExternalProxy new
	          setHigh: 16r0000
	          low:      16r80        (* FILE_ATTRIBUTE_NORMAL *) ].
	(mode = #readWrite)
	ifTrue: [ ^ExternalProxy new
	          setHigh: 16r0000
	          low:      16r80        (* FILE_ATTRIBUTE_NORMAL *) ].
	self shouldNotHappen.
)
fileDescriptorClass ^<FileDescriptor class> = (
(* %TODO delegate to Platform *)
	^UnixFileDescriptor
)
public getegid = (
	^(getegid_func primFFICallResult: (Alien new: 4)) asUnsignedLong
)
public geteuid = (
	^(geteuid_func primFFICallResult: (Alien new: 4)) asUnsignedLong
)
public isDirectory ^<Boolean> = (
	^self stat: [:stat|
		(stat mode bitAnd: self S_IFDIR) ~= 0
	] ifFail: [ self statFailed ]
)
public isExecutable ^<Boolean> = (
	^self stat: [:stat|
			(stat uid == self geteuid
		and: [(stat mode bitAnd: self S_IXUSR) ~= 0])
			or: [(stat gid == self getegid
		and: [(stat mode bitAnd: self S_IXGRP) ~= 0])
			or: [(stat mode bitAnd: self S_IXOTH) ~= 0]]] ifFail: [ self statFailed ]
)
public isReadOnly ^<Boolean> = (
	^self isWriteable not
)
public isSymbolicLink ^<Boolean> = (
	^self lstat: [:stat| (* can't be ~= 0 cuz S_IFLNK has 2 bits set *)
				(stat mode bitAnd: self S_IFLNK) = self S_IFLNK]
		ifFail: [self statFailed]
)
public isSyntaxValid ^<Boolean> = (
	(* Extend inherited version to ensure no wildcard characters *)
	^super isSyntaxValid and: [ self unimplemented ]
)
public isWriteable = (
	^self stat: [:stat| | mode |
		mode:: stat mode.
			(stat uid == self geteuid
		and: [(mode bitAnd: self S_IWUSR) ~= 0])
			or: [(stat gid == self getegid
		and: [(mode bitAnd: self S_IWGRP) ~= 0])
			or: [(mode bitAnd: self S_IWOTH) ~= 0]]]
		ifFail: [ self statFailed ]
)
lastModified = (
	#TODO yourself.

	error: 'Not yet implemented'
)
lstat: testBlock ifFail: failBlock = (
	| statBuffer <StatBuffer> name <CString> |

	statBuffer:: StatBuffer newC.
	name:: Alien newCString: self name.
	^[(lxstat_func
			primFFICallResult: (Alien new: 4)
			with: statBuffer version
			with: name address
			with: statBuffer address)
		asSignedLong == -1
			ifTrue: [ failBlock value ]
			ifFalse: [ testBlock value: statBuffer ]]
		ensure: [ statBuffer free. name free]
)
modeFor: mode <Symbol> ^<SmallInt> = (
	mode = #read
	ifTrue: [ ^self O_RDONLY ].
	mode = #write
	ifTrue: [ ^(self O_WRONLY bitOr: self O_CREAT) bitOr: self O_TRUNC ].
	mode = #readWrite
	ifTrue: [ ^self O_RDWR bitOr: self O_CREAT ].
	error: 'Unrecognised mode: ' , mode
)
modeProxyFor: mode <Symbol> ^<SmallInt> = (
	mode = #read
	ifTrue: [ ^0 ].
	mode = #write
	ifTrue: [ ^1 ].
	mode = #readWrite
	ifTrue: [ ^2 ]
)
moveAs: newPath <FilePath> ifFail: fail <[:ExternalError]> = (
	| csrc <CString> cdest <CString> |
	csrc:: Alien newCString: self name.
	cdest:: Alien newCString: newPath name.
	[(rename_func
			primFFICallResult: (Alien new: 4)
			with: csrc address
			with: cdest address)
		asSignedLong == -1 ifTrue:
			[ fail value: 'Error moving file.' asSymbol ]]
		ensure:
			[ csrc free.
			  cdest free ]
)
open: dname <ExternalProxy> mode: dmode <SmallInt> ^ <ExternalProxy> = (
  	^open_func
		primFFICallResult: (Alien new: 4)
		with: dname
		with: dmode
		with: (* permissions *) 8r666 (* used to be 777 but scruffy to create executable files *)
)
public openInternalFor: mode <Symbol> ifFail: err <[:ExternalError | X def]> ^<ExternalProxy | X> = (
	| dname <ExternalProxy>
	dmode <SmallInt>
	proxy <ExternalProxy> |

	#ACCESSBOGUS.
	dname:: (* self nameProxy. *) Alien newCString: self name.

	[ dmode:: self modeFor: mode.
		proxy:: self open: dname address
							mode: dmode]
			ensure: [ dname free ].

	^proxy asSignedLong == -1
	ifFalse: [ proxy ]
	ifTrue: [ err value: #cannotOpenFile ]
)
readlink ^<FilePath> = (
	| path <Alien> MAX_PATH <Integer> linkname <Alien> |
	path:: Alien newCString: self name.
	linkname:: Alien newC: (MAX_PATH: 1024).
	^[| len |
	  len:: (readlink_func primFFICallResult: (Alien newWord)
			with: path address
			with: linkname address
			with: MAX_PATH) signedLongAt: 1.
	  len < 0
		ifTrue:
			[outer UnixFiles error: 'readlink: ']
		ifFalse:
			[linkname unsignedByteAt: len + 1 put: 0.
			 self class new pattern: linkname strcpy]
	] ensure: [path free. linkname free]
)
public realpath ^<FilePath> = (
	(* realpath - return the canonicalized absolute pathname *)
	| path <Alien> address <Integer> resolvedPath <Alien> |
	path:: Alien newCString: self name.
	^[address:: (realpath_func primFFICallResult: (Alien newWord)
			with: path address
			with: 0) addressAt: 1.
	(* By passing in NULL, we let realpath() allocate the buffer for the answer, but we are resonsible for calling free(). *)
	  address = 0
		ifTrue:
			[error: 'realpath: ']
		ifFalse:
			[resolvedPath:: Alien forPointer: address.
			self class new pattern: resolvedPath strcpy]
	] ensure: [path free. resolvedPath ifNotNil: [:it | Alien primFree: address]]
)
sharingValueFor: mode <Symbol> ^<ExternalData> = (
	mode = #read
	ifTrue: [ ^1    (* FILE_SHARE_WRITE *) ].
	(* in all other cases *)
	^0 (* no sharing *)
)
public size ^<Int> = (
	self stat: [:s| ^s fileSize] ifFail: [^error: 'Unable to stat file ', name].
)
stat: testBlock ifFail: failBlock = (
	| statBuffer <StatBuffer> name <CString> |

	statBuffer:: StatBuffer newC.
	name:: Alien newCString: self name.
	^[(xstat_func
			primFFICallResult: (Alien new: 4)
			with: statBuffer version
			with: name address
			with: statBuffer address)
		asSignedLong == -1
			ifTrue: [ failBlock value ]
			ifFalse: [ testBlock value: statBuffer ]]
		ensure: [ statBuffer free. name free]
)
statFailed = (
	outer UnixFiles error: 's/f/lstat: '
)
type ^<Str> = (
	(* The file type (on most platforms this is the part after the $. at the end) *)

	| indices <SeqCltn[Int]> |
	indices:: self name indicesOfSubCollection: '.'.
	indices isEmpty
	ifTrue: [ ^'' ].
	^self name
	  copyFrom: indices last + 1
	  to: self name size
)
) : (
public currentDirectory ^<FilePath> = (
	| cd |
	cd:: Alien newC: 500.
	^[getcwd_func
		primFFICallResult: (Alien newWord)
		with: cd address
		with: 500.
	  self new pattern: cd strcpy] ensure: [cd free]
)
public currentDirectory: file <FilePath> = (
		| name <Alien> |
		name:: Alien newCString: file name asString.
		[(chdir_func
 	   		primFFICallResult: (Alien new: 4)
 	   		with: name pointer)
		asSignedLong = 0 ifFalse:
			[error: 'Unable to cd to directory ', file name] ]
		ensure: [name free]
)
public for: aString = (
	^self new pattern: aString; yourself
)
)
public class UnixFilePattern = FilePattern (
) (
elementsDo: blk <[:FilePattern]> = (
	| s <CharacterReadStream> |

	pattern first = '/' ifTrue: [
		blk value: (FilePattern for: '/')].

	s:: self pattern readStream.

	[ s atEnd ]
		whileFalse:
			[ | next <Str> |
				next:: s upTo: '/'.
				next isEmpty
					ifFalse: [ blk value: (FilePattern for: next)] ]
)
extensions ^<FilePattern> = (
	^self , (FilePattern for: '*')
)
firstWildElementOf: els <SeqCltn[FilePattern]> ifFail: fail <[X def]> ^<Int | X> = (
	1 to: els size do:
	[:i <Int> |
	  (els at: i) isPath
	      ifFalse: [ ^i ]
	].
	^fail value
)
glob: glob pathsDo: blk = (
	| pathArray |
	pathArray:: (* self glPathv. *) Alien forPointer: (glob unsignedLongAt: vectorOffset).
	0 to: (
(* self glPathc *) glob signedLongAt: 1)  - 1 do: [:index|
		 |cstring|
		cstring:: Alien forPointer: (pathArray unsignedLongAt: index*4+1).
			blk value: cstring strcpy
	]
)
public isAbsolute ^<Boolean> = (
	^self pattern first == '/'
)
pathsDo: blk <[:FilePath]> = (
	self terminalPathsDo: blk
	(* | els <SeqCltn[FilePattern]> i <Int> |
	els := self elements.
	i := self firstWildElementOf: els
	      ifFail: [ ^self shouldNotHappen ].
	i = els size
	ifTrue: [ self terminalPathsDo: blk ]
	ifFalse: [ | rest <FilePattern> |
	              i + 1 = els size
	                  ifTrue: [ rest := els last ]
	                  ifFalse: [ rest := FilePattern forAll: (els copyFrom: i + 1 to: els size) ].
	              (FilePattern forAll: (els copyFrom: 1 to: i))
	                  pathsDo:
	                      [:fp <FilePath> |
	                          fp isDirectory
	                              ifTrue: [ (fp, rest) pathsDo: blk ] ]
	 ] *)
)
patternExtending: pat <FilePattern> ^<Str> = (
	^pat pattern last = "/"
	ifTrue: [ pat pattern, self pattern ]
	ifFalse: [ pat pattern,'/', self pattern ]
)
terminalPathsDo: blk <[:FilePath]> = (
	| glob pathArray strings patternString |
	glob:: Alien newC: 36.
	patternString:: Alien newCString: self pattern.

	glob_func
		primFFICallResult: nil
		with: patternString address
		with: (* flags *) 0
		with: (* ignore *) 0
		with: glob address.

	[glob: glob pathsDo: [:pathString| blk value: (FilePath for: pathString)]]
		ensure: [
			glob free.
			patternString free]
)
vectorOffset = (
	^5
)
) : (
public for: pat <Str> ^<FilePattern> = (
	self assert: [ self validPattern: pat ].
	^self new pattern: pat
)
public multipleMatchWildcardCharacter ^ <Character> = (
	^"*"
)
pathSeparatorCharacter ^ <Character> = (
	^'/'
)
public patternHasWildcards: pat <Str> ^<Boolean> = (
	^(pat includes: multipleMatchWildcardCharacter)
	or: [ pat includes: singleMatchWildcardCharacter ]
)
public singleMatchWildcardCharacter ^ <Character> = (
	^"?"
)
validPattern: pat <Str> ^<Boolean> = (
	(* Make sure this is a valid syntactic pattern (should be valid even if no *s) *)
	self unimplemented
)
)
error: aString = (
	| errno <Integer> result <Alien> msg <String> |
	errno: self lastError.
	result:: (strerror_func primFFICallResult: (Alien newWord) with: errno).
	msg:: Alien forPointer: (result addressAt: 1).
	self Error signal: aString, ' ', msg strcpy
)
lastError = (
	(* extern int * __error(void);
	 #define errno ( *__error()) *)
	^(Alien forPointer: ((__error_func primFFICallResult: (Alien newWord)) addressAt: 1)) signedLongAt: 1
)
public resetForNewImageSession = (
	| libc |
	libc:: Alien libcName.
	chdir_func::		Alien lookup: 'chdir' inLibrary: libc.
	chmod_func::		Alien lookup: 'chmod' inLibrary: libc.
	close_func::		Alien lookup: 'close' inLibrary: libc.
	__error_func::		[Alien lookup: '__errno_location' inLibrary: libc]
						on: NotFoundError
						do: [:ex| [Alien lookup: '__error' inLibrary: libc]
								on: NotFoundError do: [:ex| nil]].
	fxstat_func::		[Alien lookup: '__fxstat' inLibrary: libc]
						on: NotFoundError do: [:ex| nil].
	getcwd_func::		Alien lookup: 'getcwd' inLibrary: libc.
	getegid_func::		Alien lookup: 'getegid' inLibrary: libc.
	geteuid_func::		Alien lookup: 'geteuid' inLibrary: libc.
	glob_func::			Alien lookup: 'glob' inLibrary: libc.
	lseek_func::		Alien lookup: 'lseek' inLibrary: libc.
	lxstat_func::		[Alien lookup: '__lxstat' inLibrary: libc]
						on: NotFoundError do: [:ex| nil].
	mkdir_func::		Alien lookup: 'mkdir' inLibrary: libc.
	open_func::			Alien lookup: 'open' inLibrary: libc.
	strerror_func::		Alien lookup: 'strerror' inLibrary: libc.
	read_func::			Alien lookup: 'read' inLibrary: libc.
	readlink_func::		Alien lookup: 'readlink' inLibrary: libc.
	realpath_func::		Alien lookup: 'realpath' inLibrary: libc.
	rename_func::		Alien lookup: 'rename' inLibrary: libc.
	rmdir_func::		Alien lookup: 'rmdir' inLibrary: libc.
	symlink_func::		Alien lookup: 'symlink' inLibrary: libc.
	unlink_func::		Alien lookup: 'unlink' inLibrary: libc.
	write_func::		Alien lookup: 'write' inLibrary: libc.
	xstat_func::		[Alien lookup: '__xstat' inLibrary: libc]
							on: NotFoundError do: [:ex| nil].
	(* TermIO *)
	tcgetattr_func::		Alien lookup: 'tcgetattr' inLibrary: libc.
	tcsetattr_func::		Alien lookup: 'tcsetattr' inLibrary: libc.
	cfmakeraw_func::		Alien lookup: 'cfmakeraw' inLibrary: libc.
)
) : (
)
