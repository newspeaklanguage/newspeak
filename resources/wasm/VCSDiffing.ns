Newspeak3
'MemoryHole'
class VCSDiffing usingPlatform: p vcs: vcs ide: ide = (
(*
Copyright (c) 2010-2011 Matthias Kleine

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ''Software''), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ''AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. *)
|

TextDiffBuilder = p squeak TextDiffBuilder.
DiffElement = p squeak DiffElement.

private Set = p squeak Set.
private PluggableSet = p squeak PluggableSet.
private Text = p squeak Text.
private TextColor = p squeak TextColor.
private TextEmphasis = p squeak TextEmphasis.
private RunArray = p squeak RunArray.

private nodeComparisonAlgorithms = NodeComparisonAlgorithms new.
private TwowayNodeComparison = nodeComparisonAlgorithms TwowayNodeComparison.
private ThreewayNodeComparison = nodeComparisonAlgorithms ThreewayNodeComparison.

	tabString = Character tab asString.
	eolString = ''.
	spaceString = Character space asString.
	separatorCharacters = '(){}[]<>"''+-/.*' asSet.
|separatorCharacters addAll: {Character space. Character cr. Character tab. Character lf. Character newPage}) (
class ChangeInfo = (|
public changeLocation ::= 0.
public conflict ::= false.
pseudo ::= false.
public changeTypes ::= Set new.
|) (
public asAddition = (
	changeTypes:: Set with: #addition
)
public asChange = (
	changeTypes:: Set with: #change
)
public asConflict = (
	conflict:: true.
	changeLocation:: both
)
public asDeletion = (
	changeTypes:: Set with: #deletion
)
public asEquals = (
	changeTypes:: Set with: #equals.
)
public asLeft = (
	changeLocation:: left
)
public asPseudo = (
	pseudo:: true
)
public asRight = (
	changeLocation:: right
)
public both = (
	^3
)
hasOneChangeType: type = (
	^changeTypes size = 1 and: [changeTypes includes: type]
)
public isAddition = (
	^hasOneChangeType: #addition
)
public isBoth = (
	^changeLocation = both
)
public isConflict = (
	^conflict
)
public isDeletion = (
	^hasOneChangeType: #deletion
)
public isEquals = (
	^hasOneChangeType: #equals
)
public isLeft = (
	^changeLocation = left
)
public isRight = (
	^changeLocation = right
)
left = (
	^1
)
public mergeWith: other = (
	conflict:: conflict | other conflict.
	changeTypes:: changeTypes union: other changeTypes.
	changeLocation:: changeLocation bitOr: other changeLocation.
)
right = (
	^2
)
) : (
)
public class Differencer onComparisonAlgorithm: c = (
(* Constructs a TreeDiff for given input trees. Uses the provided comparison algorithm to compare corresponding tree nodes. *)
|
comparisonAlgorithm = c.
|) (
traverse: node inParent: parent = (
	node changeInfo: ((node left = node ancestor and: [node right = node ancestor])
		ifTrue: [ChangeInfo new asEquals]
		ifFalse: [
			node hasChildren
				ifFalse: [comparisonAlgorithm compare: node]
				ifTrue: [traverseNodeWithChildren: node inParent: parent]]).
	^node changeInfo
)
public traverseLeft: left right: right ancestor: ancestor = (
	| node |
	node:: TreeDiff new
		left: left;
		right: right;
		ancestor: ancestor;
		yourself.
	traverse: node inParent: nil.
	^node
)
traverseNodeWithChildren: node inParent: parent = (
	| mergedChangeInfo |

	mergedChangeInfo:: node children
		inject: ChangeInfo new
		into: [:acc :each |
			acc mergeWith: (traverse: each inParent: node)].

	(* If one node is deleted, additions to the other node will not be noticed as conflicts. Check for these here. *)
	(mergedChangeInfo isBoth and: [node left = nil or: [node right = nil]]) ifTrue: [
		mergedChangeInfo:: mergedChangeInfo asConflict].

	^mergedChangeInfo
)
) : (
public allEqual: collection = (
	| first withoutDuplicates |
	(collection anySatisfy: [:each | nil = each]) ifTrue: [
		^collection allSatisfy: [:each | nil = each]].
	withoutDuplicates:: collection asSet asOrderedCollection.
	first:: withoutDuplicates first.
	^withoutDuplicates allButFirst allSatisfy: [:each |
		(compare: first to: each) isEquals]
)
public compare: left to: right = (
	^(self onComparisonAlgorithm: TwowayNodeComparison new)
		traverseLeft: left right: right ancestor: nil
)
public compare: left to: right withAncestor: ancestor = (
	^(self onComparisonAlgorithm: ThreewayNodeComparison new)
		traverseLeft: left right: right ancestor: ancestor
)
)
class NodeComparisonAlgorithms = () (
class AbstractNodeComparison = (
) (
class AbstractAlgorithm onNode: n = (|
	node = n.
|) (
ancestor = (
	^node ancestor
)
check: input ifAbsent: absentBlock ifPresent: presentBlock = (
	(* We might want to decide that mirrors that are present but are empty are regarded as absent. *)
	^nil = input
		ifTrue: absentBlock
		ifFalse: presentBlock
)
public compare = (
	subclassResponsibility
)
left = (
	^node left
)
right = (
	^node right
)
) : (
)
Algorithm = (
	subclassResponsibility
)
public compare: node = (
	^(Algorithm onNode: node) compare
)
) : (
)
public class ThreewayNodeComparison = AbstractNodeComparison () (
class Algorithm onNode: n = AbstractAlgorithm onNode: n () (
ancestorAbsentLeftAbsent = (
	^check: right
		ifAbsent: [error: 'should not happen']
		ifPresent: [ChangeInfo new asAddition asRight]
)
ancestorAbsentLeftPresent = (
	^check: right
		ifAbsent: [ChangeInfo new asAddition asLeft]
		ifPresent: [
			(left contentsEquals: right)
				ifTrue: [ChangeInfo new asConflict asAddition asPseudo]
				ifFalse: [ChangeInfo new asConflict asAddition]]
)
ancestorPresentLeftAbsent = (
	^check: right
		ifAbsent: [ChangeInfo new asConflict asDeletion asPseudo]
		ifPresent: [
			(ancestor contentsEquals: right)
				ifTrue: [ChangeInfo new asLeft asDeletion]
				ifFalse: [ChangeInfo new asConflict asChange]]
)
ancestorPresentLeftPresent = (
	^check: right
		ifAbsent: [
			(ancestor contentsEquals: left)
				ifTrue: [ChangeInfo new asRight asDeletion]
				ifFalse: [ChangeInfo new asConflict asChange]]
		ifPresent: [
			| leftEquals rightEquals |
			leftEquals:: ancestor contentsEquals: left.
			rightEquals:: ancestor contentsEquals: right.
			leftEquals
				ifTrue: [
					rightEquals
						ifTrue: [ChangeInfo new asEquals]
						ifFalse: [ChangeInfo new asRight asChange]]
				ifFalse: [
					rightEquals
						ifTrue: [ChangeInfo new asLeft asChange]
						ifFalse: [
							(left contentsEquals: right)
								ifTrue: [ChangeInfo new asChange asConflict asPseudo]
								ifFalse: [ChangeInfo new asChange asConflict]]]]
)
public compare = (
	^check: ancestor
		ifAbsent: [
			check: left
				ifAbsent: [ancestorAbsentLeftAbsent]
				ifPresent: [ancestorAbsentLeftPresent]]
		ifPresent: [
			check: left
				ifAbsent: [ancestorPresentLeftAbsent]
				ifPresent: [ancestorPresentLeftPresent]]
)
) : (
)
) : (
)
public class TwowayNodeComparison = AbstractNodeComparison () (
class Algorithm onNode: n = AbstractAlgorithm onNode: n () (
public compare = (
	^check: left
		ifAbsent: [
			right
				ifNil: [error: 'should not happen']
				ifNotNil: [ChangeInfo new asAddition]]
		ifPresent: [
			right
				ifNil: [ChangeInfo new asDeletion]
				ifNotNil: [
					(left contentsEquals: right)
						ifTrue: [ChangeInfo new asEquals]
						ifFalse: [ChangeInfo new asChange]]]
)
) : (
)
) : (
)
) : (
)
class TextStream = (|
stream = String new writeStream.
runs = Array new writeStream.
values = Array new writeStream.
|) (
public contents = (
	| runArray |
	runArray:: RunArray runs: runs contents values: values contents.
	^Text
		string: stream contents
		runs: runArray
)
public nextPut: char = (
	nextPutAll: {char}
)
public nextPutAll: aString = (
	withAttributes: {} nextPutAll: aString
)
public withAttribute: attribute nextPutAll: aString = (
	withAttributes: {attribute} nextPutAll: aString
)
public withAttributes: attributes nextPutAll: aString = (
	| pos1 val |
	pos1:: stream position.
	stream nextPutAll: aString.
	runs nextPut: stream position - pos1.
	values nextPut: attributes.
)
) : (
)
class TreeDiff = (|
	public left
	public right
	public ancestor
	public changeInfo
	cachedChildren
	public leftChildren
	public rightChildren
	public ancestorChildren
	public nodeType
|) (
public anyNode = (
	{left. right. ancestor} do: [:each |
		each ifNotNil: [:it | ^ it]].
	error: 'not expected'
)
childRepresentatives = (
	| result |
	(* Store the children internally so that we don't have to expose too much of the set implementation. *)
	leftChildren:: childrenOf: left.
	rightChildren:: childrenOf: right.
	ancestorChildren:: childrenOf: ancestor.
	result:: newSet.
	result addAll: leftChildren.
	result addAll: rightChildren.
	result addAll: ancestorChildren.
	(*
	result:: newSet.
	result addAll: (leftChildren:: childrenOf: left).
	result addAll: (rightChildren:: childrenOf: right).
	result addAll: (ancestorChildren:: childrenOf: ancestor). *)
	^result
)
public children = (
	(* If this node is equals, all child nodes are equals. As we usually do not have to access child nodes of equal nodes we do not traverse equal nodes during difference calculation. Thus, we have to set the change info manually if the children are requested. *)
	| initialChangeInfo |
	initialChangeInfo:: ((nil = changeInfo) not and: [changeInfo isEquals])
		ifTrue: [changeInfo]
		ifFalse: [nil].
	^cachedChildren ifNil: [
		cachedChildren:: childRepresentatives collect: [:each |
			self class new
				changeInfo: initialChangeInfo;
				left: (leftChildren like: each) value;
				right: (rightChildren like: each) value;
				ancestor: (ancestorChildren like: each) value;
				nodeType: each key;
				yourself].
		cachedChildren].
)
public childrenOf: input = (
	| result |
	result:: newSet.
	input ifNotNil: [:it |
		result addAll: input children].
	^result
)
public hasChildren = (
	^children isEmpty not
)
public isEquals = (
	^changeInfo isEquals
)
public leftAncestorRightCollect: block = (
	^{left. ancestor. right} collect: [:each |
		each ifNotNil: [:it | block value: it]]
)
public name = (
	^anyNode name
)
public newSet = (
	^PluggableSet  new
		equalBlock: [:a :b | a key = b key and: [a value correspondsTo: b value]];
		hashBlock: [:a | a value correspondsHash];
		yourself.
)
) : (
)
class WordDiffBuilder from: a to: b = TextDiffBuilder (|
|super from: a to: b) (
public split: string = (
	| separators previousSeparator |
	separators:: Array streamContents:
		[:s |
		string withIndexDo:
			[:each :i |
			(separatorCharacters includes: each)
				ifTrue: [s nextPut: i]]].
	separators isEmpty ifTrue: [^{DiffElement string: string}].
	previousSeparator:: 0.
	^(Array streamContents:
		[:s | | rest |
		separators do: [:separator | | separatorChar |
			(separator - 1) <= previousSeparator ifFalse: [
				s nextPut: (string copyFrom: previousSeparator + 1 to: separator - 1)].
			separatorChar:: string at: separator.
			separatorChar = Character tab
				ifTrue: [s nextPut: tabString]
				ifFalse: [
					 separatorChar = Character space
						ifTrue: [s nextPut: spaceString]
						ifFalse: [s nextPut: separatorChar asString]].
			previousSeparator:: separator].
		rest:: string allButFirst: previousSeparator.
		rest isEmpty ifFalse: [s nextPut: rest].
		s nextPut: eolString]) collect: [:ea | DiffElement string: ea]
)
) : (
public ignoreLineEndings = (
	^TextDiffBuilder ignoreLineEndings
)
)
public class WordMerger = (|
public ancestor
public left
public right

public lStream
public rStream

outStream
leftOutStream
rightOutStream
ancestorOutStream

inConflict ::= false.
lConflict
rConflict
|) (
public ancestorOut = (
	^ancestorOutStream contents
)
public anyChanged = (
	^left ~= ancestor or: [right ~= ancestor]
)
public automaticMergedOut = (
	^outStream contents
)
beginConflict = (
	inConflict ifFalse: [
		inConflict:: true.
		lConflict:: newTextStream.
		rConflict:: newTextStream].
)
public bothChanged = (
	^left ~= ancestor and: [right ~= ancestor]
)
conflictEndMarker = (
	^'>>>>>'
)
conflictMiddleMarker = (
	^'====='
)
conflictStartMarker = (
	^'<<<<<'
)
endConflict = (
	inConflict ifTrue: [ | leftContents rightContents isPseudo |
		inConflict:: false.
		leftContents:: lConflict contents.
		rightContents:: rConflict contents.
		isPseudo:: leftContents = rightContents.
		isPseudo
			ifTrue: [
				outStream nextPutAll: leftContents]
			ifFalse: [
				writeConflictMarker: conflictStartMarker.
				outStream nextPutAll: leftContents.
				writeConflictMarker: conflictMiddleMarker.
				outStream nextPutAll: rightContents.
				writeConflictMarker: conflictEndMarker]]
)
handleDualRemove = (
	| l r |
	l:: lStream peek.
	r:: rStream peek.

	to: ancestorOutStream writeRemove: r value.
	lStream next.
	rStream next.
)
handleInsertConflict = (
	| l r |
	l:: lStream peek.
	r:: rStream peek.

	((l key = #insert and: [r key = #insert]) and: [l value = r value]) ifTrue: [
		(* pseudo conflict *)
		endConflict.
		to: outStream writeInsert: l value.
		to: leftOutStream writeInsert: l value.
		to: rightOutStream writeInsert: r value.
		to: ancestorOutStream writeLinebreaksOf: l value.
		rStream next.
		lStream next.
		^self].
	beginConflict.
	l key = #insert ifTrue: [
		to: lConflict writeInsert: l value.
		to: leftOutStream writeInsert: l value.
		lStream next].
	r key = #insert ifTrue: [
		to: rConflict writeInsert: r value.
		to: rightOutStream writeInsert: r value.
		rStream next].
)
handleMerge = (
	| l r |
	l:: lStream peek.
	r:: rStream peek.

	(l key = #remove or: [r key = #remove]) ifFalse: [
		endConflict].
	(l key = #match or: [l key = #remove]) ifTrue: [
		rStream next].
	(r key = #match or: [r key = #remove]) ifTrue: [
		lStream next].
	l key = #match and: [r key = #match ifTrue: [
		outStream nextPutAll: r value.
		leftOutStream nextPutAll: r value.
		rightOutStream nextPutAll: r value.
		ancestorOutStream nextPutAll: r value]].
	l key = #insert ifTrue: [
		to: outStream writeInsert: l value.
		to: leftOutStream writeInsert: l value.
		to: rightOutStream writeLinebreaksOf: l value.
		to: ancestorOutStream writeLinebreaksOf: l value].
	r key = #insert ifTrue: [
		to: outStream writeInsert: r value.
		to: rightOutStream writeInsert: r value.
		to: leftOutStream writeLinebreaksOf: r value.
		to: ancestorOutStream writeLinebreaksOf: r value].
	l key = #remove ifTrue: [
		inConflict ifTrue: [
			rConflict nextPutAll: r value].
		to: rightOutStream writeRemove: l value.
		to: ancestorOutStream writeRemove: l value].
	r key = #remove ifTrue: [
		inConflict ifTrue: [
			lConflict nextPutAll: l value].
		to: leftOutStream writeRemove: r value.
		to: ancestorOutStream writeRemove: r value]
)
handleOneSideNil = (
	(* Text is appended *)
	| l r |
	l:: lStream peek.
	r:: rStream peek.

	(nil = l and: [r key = #insert]) ifTrue: [
		rStream next.
		to: outStream writeInsert: r value.
		to: rightOutStream writeInsert: r value.
		to: leftOutStream writeLinebreaksOf: r value.
		to: ancestorOutStream writeLinebreaksOf: r value.
		^self].
	(nil = r and: [l key = #insert]) ifTrue: [
		lStream next.
		to: outStream writeInsert: l value.
		to: leftOutStream writeInsert: l value.
		to: rightOutStream writeLinebreaksOf: l value.
		to: ancestorOutStream writeLinebreaksOf: l value.
		^self].
	errorNotExpected
)
public isAddition = (
	^ancestor isEmpty and: [
		(left isEmpty and: [right isEmpty not]) or: [
			right isEmpty and: [left isEmpty not]]]
)
public isDeletion = (
	^ancestor isEmpty not and: [
		(left = ancestor and: [right isEmpty]) or: [
			right = ancestor and: [left isEmpty]]]
)
public leftChanged = (
	^left ~= ancestor and: [right = ancestor]
)
public leftOut = (
	^leftOutStream contents
)
public merge = (
	tryOptimizedMerge ifNotNil: [:it | ^ outStream contents].
	lStream:: (WordDiffBuilder from: ancestor to: left) buildPatchSequence readStream.
	rStream:: (WordDiffBuilder from: ancestor to: right) buildPatchSequence readStream.
	outStream:: newTextStream.
	leftOutStream:: newTextStream.
	rightOutStream:: newTextStream.
	ancestorOutStream:: newTextStream.
	[{lStream. rStream} allSatisfy: [:each | each atEnd]] whileFalse: [
		mergeNext].
	endConflict.
	^outStream contents
)
mergeNext = (
	| l r |
	l:: lStream peek.
	r:: rStream peek.

	(nil = l or: [nil = r])
		ifTrue: [handleOneSideNil]
		ifFalse: [
			(l key = #match or: [r key = #match])
				ifTrue: [handleMerge]
				ifFalse: [
					(l key = #insert or: [r key = #insert])
						ifTrue: [handleInsertConflict]
						ifFalse: [handleDualRemove]]]
)
mergeOneSideEmpty: string = (
	(* optimization for the case of left or right being empty *)
	| text |
	text:: string asText.
	ancestor isEmpty
		ifTrue: [
			text isEmpty ifFalse: [
				text addAttribute: TextColor blue.
				outStream:: text readStream]]
		ifFalse: [
			text isEmpty
				ifTrue: [outStream:: text readStream]
				ifFalse: [text addAttribute: TextColor red]].
	^text readStream
)
newTextStream = (
	^TextStream new (* on: Text new *)
)
public rightChanged = (
	^right ~= ancestor and: [left = ancestor]
)
public rightOut = (
	^rightOutStream contents
)
to: stream writeInsert: string = (
	stream
		withAttribute: TextColor blue
		nextPutAll: string.
)
to: stream writeLinebreaksOf: string = (
	string do: [:each |
		(each = Character cr or: [each = Character lf]) ifTrue: [
			stream nextPut: each]].
)
to: stream writeRemove: string = (
	stream
		withAttribute: TextColor red
		nextPutAll: string
)
tryEqualMerge = (
	left = right ifFalse: [^nil].
	leftOutStream:: left asText readStream.
	rightOutStream:: right asText readStream.
	ancestorOutStream:: ancestor asText readStream.
	outStream:: leftOutStream.
	^outStream
)
tryOneSideEmptyMerge = (
	(* if left or right is empty, we either have a complete addition or a complete removal *)

	(* full addition *)
	(((ancestor isEmpty and: [(left isEmpty or: [right isEmpty])]) or: [
		left isEmpty and: [ancestor = right]]) or: [
		right isEmpty and: [ancestor = left]]) ifFalse: [^ nil].
	leftOutStream:: mergeOneSideEmpty: left.
	rightOutStream:: mergeOneSideEmpty: right.
	ancestorOutStream:: ancestor asText readStream.
	^outStream
)
tryOptimizedMerge = (
	tryOneSideEmptyMerge ifNotNil: [:it | ^it].
	tryEqualMerge ifNotNil: [:it | ^it].
	^nil
)
writeConflictMarker: marker = (
	outStream
		withAttributes: {TextColor red. TextEmphasis bold}
		nextPutAll: marker
)
) : (
public merge: lar = (
	^merge: lar first with: lar last withAncestor: lar second
)
public merge: left with: right = (
	^merge: left with: right withAncestor: left
)
public merge: left with: right withAncestor: ancestor = (
	^self new
		left: (left ifNil: ['']);
		right: (right ifNil: ['']);
		ancestor: (ancestor ifNil: ['']);
		merge
)
public on: lar = (
	^self new
		left: (lar first ifNil: ['']);
		right: (lar last ifNil: ['']);
		ancestor: (lar second ifNil: ['']);
		merge;
		yourself
)
public withRemovalsMerge: left with: right withAncestor: ancestor = (
	^self new
		left: (left ifNil: ['']);
		right: (right ifNil: ['']);
		ancestor: (ancestor ifNil: ['']);
		merge
)
)
) : (
)
