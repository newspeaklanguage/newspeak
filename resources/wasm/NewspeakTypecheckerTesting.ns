Newspeak3
'Newspeak'
class NewspeakTypecheckerTesting usingPlatform: p <Platform>
  testing: tc namespace: ns <Namespacing Namespace>
  strategy: ts <InImageNSCompilerTestingStrategy>
  testFramework: minitest <Minitest> = (
|
	(* Imports *)
	private TestContext <Minitest TestContext class> = minitest TestContext.
	private Set = p collections Set.

	(* module variables *)
      testingStrategy <InImageNSCompilerTestingStrategy> = ts.
	private namespace <Namespacing Namespace> = ns.
	private typechecker <NewspeakTypechecker> = tc.
|) (
public class NewspeakTypecheckerTests = TestContext (
(*  namespaceAddType: toplevelClass1.
  namespaceAddType: toplevelClass2.
  namespaceAddType: toplevelClass3 *)
) (
class TestClass1 = (
) (
noArgsWithType ^ <String> = (
    ^'noArgsWithType'
 )
) : (
)
assertNoTypeErrorInMethod: methodSource <String> within: enclosingClass = (
	^assertTypeErrors: Set new inMethod: methodSource within: enclosingClass
)
assertTypeErrors: es <Set[TypeError]> inMethod: methodSource <String> within: enclosingClass = (
	| errorSet <Set[TypeError]> |
	[
	errorSet:: typechecker typecheck: methodSource in: enclosingClass.
	errorSet = es ifFalse: [].

			ifFailure: [:message | ^self]
			ifError: [:message | ^self]]
		on: Error (* not Exception, which catches InMidstOfFileinNotifications *)
		do: [:ex | ^self].
)
namespaceAddType: t = (
	namespace at: t name put: t
)
public otestToplevelClass1_returnString = (
  ^ test: toplevelClass1 with:
		'class SampleTest test: sampleClass = ( | klass = sampleClass. | ) (
			public test = (
                        | eset = typecheckMethodSource: ''returnString ^ <String> = (^noArgsWithType)'' ofClass: klass. |
				assert: [eset isEmpty]
					description: ''Assertion failed: errors in method of class returned by toplevelClass1''.
			)
		)'
)
test: sampleClassSource <String> with: testClassSource <String> = (
	testingStrategy
		test: sampleClassSource
		with: testClassSource
		ifFailure: [:message | failWithMessage: message]
		ifError: [:message | Error new signal: message]
)
public testReturnString = (
    | eset = typechecker typecheckMethodSource: 'returnString ^ <String> = (^noArgsWithType)' ofClass: TestClass1. |
        eset do: [:e | e out].
    assert: [eset isEmpty]
    description: 'Assertion failed: errors in method of class returned by toplevelClass1 ', eset printString.
)
public testSampleMethod: sampleMethod <String> with: testMethodBody <String> = (
	test:
'class Sample = () (
',
	sampleMethod,
')'
	with:
'class SampleTest test: sampleClass = ( | sample = sampleClass new. | ) (
	public test = (',
	testMethodBody,
	')
)'
)
toplevelClass1 = (
	^'
class Sample = (
(*Top level test class for typechecker.*)
|
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
|
) (
  class N2 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (
    class N2N2 = (
    |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
    |)
    (

       argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
	     ^#argsWithType:
       )
    ) : () (* end N2N2 *)
    private class PrivateN2N3 = (
    |
	public publicTypedSlot1 <toplevelClass1>
	protectedTypedSlot2 <toplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
    |)
    (

      argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
	  ^#argsWithType:
      )
    ) : () (* end PrivateN2N3 *)
    public class PublicN2N1 = (
    |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
    |)
   (

      argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
        ^#argsWithType:
      )
    ) : () (* end PublicN2N1 *)

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
  ) : () (* end N2 *)
  private class PrivateN3 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (
  class N3N2 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
    noArgsNoType = ()
    noArgsWithExplicitSelf ^ <Self> = ( )
    noArgsWithType ^ <String> = (
      ^''noArgsWithType''
    )
    private privateArgsNoType: a1 and: a2 = ()
  ) : () (* end N3N2 *)
  private class PrivateN3N3 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
    noArgsNoType = ()
    noArgsWithExplicitSelf ^ <Self> = ()
    noArgsWithType ^ <String> = (
      ^''noArgsWithType''
    )
  ) : () (* end N3N3 *)

  public class PublicN3N1 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
    noArgsNoType = ()
    noArgsWithExplicitSelf ^ <Self> = ()
    noArgsWithType ^ <String> = (
      ^''noArgsWithType''
    )
  ) : () (* end N3N1 *)

  argsNoType: a1 and: a2 = ()
  argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
  argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
    ^#argsWithType:
  )
  noArgsNoType = ()
  noArgsWithExplicitSelf ^ <Self> = ()
  noArgsWithType ^ <String> = (
    ^''noArgsWithType''
  )
  private privateArgsNoType: a1 and: a2 = ()
) : () (* end N3 *)

public class PublicN1 = (
|
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
|)
(
  class N1N2 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
   noArgsNoType = ()
   noArgsWithExplicitSelf ^ <Self> = ()
   noArgsWithType ^ <String> = (
     ^''noArgsWithType''
    )
    private privateArgsNoType: a1 and: a2 = ()
  ) : () (* end N1N2 *)
  private class PrivateN1N3 = (
  |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
	private privateSlot6
  |)
  (

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
    noArgsNoType = ()
    noArgsWithExplicitSelf ^ <Self> = ()
    noArgsWithType ^ <String> = (
      ^''noArgsWithType''
    )
    private privateArgsNoType: a1 and: a2 = ()
    ) : () (* N1N3*)
    public class PublicN1N1 = (
    |
	public publicTypedSlot1 <ToplevelClass1>
	protectedTypedSlot2 <ToplevelClass2>
	private privateTypedSlot3 <Collections List>
	public publicSlot4
	protectedSlot5
      private privateSlot6
    |)
    (

      argsNoType: a1 and: a2 = ()
      argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
      argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
        ^#argsWithType:
      )
      noArgsNoType = ()
      noArgsWithExplicitSelf ^ <Self> = ()
      noArgsWithType ^ <String> = (
        ^''noArgsWithType''
      )
      private privateArgsNoType: a1 and: a2 = ()
      private privateArgsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
      private privateArgsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Boolean> = (
        ^true
	)
      private privateNoArgsNoType = ()
      private privateNoArgsWithExplicitSelf ^ <Self> = ()
      private privateNoArgsWithType ^ <Integer> = (
        ^3
      )
      public publicArgsNoType: a1 and: a2 = ()
      public publicArgsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
      public publicArgsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Boolean> = (
        ^true
      )
      public publicNoArgsNoType = ()
      public publicNoArgsWithExplicitSelf ^ <Self> = ()
      public publicNoArgsWithType ^ <String> = (
        ^''publicNoArgsWithType''
      )
    ) : () (* end N1N1*)

    argsNoType: a1 and: a2 = ()
    argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
    argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
      ^#argsWithType:
    )
    noArgsNoType = ()
    noArgsWithExplicitSelf ^ <Self> = ()
    noArgsWithType ^ <String> = (
      ^''noArgsWithType''
    )
    private privateArgsNoType: a1 and: a2 = ()
  ) : () (* end N1 *)

  argsNoType: a1 and: a2 = ()
  argsNoTypeWithExplicitSelf: a1 and: a2 ^ <Self> = ()
  argsWithType: a1 <ToplevelClass1 PublicN1> and: a2 <ToplevelClass N2> ^ <Symbol> = (
    ^#argsWithType:
  )
  noArgsNoType = ()
  noArgsWithExplicitSelf ^ <Self> = ()
  noArgsWithType ^ <String> = (
    ^''noArgsWithType''
  )
  private privateArgsNoType: a1 and: a2 = ()
) : () (* end Sample *)
'
)
toplevelClass2 = (
)
toplevelClass3 = (
)
) : (
TEST_CONTEXT = ()
)
) : (
)
